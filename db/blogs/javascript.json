{"meta":{"status":200,"msg":"OK"},"response":{"blog":{"ask":true,"ask_anon":false,"ask_page_title":"Ask an Engineer","can_subscribe":false,"description":"require('tumblr.js');","is_adult":false,"is_nsfw":false,"name":"javascript","posts":14,"reply_conditions":"3","share_likes":false,"subscribed":false,"title":"JavaScript at Tumblr","total_posts":14,"updated":1527706401,"url":"https://javascript.tumblr.com/","is_optout_ads":false},"posts":[{"type":"text","blog_name":"javascript","id":174409902617,"post_url":"https://javascript.tumblr.com/post/174409902617/come-join-us","slug":"come-join-us","date":"2018-05-30 18:53:21 GMT","timestamp":1527706401,"state":"published","format":"html","reblog_key":"AvilTAow","tags":["javascript","react","typescript","tumblr.com/jobs","flavortown"],"short_url":"https://tmblr.co/ZAczzi2YRe_eP","summary":"Come join us!","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":49,"title":"Come join us!","body":"<p>If you’ve been following this Tumblr, you’ll likely know that we, the Core Web team, have recently started <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\" target=\"_blank\">rewriting and modernizing the Tumblr web platform</a>. This undertaking presents some incredibly exciting opportunities to innovate with lots of fun technologies. We’re working on improving every aspect of the web; the dashboard, the archive, the blog network, you name it.  </p><p><b>Are you a senior JavaScript engineer and wanna be a part of this adventure? </b>Come join Core Web!<b> </b>You’ll help create the building blocks with which a brand new modern Tumblr will be built. Your work will directly impact and define the user experience for millions of users and the development tools for a large number of product engineers across several teams at Tumblr!</p><figure data-orig-width=\"480\" data-orig-height=\"362\" data-tumblr-attribution=\"successfulantfarmer:p5fpf_4le0NKcT7CA2dqnA:Zt53De2QlpAuR\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/734e0f04a52aa6312c6b152a1b988276/tumblr_oxh5z2q6sw1w9f539o1_250.gifv\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"362\"/></figure><h2>What you’ll do</h2><p>We’re looking for an extraordinary senior JavaScript engineer who wants to take on the following challenges:</p><ul><li>Keep making our <b>build and deployment</b> more delightful and futuristic<br/></li><li>Help establish <b>norms and standards</b> for how this new web client should be architected, including setting JavaScript, CSS, performance and other best-practices, and introducing/creating the tools to achieve them<br/></li><li>Internally and externally <b>raising awareness</b> around the work the team is doing by being active in the Open-source and engineering community <br/></li><li>Whatever else you think will help us create the <b>highest quality web platform</b> and development experience!<br/></li></ul><h2>Who we’re looking for</h2><p>An ideal team member is someone with:</p><ul><li>Strong <b>JavaScript and CSS</b> fundamentals<br/></li><li>Experience setting up <b>Continuous Integration / Continuous Deploys</b><br/></li><li>Expertise in <b>build tools</b> like Webpack, Parcel (or similar)<br/></li><li><b>Pragmatism</b> and the ability to decide what&rsquo;s “good enough” (while planning ahead and knowing when to iterate)<br/></li><li>An ability to <b>independently drive projects</b><br/></li><li>A desire to <b>innovate</b> and bring <b>new things</b> into the world<br/></li><li>An understanding of <b>code quality</b>, unit test coverage, and performance<br/></li><li><a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\" target=\"_blank\"><b>Empathy</b> and the desire to elevate those around them</a><br/></li><li>The belief that work is just as much about the journey as the destination<br/></li></ul><h2>Our current toolkit</h2><ul><li>Webpack<br/></li><li>ES6<br/></li><li>React and React Router<br/></li><li>CSS Modules<br/></li><li><a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" target=\"_blank\">TypeScript</a><br/></li><li>Jenkins and Jenkins pipelines<br/></li><li>Docker<br/></li><li>Node and Express<br/></li><li>Kubernetes<br/></li></ul><p>If you’re interested, but your background does not include all of the above, please don’t let that hold you back. Let’s talk! To apply, <a href=\"https://oath.wd5.myworkdayjobs.com/careers/job/US---New-York-Broadway-770/Tumblr--Senior-JavaScript-Engineer--Core-Web_JR0004101\" target=\"_blank\"><b>follow the instructions at the bottom of our official job listings page</b></a>! </p><figure data-orig-width=\"500\" data-orig-height=\"320\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NRac01\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/0847a65cdf7883544022907ea0ef5195/tumblr_oskvvlkexW1tr6ni8o1_500.gifv\" alt=\"image\" data-orig-width=\"500\" data-orig-height=\"320\"/></figure><p>We can’t wait to hear from you!<br/></p>","reblog":{"comment":"<p>If you’ve been following this Tumblr, you’ll likely know that we, the Core Web team, have recently started <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\" target=\"_blank\">rewriting and modernizing the Tumblr web platform</a>. This undertaking presents some incredibly exciting opportunities to innovate with lots of fun technologies. We’re working on improving every aspect of the web; the dashboard, the archive, the blog network, you name it.  </p><p><b>Are you a senior JavaScript engineer and wanna be a part of this adventure? </b>Come join Core Web!<b> </b>You’ll help create the building blocks with which a brand new modern Tumblr will be built. Your work will directly impact and define the user experience for millions of users and the development tools for a large number of product engineers across several teams at Tumblr!</p><figure data-orig-width=\"480\" data-orig-height=\"362\" data-tumblr-attribution=\"successfulantfarmer:p5fpf_4le0NKcT7CA2dqnA:Zt53De2QlpAuR\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/734e0f04a52aa6312c6b152a1b988276/tumblr_oxh5z2q6sw1w9f539o1_250.gifv\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"362\"></figure><h2>What you’ll do</h2><p>We’re looking for an extraordinary senior JavaScript engineer who wants to take on the following challenges:</p><ul><li>Keep making our <b>build and deployment</b> more delightful and futuristic<br></li><li>Help establish <b>norms and standards</b> for how this new web client should be architected, including setting JavaScript, CSS, performance and other best-practices, and introducing/creating the tools to achieve them<br></li><li>Internally and externally <b>raising awareness</b> around the work the team is doing by being active in the Open-source and engineering community <br></li><li>Whatever else you think will help us create the <b>highest quality web platform</b> and development experience!<br></li></ul><h2>Who we’re looking for</h2><p>An ideal team member is someone with:</p><ul><li>Strong <b>JavaScript and CSS</b> fundamentals<br></li><li>Experience setting up <b>Continuous Integration / Continuous Deploys</b><br></li><li>Expertise in <b>build tools</b> like Webpack, Parcel (or similar)<br></li><li><b>Pragmatism</b> and the ability to decide what’s “good enough” (while planning ahead and knowing when to iterate)<br></li><li>An ability to <b>independently drive projects</b><br></li><li>A desire to <b>innovate</b> and bring <b>new things</b> into the world<br></li><li>An understanding of <b>code quality</b>, unit test coverage, and performance<br></li><li><a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\" target=\"_blank\"><b>Empathy</b> and the desire to elevate those around them</a><br></li><li>The belief that work is just as much about the journey as the destination<br></li></ul><h2>Our current toolkit</h2><ul><li>Webpack<br></li><li>ES6<br></li><li>React and React Router<br></li><li>CSS Modules<br></li><li><a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" target=\"_blank\">TypeScript</a><br></li><li>Jenkins and Jenkins pipelines<br></li><li>Docker<br></li><li>Node and Express<br></li><li>Kubernetes<br></li></ul><p>If you’re interested, but your background does not include all of the above, please don’t let that hold you back. Let’s talk! To apply, <a href=\"https://oath.wd5.myworkdayjobs.com/careers/job/US---New-York-Broadway-770/Tumblr--Senior-JavaScript-Engineer--Core-Web_JR0004101\" target=\"_blank\"><b>follow the instructions at the bottom of our official job listings page</b></a>! </p><figure data-orig-width=\"500\" data-orig-height=\"320\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NRac01\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/0847a65cdf7883544022907ea0ef5195/tumblr_oskvvlkexW1tr6ni8o1_500.gifv\" alt=\"image\" data-orig-width=\"500\" data-orig-height=\"320\"></figure><p>We can’t wait to hear from you!<br></p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"174409902617"},"content_raw":"<p>If you’ve been following this Tumblr, you’ll likely know that we, the Core Web team, have recently started <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\" target=\"_blank\">rewriting and modernizing the Tumblr web platform</a>. This undertaking presents some incredibly exciting opportunities to innovate with lots of fun technologies. We’re working on improving every aspect of the web; the dashboard, the archive, the blog network, you name it.  </p><p><b>Are you a senior JavaScript engineer and wanna be a part of this adventure? </b>Come join Core Web!<b> </b>You’ll help create the building blocks with which a brand new modern Tumblr will be built. Your work will directly impact and define the user experience for millions of users and the development tools for a large number of product engineers across several teams at Tumblr!</p><figure data-orig-width=\"480\" data-orig-height=\"362\" data-tumblr-attribution=\"successfulantfarmer:p5fpf_4le0NKcT7CA2dqnA:Zt53De2QlpAuR\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/734e0f04a52aa6312c6b152a1b988276/tumblr_oxh5z2q6sw1w9f539o1_250.gifv\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"362\"></figure><h2>What you’ll do</h2><p>We’re looking for an extraordinary senior JavaScript engineer who wants to take on the following challenges:</p><ul><li>Keep making our <b>build and deployment</b> more delightful and futuristic<br></li><li>Help establish <b>norms and standards</b> for how this new web client should be architected, including setting JavaScript, CSS, performance and other best-practices, and introducing/creating the tools to achieve them<br></li><li>Internally and externally <b>raising awareness</b> around the work the team is doing by being active in the Open-source and engineering community <br></li><li>Whatever else you think will help us create the <b>highest quality web platform</b> and development experience!<br></li></ul><h2>Who we’re looking for</h2><p>An ideal team member is someone with:</p><ul><li>Strong <b>JavaScript and CSS</b> fundamentals<br></li><li>Experience setting up <b>Continuous Integration / Continuous Deploys</b><br></li><li>Expertise in <b>build tools</b> like Webpack, Parcel (or similar)<br></li><li><b>Pragmatism</b> and the ability to decide what’s “good enough” (while planning ahead and knowing when to iterate)<br></li><li>An ability to <b>independently drive projects</b><br></li><li>A desire to <b>innovate</b> and bring <b>new things</b> into the world<br></li><li>An understanding of <b>code quality</b>, unit test coverage, and performance<br></li><li><a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\" target=\"_blank\"><b>Empathy</b> and the desire to elevate those around them</a><br></li><li>The belief that work is just as much about the journey as the destination<br></li></ul><h2>Our current toolkit</h2><ul><li>Webpack<br></li><li>ES6<br></li><li>React and React Router<br></li><li>CSS Modules<br></li><li><a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" target=\"_blank\">TypeScript</a><br></li><li>Jenkins and Jenkins pipelines<br></li><li>Docker<br></li><li>Node and Express<br></li><li>Kubernetes<br></li></ul><p>If you’re interested, but your background does not include all of the above, please don’t let that hold you back. Let’s talk! To apply, <a href=\"https://oath.wd5.myworkdayjobs.com/careers/job/US---New-York-Broadway-770/Tumblr--Senior-JavaScript-Engineer--Core-Web_JR0004101\" target=\"_blank\"><b>follow the instructions at the bottom of our official job listings page</b></a>! </p><figure data-orig-width=\"500\" data-orig-height=\"320\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NRac01\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/0847a65cdf7883544022907ea0ef5195/tumblr_oskvvlkexW1tr6ni8o1_500.gifv\" alt=\"image\" data-orig-width=\"500\" data-orig-height=\"320\"></figure><p>We can’t wait to hear from you!<br></p>","content":"<p>If you&rsquo;ve been following this Tumblr, you&rsquo;ll likely know that we, the Core Web team, have recently started <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\" target=\"_blank\">rewriting and modernizing the Tumblr web platform</a>. This undertaking presents some incredibly exciting opportunities to innovate with lots of fun technologies. We&rsquo;re working on improving every aspect of the web; the dashboard, the archive, the blog network, you name it.&nbsp;&nbsp;</p><p><b>Are you a senior JavaScript engineer and wanna be a part of this adventure? </b>Come join Core Web!<b>&nbsp;</b>You&rsquo;ll help create the building blocks with which a brand new modern Tumblr will be built.&nbsp;Your work will directly impact and define the user experience for millions of users and the development tools for a large number of product engineers across several teams at Tumblr!</p><figure data-tumblr-media-id=\"0\" class=\"tmblr-full\"></figure><h2>What you&rsquo;ll do</h2><p>We&rsquo;re looking for an extraordinary senior JavaScript engineer who wants to take on the following challenges:</p><ul><li>Keep making our <b>build and deployment</b>&nbsp;more delightful and futuristic<br /></li><li>Help establish <b>norms and standards</b> for how this new web client should be architected, including setting JavaScript, CSS, performance and other best-practices, and introducing/creating the tools to achieve them<br /></li><li>Internally and externally <b>raising awareness</b> around the work the team is doing by being active in the Open-source and engineering community&nbsp;<br /></li><li>Whatever else you think will help us create the <b>highest quality web platform</b> and development experience!<br /></li></ul><h2>Who we&rsquo;re looking for</h2><p>An ideal team member is someone with:</p><ul><li>Strong <b>JavaScript and CSS</b> fundamentals<br /></li><li>Experience setting up&nbsp;<b>Continuous Integration / Continuous Deploys</b><br /></li><li>Expertise in <b>build tools</b> like Webpack, Parcel (or similar)<br /></li><li><b>Pragmatism</b> and the ability to decide what&rsquo;s &ldquo;good enough&rdquo; (while planning ahead and knowing when to iterate)<br /></li><li>An ability to <b>independently drive projects</b><br /></li><li>A desire to <b>innovate</b> and bring <b>new things</b> into the world<br /></li><li>An understanding of <b>code quality</b>, unit test coverage, and performance<br /></li><li><a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\" target=\"_blank\"><b>Empathy</b> and the desire to elevate those around them</a><br /></li><li>The belief that work is just as much about the journey as the destination<br /></li></ul><h2>Our current toolkit</h2><ul><li>Webpack<br /></li><li>ES6<br /></li><li>React and React Router<br /></li><li>CSS Modules<br /></li><li><a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" target=\"_blank\">TypeScript</a><br /></li><li>Jenkins and Jenkins pipelines<br /></li><li>Docker<br /></li><li>Node and Express<br /></li><li>Kubernetes<br /></li></ul><p>If you&rsquo;re interested, but your background does not include all of the above, please don&rsquo;t let that hold you back. Let&rsquo;s talk!&nbsp;To apply, <a href=\"https://oath.wd5.myworkdayjobs.com/careers/job/US---New-York-Broadway-770/Tumblr--Senior-JavaScript-Engineer--Core-Web_JR0004101\" target=\"_blank\"><b>follow the instructions at the bottom of our official job listings page</b></a>!&nbsp;</p><figure data-tumblr-media-id=\"1\" class=\"tmblr-full\"></figure><p>We can&rsquo;t wait to hear from you!<br /></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":172624931022,"post_url":"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr","slug":"a-big-new-beautiful-future-for-the-web-at-tumblr","date":"2018-04-05 15:25:42 GMT","timestamp":1522941942,"state":"published","format":"html","reblog_key":"LHmsrMB0","tags":["javascript","react","dr phil m&m","computer"],"short_url":"https://tmblr.co/ZAczzi2WnFsZE","summary":"A Big New Beautiful Future for the Web at Tumblr","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":146,"title":"A Big New Beautiful Future for the Web at Tumblr","body":"<p>In the ten years that Tumblr’s been around, a lot has changed in web technology. We’ve kept up, of course, but it’s always been a process of addition, layering one new technology on top of another. And what we were working with—a custom framework built on top of <a href=\"http://backbonejs.org\" target=\"_blank\">Backbone</a>, messily entangled with a PHP backend and its associated templates—was becoming unmanageable. Our piecemeal conversions to new technologies meant we had thousands of ways posts were rendered (only a moderate exaggeration). And each of those had to be updated individually to support new features or design changes.</p>\n\n<p>It was time to step back, survey the world of web technology, and clean house in a big way. That we could finally test some of the new tech we’ve been itching to use was just a little bonus.</p>\n\n<p>We started by laying out our goals:</p>\n\n<ul><li>A web client codebase fully separated from the PHP codebase that gets its data from <a href=\"https://www.tumblr.com/docs/en/api/v2\" target=\"_blank\">the API</a> in the same way our mobile apps do</li>\n<li>A development environment that’s as painless as possible</li>\n<li>Dramatically improved performance</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Isomorphic_JavaScript\" target=\"_blank\">Isomorphic rendering</a></li>\n<li>Robust testing tools</li>\n<li>Built on a framework with a healthy and active community, with some critical mass of adoption</li>\n</ul><p>With those goals in mind, we spent the beginning of the year on research - figuring out what kinds of things people were building web apps with these days, tooling around with them ourselves, and trying to assess if they would be right for Tumblr. We landed, eventually, on <a href=\"https://reactjs.org\" target=\"_blank\">React</a>, with a Node server (running <a href=\"https://expressjs.com\" target=\"_blank\">Express</a>) to make isomorphism as easy as possible. On top of that, we’re using <a href=\"https://github.com/react-cosmos/react-cosmos\" target=\"_blank\">Cosmos</a> for developing components, <a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\">React Router</a> for routing, and <a href=\"https://www.typescriptlang.org\" target=\"_blank\">TypeScript</a> to make our lives better in general. (My colleague Paul already wrote about what went into our decision to use TypeScript <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" target=\"_blank\">here</a>.)</p>\n\n<p>As if writing an entirely new stack wasn’t enough, we realized along the way that this was our perfect chance to start deploying containerized applications with <a href=\"https://kubernetes.io\" target=\"_blank\">Kubernetes</a>, a first for Tumblr. We had never previously deployed a node application to production here, and didn’t have the infrastructure for it, so it was a perfect green field on which to build another new and exciting thing. There’ll be more to come later on Kubernetes.</p>\n\n<p>So where are we now? Well, we’ve launched one page powered by this new app - <a href=\"https://idiot.tumblr.com/image/161468715911\" target=\"_blank\">image pages, like this</a> - with more to come very soon. </p><figure data-orig-width=\"1282\" data-orig-height=\"1264\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/8681ef3cfe07d9c162d61686d162c1de/tumblr_inline_p6px0kkOnp1qc01bx_540.png\" alt=\"image\" data-orig-width=\"1282\" data-orig-height=\"1264\"/></figure><p>Though it may seem simple, there’s a whole new technological world between you clicking that link and seeing that page. There’s a ton more exciting stuff happening now and still to happen in the future, and we’re looking forward to sharing it here. Wanna get in on the action yourself? Come work with us: <a href=\"https://www.tumblr.com/jobs\" target=\"_blank\">https://www.tumblr.com/jobs</a>.</p>\n\n<p>- Robbie Dawson / <a class=\"tumblelog\" href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\" target=\"_blank\">@idiot</a></p>","reblog":{"comment":"<p>In the ten years that Tumblr’s been around, a lot has changed in web technology. We’ve kept up, of course, but it’s always been a process of addition, layering one new technology on top of another. And what we were working with—a custom framework built on top of <a href=\"http://backbonejs.org\" target=\"_blank\">Backbone</a>, messily entangled with a PHP backend and its associated templates—was becoming unmanageable. Our piecemeal conversions to new technologies meant we had thousands of ways posts were rendered (only a moderate exaggeration). And each of those had to be updated individually to support new features or design changes.</p>\n\n<p>It was time to step back, survey the world of web technology, and clean house in a big way. That we could finally test some of the new tech we’ve been itching to use was just a little bonus.</p>\n\n<p>We started by laying out our goals:</p>\n\n<ul><li>A web client codebase fully separated from the PHP codebase that gets its data from <a href=\"https://www.tumblr.com/docs/en/api/v2\" target=\"_blank\">the API</a> in the same way our mobile apps do</li>\n<li>A development environment that’s as painless as possible</li>\n<li>Dramatically improved performance</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Isomorphic_JavaScript\" target=\"_blank\">Isomorphic rendering</a></li>\n<li>Robust testing tools</li>\n<li>Built on a framework with a healthy and active community, with some critical mass of adoption</li>\n</ul><p>With those goals in mind, we spent the beginning of the year on research - figuring out what kinds of things people were building web apps with these days, tooling around with them ourselves, and trying to assess if they would be right for Tumblr. We landed, eventually, on <a href=\"https://reactjs.org\" target=\"_blank\">React</a>, with a Node server (running <a href=\"https://expressjs.com\" target=\"_blank\">Express</a>) to make isomorphism as easy as possible. On top of that, we’re using <a href=\"https://github.com/react-cosmos/react-cosmos\" target=\"_blank\">Cosmos</a> for developing components, <a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\">React Router</a> for routing, and <a href=\"https://www.typescriptlang.org\" target=\"_blank\">TypeScript</a> to make our lives better in general. (My colleague Paul already wrote about what went into our decision to use TypeScript <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" target=\"_blank\">here</a>.)</p>\n\n<p>As if writing an entirely new stack wasn’t enough, we realized along the way that this was our perfect chance to start deploying containerized applications with <a href=\"https://kubernetes.io\" target=\"_blank\">Kubernetes</a>, a first for Tumblr. We had never previously deployed a node application to production here, and didn’t have the infrastructure for it, so it was a perfect green field on which to build another new and exciting thing. There’ll be more to come later on Kubernetes.</p>\n\n<p>So where are we now? Well, we’ve launched one page powered by this new app - <a href=\"https://idiot.tumblr.com/image/161468715911\" target=\"_blank\">image pages, like this</a> - with more to come very soon. </p><figure data-orig-width=\"1282\" data-orig-height=\"1264\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/8681ef3cfe07d9c162d61686d162c1de/tumblr_inline_p6px0kkOnp1qc01bx_540.png\" alt=\"image\" data-orig-width=\"1282\" data-orig-height=\"1264\"></figure><p>Though it may seem simple, there’s a whole new technological world between you clicking that link and seeing that page. There’s a ton more exciting stuff happening now and still to happen in the future, and we’re looking forward to sharing it here. Wanna get in on the action yourself? Come work with us: <a href=\"https://www.tumblr.com/jobs\" target=\"_blank\">https://www.tumblr.com/jobs</a>.</p>\n\n<p>- Robbie Dawson / <a class=\"tumblelog\" href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\" target=\"_blank\">@idiot</a></p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"172624931022"},"content_raw":"<p>In the ten years that Tumblr’s been around, a lot has changed in web technology. We’ve kept up, of course, but it’s always been a process of addition, layering one new technology on top of another. And what we were working with—a custom framework built on top of <a href=\"http://backbonejs.org\" target=\"_blank\">Backbone</a>, messily entangled with a PHP backend and its associated templates—was becoming unmanageable. Our piecemeal conversions to new technologies meant we had thousands of ways posts were rendered (only a moderate exaggeration). And each of those had to be updated individually to support new features or design changes.</p>\n\n<p>It was time to step back, survey the world of web technology, and clean house in a big way. That we could finally test some of the new tech we’ve been itching to use was just a little bonus.</p>\n\n<p>We started by laying out our goals:</p>\n\n<ul><li>A web client codebase fully separated from the PHP codebase that gets its data from <a href=\"https://www.tumblr.com/docs/en/api/v2\" target=\"_blank\">the API</a> in the same way our mobile apps do</li>\n<li>A development environment that’s as painless as possible</li>\n<li>Dramatically improved performance</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Isomorphic_JavaScript\" target=\"_blank\">Isomorphic rendering</a></li>\n<li>Robust testing tools</li>\n<li>Built on a framework with a healthy and active community, with some critical mass of adoption</li>\n</ul><p>With those goals in mind, we spent the beginning of the year on research - figuring out what kinds of things people were building web apps with these days, tooling around with them ourselves, and trying to assess if they would be right for Tumblr. We landed, eventually, on <a href=\"https://reactjs.org\" target=\"_blank\">React</a>, with a Node server (running <a href=\"https://expressjs.com\" target=\"_blank\">Express</a>) to make isomorphism as easy as possible. On top of that, we’re using <a href=\"https://github.com/react-cosmos/react-cosmos\" target=\"_blank\">Cosmos</a> for developing components, <a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\">React Router</a> for routing, and <a href=\"https://www.typescriptlang.org\" target=\"_blank\">TypeScript</a> to make our lives better in general. (My colleague Paul already wrote about what went into our decision to use TypeScript <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" target=\"_blank\">here</a>.)</p>\n\n<p>As if writing an entirely new stack wasn’t enough, we realized along the way that this was our perfect chance to start deploying containerized applications with <a href=\"https://kubernetes.io\" target=\"_blank\">Kubernetes</a>, a first for Tumblr. We had never previously deployed a node application to production here, and didn’t have the infrastructure for it, so it was a perfect green field on which to build another new and exciting thing. There’ll be more to come later on Kubernetes.</p>\n\n<p>So where are we now? Well, we’ve launched one page powered by this new app - <a href=\"https://idiot.tumblr.com/image/161468715911\" target=\"_blank\">image pages, like this</a> - with more to come very soon. </p><figure data-orig-width=\"1282\" data-orig-height=\"1264\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/8681ef3cfe07d9c162d61686d162c1de/tumblr_inline_p6px0kkOnp1qc01bx_540.png\" alt=\"image\" data-orig-width=\"1282\" data-orig-height=\"1264\"></figure><p>Though it may seem simple, there’s a whole new technological world between you clicking that link and seeing that page. There’s a ton more exciting stuff happening now and still to happen in the future, and we’re looking forward to sharing it here. Wanna get in on the action yourself? Come work with us: <a href=\"https://www.tumblr.com/jobs\" target=\"_blank\">https://www.tumblr.com/jobs</a>.</p>\n\n<p>- Robbie Dawson / <a class=\"tumblelog\" href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\" target=\"_blank\">@idiot</a></p>","content":"<p>In the ten years that Tumblr&rsquo;s been around, a lot has changed in web technology. We&rsquo;ve kept up, of course, but it&rsquo;s always been a process of addition, layering one new technology on top of another. And what we were working with&mdash;a custom framework built on top of <a href=\"http://backbonejs.org\" target=\"_blank\">Backbone</a>, messily entangled with a PHP backend and its associated templates&mdash;was becoming unmanageable. Our piecemeal conversions to new technologies meant we had thousands of ways posts were rendered (only a moderate exaggeration). And each of those had to be updated individually to support new features or design changes.</p>\n\n<p>It was time to step back, survey the world of web technology, and clean house in a big way. That we could finally test some of the new tech we&rsquo;ve been itching to use was just a little bonus.</p>\n\n<p>We started by laying out our goals:</p>\n\n<ul><li>A web client codebase fully separated from the PHP codebase that gets its data from <a href=\"https://www.tumblr.com/docs/en/api/v2\" target=\"_blank\">the API</a> in the same way our mobile apps do</li>\n<li>A development environment that&rsquo;s as painless as possible</li>\n<li>Dramatically improved performance</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Isomorphic_JavaScript\" target=\"_blank\">Isomorphic rendering</a></li>\n<li>Robust testing tools</li>\n<li>Built on a framework with a healthy and active community, with some critical mass of adoption</li>\n</ul><p>With those goals in mind, we spent the beginning of the year on research - figuring out what kinds of things people were building web apps with these days, tooling around with them ourselves, and trying to assess if they would be right for Tumblr. We landed, eventually, on <a href=\"https://reactjs.org\" target=\"_blank\">React</a>, with a Node server (running <a href=\"https://expressjs.com\" target=\"_blank\">Express</a>) to make isomorphism as easy as possible. On top of that, we&rsquo;re using <a href=\"https://github.com/react-cosmos/react-cosmos\" target=\"_blank\">Cosmos</a> for developing components, <a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\">React Router</a> for routing, and <a href=\"https://www.typescriptlang.org\" target=\"_blank\">TypeScript</a> to make our lives better in general. (My colleague Paul already wrote about what went into our decision to use TypeScript <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" target=\"_blank\">here</a>.)</p>\n\n<p>As if writing an entirely new stack wasn&rsquo;t enough, we realized along the way that this was our perfect chance to start deploying containerized applications with <a href=\"https://kubernetes.io\" target=\"_blank\">Kubernetes</a>, a first for Tumblr. We had never previously deployed a node application to production here, and didn&rsquo;t have the infrastructure for it, so it was a perfect green field on which to build another new and exciting thing. There&rsquo;ll be more to come later on Kubernetes.</p>\n\n<p>So where are we now? Well, we&rsquo;ve launched one page powered by this new app - <a href=\"https://idiot.tumblr.com/image/161468715911\" target=\"_blank\">image pages, like this</a> - with more to come very soon.&nbsp;</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/8681ef3cfe07d9c162d61686d162c1de/tumblr_inline_p6px0kkOnp1qc01bx_540.png\" class=\"\"/></figure><p>Though it may seem simple, there&rsquo;s a whole new technological world between you clicking that link and seeing that page. There&rsquo;s a ton more exciting stuff happening now and still to happen in the future, and we&rsquo;re looking forward to sharing it here. Wanna get in on the action yourself? Come work with us: <a href=\"https://www.tumblr.com/jobs\" target=\"_blank\">https://www.tumblr.com/jobs</a>.</p>\n\n<p>- Robbie Dawson / <a href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\" target=\"_blank\">@idiot</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":171557569007,"post_url":"https://javascript.tumblr.com/post/171557569007/responsive-images","slug":"responsive-images","date":"2018-03-05 15:30:16 GMT","timestamp":1520263816,"state":"published","format":"html","reblog_key":"v2mKjc91","tags":[],"short_url":"https://tmblr.co/ZAczzi2VneC7l","summary":"Using srcset and sizes to make responsive HTML5 images","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":74,"title":"Using srcset and sizes to make responsive HTML5 images","body":"<p>If you&rsquo;ve tried to implement responsive\n  <a href=\"https://en.wikipedia.org/wiki/Retina_Display\" target=\"_blank\">retina</a> images on the web, you&rsquo;ve probably come across one of the <a href=\"http://brianflove.com/2014/08/07/retina-display-images/\" target=\"_blank\">many</a> <a href=\"https://www.keycdn.com/blog/responsive-images/\" target=\"_blank\">informative</a> <a href=\"http://woutervanderzee.nl/artikelen/responsive-images-srcset-sizes/\" target=\"_blank\">articles</a> on the subject. Many of the posts I found about it are really great, but they downplay or overlook a point\n  that I think is really important:</p>\n<blockquote>\n  <p class=\"npf_quote\" data-npf='{\"subtype\":\"quote\"}'>\n    <i>If you set up srcset and sizes, your browser will automatically download higher density images on retina devices, if\n      they are available.</i>\n  </p>\n</blockquote>\n<p>Let&rsquo;s investigate how to do that.</p>\n<h2>What is srcset?</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset\" target=\"_blank\">\n    <code>srcset</code>\n  </a> is a list of image URLs with a descriptor. The descriptor can either be the image width (in the form of\n  <code>[width in pixels]w</code>), or the screen pixel density that is best for the image (ex.\n  <code>2x</code>,\n  <code>3x</code>, etc). Here&rsquo;s an example that uses image widths:\n  <code>srcset=\"image_20.jpg 20w, image_40.jpg 40w</code>. Here is an example that uses screen pixel density:\n  <code>srcset=\"image_20.jpg 1x, image_40.jpg 2x</code>.</p>\n<h2>Don&rsquo;t be fooled by pixel density</h2>\n<p>To my surprise, you can&rsquo;t combine image width and pixel density descriptors in the\n  <code>srcset</code> list. In other words, something like this is invalid and your browser will silently fall back to the\n  <code>src</code> url:\n  <code>srcset=\"image_20.jpg 20w 1x, image_40.jpg 40w 2x\"</code>. So, how do you get images that are responsive based on image width\n  <i>and</i> screen density?</p>\n<p>When you use an image width descriptor, the image size is chosen based on the viewport width. What if you need to display\n  your image in a smaller size than the entire width of the viewport?\n  <code>sizes</code> can help.</p>\n<h2>Sizes</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-sizes\" target=\"_blank\">\n    <code>sizes</code>\n  </a> is a list of optional queries and sizes that correspond to the width of the image on screen. For example,\n  <code>sizes=\"(max-width: 540px) 100vw, 540px\"</code> means that the image will be displayed at 100% of the viewport width for screens up to 540px wide, and at 540px for screens\n  541px and wider.</p>\n<h2>Retina images, automatically</h2>\n<p>The ✨🎩 magic 🎩✨ part of all of this is when your browser chooses the image from\n  <code>srcset</code> to fit the size at which it will be displayed, it\n  <b>automatically factors in screen density</b>. So if your screen density is 1x, on a device with a viewport that is larger\n  than 540px wide, you will get the size greater than or equal to 540w. But if your screen density is 2x, on a device with\n  a viewport that is larger than 540px wide, you will get the size greater than or equal to 1080w.</p>\n<p>You can see it in action in\n  <a href=\"https://codepen.io/paulrehkugler/pen/PQxvJR\" target=\"_blank\">this Codepen</a>. To test\n  <code>srcset</code> and\n  <code>sizes</code>, you need to request the page with a new incognito window each time, so that you don&rsquo;t load images from your browser cache.\n  Try it with:</p>\n<ul><li>a wide viewport with 1x pixel density (Apple Thunderbolt Display, most random external monitors) to get the 540w image</li>\n  <li>a wide viewport with 2x pixel density (MacBook Pro display) to get the 1280w image</li>\n  <li>a narrow viewport with 1x pixel density to get the 500w or 250w image (depending on how small your viewport is)</li>\n</ul><h2>How we use this at Tumblr</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"><img src=\"https://78.media.tumblr.com/62a4a9e4b8459fb404f1bb0bc843442f/tumblr_inline_p7fxf8Cxyv1qzfx03_540.png\" alt=\"screenshot of a demo photoset built with srcset and sizes\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"/></figure><p>Once you have a good base of\n  <code>srcset</code> and\n  <code>sizes</code>, it&rsquo;s pretty simple to modify\n  <code>sizes</code> for different layouts. Consider Tumblr photosets: some rows may have 1 image, some rows may have 3 images. We can simply\n  scale down the values in\n  <code>sizes</code> by the number of images per row, and the browser will automatically figure out which image is the correct size. Here is\n  an example\n  <a href=\"https://codepen.io/paulrehkugler/pen/zRMVvZ\" target=\"_blank\">on Codepen</a>.</p>\n<p>An example row in a photoset might look like this:</p>\n<pre><code>\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image1_540.gif\"\n      srcset=\"image1_250.gif 250w, image1_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image2_540.gif\"\n      srcset=\"image2_250.gif 250w, image2_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>With simple markup like this, your browser can figure out which image size will be best to display in the photoset row, based\n  on the viewport width and display pixel density. It just goes to show that if you set up\n  <code>srcset</code> and\n  <code>sizes</code> correctly, the browser will take care of retina images automatically.</p>\n<p>\n  – Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\" target=\"_blank\">@pr</a>)</p>","reblog":{"comment":"<p>If you’ve tried to implement responsive\n  <a href=\"https://en.wikipedia.org/wiki/Retina_Display\" target=\"_blank\">retina</a> images on the web, you’ve probably come across one of the <a href=\"http://brianflove.com/2014/08/07/retina-display-images/\" target=\"_blank\">many</a> <a href=\"https://www.keycdn.com/blog/responsive-images/\" target=\"_blank\">informative</a> <a href=\"http://woutervanderzee.nl/artikelen/responsive-images-srcset-sizes/\" target=\"_blank\">articles</a> on the subject. Many of the posts I found about it are really great, but they downplay or overlook a point\n  that I think is really important:</p>\n<blockquote>\n  <p class=\"npf_quote\" data-npf='{\"subtype\":\"quote\"}'>\n    <i>If you set up srcset and sizes, your browser will automatically download higher density images on retina devices, if\n      they are available.</i>\n  </p>\n</blockquote>\n<p>Let’s investigate how to do that.</p>\n<h2>What is srcset?</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset\" target=\"_blank\">\n    <code>srcset</code>\n  </a> is a list of image URLs with a descriptor. The descriptor can either be the image width (in the form of\n  <code>[width in pixels]w</code>), or the screen pixel density that is best for the image (ex.\n  <code>2x</code>,\n  <code>3x</code>, etc). Here’s an example that uses image widths:\n  <code>srcset=\"image_20.jpg 20w, image_40.jpg 40w</code>. Here is an example that uses screen pixel density:\n  <code>srcset=\"image_20.jpg 1x, image_40.jpg 2x</code>.</p>\n<h2>Don’t be fooled by pixel density</h2>\n<p>To my surprise, you can’t combine image width and pixel density descriptors in the\n  <code>srcset</code> list. In other words, something like this is invalid and your browser will silently fall back to the\n  <code>src</code> url:\n  <code>srcset=\"image_20.jpg 20w 1x, image_40.jpg 40w 2x\"</code>. So, how do you get images that are responsive based on image width\n  <i>and</i> screen density?</p>\n<p>When you use an image width descriptor, the image size is chosen based on the viewport width. What if you need to display\n  your image in a smaller size than the entire width of the viewport?\n  <code>sizes</code> can help.</p>\n<h2>Sizes</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-sizes\" target=\"_blank\">\n    <code>sizes</code>\n  </a> is a list of optional queries and sizes that correspond to the width of the image on screen. For example,\n  <code>sizes=\"(max-width: 540px) 100vw, 540px\"</code> means that the image will be displayed at 100% of the viewport width for screens up to 540px wide, and at 540px for screens\n  541px and wider.</p>\n<h2>Retina images, automatically</h2>\n<p>The ✨🎩 magic 🎩✨ part of all of this is when your browser chooses the image from\n  <code>srcset</code> to fit the size at which it will be displayed, it\n  <b>automatically factors in screen density</b>. So if your screen density is 1x, on a device with a viewport that is larger\n  than 540px wide, you will get the size greater than or equal to 540w. But if your screen density is 2x, on a device with\n  a viewport that is larger than 540px wide, you will get the size greater than or equal to 1080w.</p>\n<p>You can see it in action in\n  <a href=\"https://codepen.io/paulrehkugler/pen/PQxvJR\" target=\"_blank\">this Codepen</a>. To test\n  <code>srcset</code> and\n  <code>sizes</code>, you need to request the page with a new incognito window each time, so that you don’t load images from your browser cache.\n  Try it with:</p>\n<ul><li>a wide viewport with 1x pixel density (Apple Thunderbolt Display, most random external monitors) to get the 540w image</li>\n  <li>a wide viewport with 2x pixel density (MacBook Pro display) to get the 1280w image</li>\n  <li>a narrow viewport with 1x pixel density to get the 500w or 250w image (depending on how small your viewport is)</li>\n</ul><h2>How we use this at Tumblr</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"><img src=\"https://78.media.tumblr.com/62a4a9e4b8459fb404f1bb0bc843442f/tumblr_inline_p7fxf8Cxyv1qzfx03_540.png\" alt=\"screenshot of a demo photoset built with srcset and sizes\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"></figure><p>Once you have a good base of\n  <code>srcset</code> and\n  <code>sizes</code>, it’s pretty simple to modify\n  <code>sizes</code> for different layouts. Consider Tumblr photosets: some rows may have 1 image, some rows may have 3 images. We can simply\n  scale down the values in\n  <code>sizes</code> by the number of images per row, and the browser will automatically figure out which image is the correct size. Here is\n  an example\n  <a href=\"https://codepen.io/paulrehkugler/pen/zRMVvZ\" target=\"_blank\">on Codepen</a>.</p>\n<p>An example row in a photoset might look like this:</p>\n<pre><code>\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image1_540.gif\"\n      srcset=\"image1_250.gif 250w, image1_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image2_540.gif\"\n      srcset=\"image2_250.gif 250w, image2_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>With simple markup like this, your browser can figure out which image size will be best to display in the photoset row, based\n  on the viewport width and display pixel density. It just goes to show that if you set up\n  <code>srcset</code> and\n  <code>sizes</code> correctly, the browser will take care of retina images automatically.</p>\n<p>\n  – Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\" target=\"_blank\">@pr</a>)</p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"171557569007"},"content_raw":"<p>If you’ve tried to implement responsive\n  <a href=\"https://en.wikipedia.org/wiki/Retina_Display\" target=\"_blank\">retina</a> images on the web, you’ve probably come across one of the <a href=\"http://brianflove.com/2014/08/07/retina-display-images/\" target=\"_blank\">many</a> <a href=\"https://www.keycdn.com/blog/responsive-images/\" target=\"_blank\">informative</a> <a href=\"http://woutervanderzee.nl/artikelen/responsive-images-srcset-sizes/\" target=\"_blank\">articles</a> on the subject. Many of the posts I found about it are really great, but they downplay or overlook a point\n  that I think is really important:</p>\n<blockquote>\n  <p class=\"npf_quote\" data-npf='{\"subtype\":\"quote\"}'>\n    <i>If you set up srcset and sizes, your browser will automatically download higher density images on retina devices, if\n      they are available.</i>\n  </p>\n</blockquote>\n<p>Let’s investigate how to do that.</p>\n<h2>What is srcset?</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset\" target=\"_blank\">\n    <code>srcset</code>\n  </a> is a list of image URLs with a descriptor. The descriptor can either be the image width (in the form of\n  <code>[width in pixels]w</code>), or the screen pixel density that is best for the image (ex.\n  <code>2x</code>,\n  <code>3x</code>, etc). Here’s an example that uses image widths:\n  <code>srcset=\"image_20.jpg 20w, image_40.jpg 40w</code>. Here is an example that uses screen pixel density:\n  <code>srcset=\"image_20.jpg 1x, image_40.jpg 2x</code>.</p>\n<h2>Don’t be fooled by pixel density</h2>\n<p>To my surprise, you can’t combine image width and pixel density descriptors in the\n  <code>srcset</code> list. In other words, something like this is invalid and your browser will silently fall back to the\n  <code>src</code> url:\n  <code>srcset=\"image_20.jpg 20w 1x, image_40.jpg 40w 2x\"</code>. So, how do you get images that are responsive based on image width\n  <i>and</i> screen density?</p>\n<p>When you use an image width descriptor, the image size is chosen based on the viewport width. What if you need to display\n  your image in a smaller size than the entire width of the viewport?\n  <code>sizes</code> can help.</p>\n<h2>Sizes</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-sizes\" target=\"_blank\">\n    <code>sizes</code>\n  </a> is a list of optional queries and sizes that correspond to the width of the image on screen. For example,\n  <code>sizes=\"(max-width: 540px) 100vw, 540px\"</code> means that the image will be displayed at 100% of the viewport width for screens up to 540px wide, and at 540px for screens\n  541px and wider.</p>\n<h2>Retina images, automatically</h2>\n<p>The ✨🎩 magic 🎩✨ part of all of this is when your browser chooses the image from\n  <code>srcset</code> to fit the size at which it will be displayed, it\n  <b>automatically factors in screen density</b>. So if your screen density is 1x, on a device with a viewport that is larger\n  than 540px wide, you will get the size greater than or equal to 540w. But if your screen density is 2x, on a device with\n  a viewport that is larger than 540px wide, you will get the size greater than or equal to 1080w.</p>\n<p>You can see it in action in\n  <a href=\"https://codepen.io/paulrehkugler/pen/PQxvJR\" target=\"_blank\">this Codepen</a>. To test\n  <code>srcset</code> and\n  <code>sizes</code>, you need to request the page with a new incognito window each time, so that you don’t load images from your browser cache.\n  Try it with:</p>\n<ul><li>a wide viewport with 1x pixel density (Apple Thunderbolt Display, most random external monitors) to get the 540w image</li>\n  <li>a wide viewport with 2x pixel density (MacBook Pro display) to get the 1280w image</li>\n  <li>a narrow viewport with 1x pixel density to get the 500w or 250w image (depending on how small your viewport is)</li>\n</ul><h2>How we use this at Tumblr</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"><img src=\"https://78.media.tumblr.com/62a4a9e4b8459fb404f1bb0bc843442f/tumblr_inline_p7fxf8Cxyv1qzfx03_540.png\" alt=\"screenshot of a demo photoset built with srcset and sizes\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"></figure><p>Once you have a good base of\n  <code>srcset</code> and\n  <code>sizes</code>, it’s pretty simple to modify\n  <code>sizes</code> for different layouts. Consider Tumblr photosets: some rows may have 1 image, some rows may have 3 images. We can simply\n  scale down the values in\n  <code>sizes</code> by the number of images per row, and the browser will automatically figure out which image is the correct size. Here is\n  an example\n  <a href=\"https://codepen.io/paulrehkugler/pen/zRMVvZ\" target=\"_blank\">on Codepen</a>.</p>\n<p>An example row in a photoset might look like this:</p>\n<pre><code>\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image1_540.gif\"\n      srcset=\"image1_250.gif 250w, image1_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image2_540.gif\"\n      srcset=\"image2_250.gif 250w, image2_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>With simple markup like this, your browser can figure out which image size will be best to display in the photoset row, based\n  on the viewport width and display pixel density. It just goes to show that if you set up\n  <code>srcset</code> and\n  <code>sizes</code> correctly, the browser will take care of retina images automatically.</p>\n<p>\n  – Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\" target=\"_blank\">@pr</a>)</p>","content":"<p>If you&rsquo;ve tried to implement responsive\n  <a href=\"https://en.wikipedia.org/wiki/Retina_Display\" target=\"_blank\">retina</a> images on the web, you&rsquo;ve probably come across one of the <a href=\"http://brianflove.com/2014/08/07/retina-display-images/\" target=\"_blank\">many</a> <a href=\"https://www.keycdn.com/blog/responsive-images/\" target=\"_blank\">informative</a> <a href=\"http://woutervanderzee.nl/artikelen/responsive-images-srcset-sizes/\" target=\"_blank\">articles</a> on the subject. Many of the posts I found about it are really great, but they downplay or overlook a point\n  that I think is really important:</p>\n<blockquote>\n  <p class=\"npf_quote\" data-npf=\"{&quot;subtype&quot;:&quot;quote&quot;}\">\n    <i>If you set up srcset and sizes, your browser will automatically download higher density images on retina devices, if\n      they are available.</i>\n  </p>\n</blockquote>\n<p>Let&rsquo;s investigate how to do that.</p>\n<h2>What is srcset?</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset\" target=\"_blank\">\n    <code>srcset</code>\n  </a> is a list of image URLs with a descriptor. The descriptor can either be the image width (in the form of\n  <code>[width in pixels]w</code>), or the screen pixel density that is best for the image (ex.\n  <code>2x</code>,\n  <code>3x</code>, etc). Here&rsquo;s an example that uses image widths:\n  <code>srcset=\"image_20.jpg 20w, image_40.jpg 40w</code>. Here is an example that uses screen pixel density:\n  <code>srcset=\"image_20.jpg 1x, image_40.jpg 2x</code>.</p>\n<h2>Don&rsquo;t be fooled by pixel density</h2>\n<p>To my surprise, you can&rsquo;t combine image width and pixel density descriptors in the\n  <code>srcset</code> list. In other words, something like this is invalid and your browser will silently fall back to the\n  <code>src</code> url:\n  <code>srcset=\"image_20.jpg 20w 1x, image_40.jpg 40w 2x\"</code>. So, how do you get images that are responsive based on image width\n  <i>and</i> screen density?</p>\n<p>When you use an image width descriptor, the image size is chosen based on the viewport width. What if you need to display\n  your image in a smaller size than the entire width of the viewport?\n  <code>sizes</code> can help.</p>\n<h2>Sizes</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-sizes\" target=\"_blank\">\n    <code>sizes</code>\n  </a> is a list of optional queries and sizes that correspond to the width of the image on screen. For example,\n  <code>sizes=\"(max-width: 540px) 100vw, 540px\"</code> means that the image will be displayed at 100% of the viewport width for screens up to 540px wide, and at 540px for screens\n  541px and wider.</p>\n<h2>Retina images, automatically</h2>\n<p>The &#10024;&#127913; magic &#127913;&#10024; part of all of this is when your browser chooses the image from\n  <code>srcset</code> to fit the size at which it will be displayed, it\n  <b>automatically factors in screen density</b>. So if your screen density is 1x, on a device with a viewport that is larger\n  than 540px wide, you will get the size greater than or equal to 540w. But if your screen density is 2x, on a device with\n  a viewport that is larger than 540px wide, you will get the size greater than or equal to 1080w.</p>\n<p>You can see it in action in\n  <a href=\"https://codepen.io/paulrehkugler/pen/PQxvJR\" target=\"_blank\">this Codepen</a>. To test\n  <code>srcset</code> and\n  <code>sizes</code>, you need to request the page with a new incognito window each time, so that you don&rsquo;t load images from your browser cache.\n  Try it with:</p>\n<ul><li>a wide viewport with 1x pixel density (Apple Thunderbolt Display, most random external monitors) to get the 540w image</li>\n  <li>a wide viewport with 2x pixel density (MacBook Pro display) to get the 1280w image</li>\n  <li>a narrow viewport with 1x pixel density to get the 500w or 250w image (depending on how small your viewport is)</li>\n</ul><h2>How we use this at Tumblr</h2>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/62a4a9e4b8459fb404f1bb0bc843442f/tumblr_inline_p7fxf8Cxyv1qzfx03_540.png\" class=\"\"/></figure><p>Once you have a good base of\n  <code>srcset</code> and\n  <code>sizes</code>, it&rsquo;s pretty simple to modify\n  <code>sizes</code> for different layouts. Consider Tumblr photosets: some rows may have 1 image, some rows may have 3 images. We can simply\n  scale down the values in\n  <code>sizes</code> by the number of images per row, and the browser will automatically figure out which image is the correct size. Here is\n  an example\n  <a href=\"https://codepen.io/paulrehkugler/pen/zRMVvZ\" target=\"_blank\">on Codepen</a>.</p>\n<p>An example row in a photoset might look like this:</p>\n<pre><code>\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image1_540.gif\"\n      srcset=\"image1_250.gif 250w, image1_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image2_540.gif\"\n      srcset=\"image2_250.gif 250w, image2_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>With simple markup like this, your browser can figure out which image size will be best to display in the photoset row, based\n  on the viewport width and display pixel density. It just goes to show that if you set up\n  <code>srcset</code> and\n  <code>sizes</code> correctly, the browser will take care of retina images automatically.</p>\n<p>\n  &ndash; Paul Rehkugler (<a href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\" target=\"_blank\">@pr</a>)</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":165082071937,"post_url":"https://javascript.tumblr.com/post/165082071937/flow-and-typescript","slug":"flow-and-typescript","date":"2017-09-07 15:00:45 GMT","timestamp":1504796445,"state":"published","format":"html","reblog_key":"ezVtuUIs","tags":[],"short_url":"https://tmblr.co/ZAczzi2Plg8E1","summary":"Flow and TypeScript","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":117,"title":"Flow and TypeScript","body":"<p>One of the Core Web team&rsquo;s goals at Tumblr is to reduce the number of runtime issues that we see in our React codebase. To help move some of those issues from runtime to compile time, I evaluated the two leading type systems, <a href=\"https://flow.org/\" target=\"_blank\">Flow</a> and <a href=\"https://www.typescriptlang.org/\" target=\"_blank\">TypeScript</a>, to see if they could give us more type safety. I did a bit of background reading about the differences between Flow and TypeScript to see what the community had to say about them.</p><h2><b>Background Reading</b></h2><p><b><a href=\"https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/\" target=\"_blank\">TypeScript, Flow and the Importance of Toolchains over Tools</a> by Ben Teese</b></p><p>This post claims that Flow and TypeScript are similar enough that you should choose whichever of them is easier to integrate with your other tools. For Angular development, it recommends using TypeScript; for React, Flow.</p><p><b><a href=\"https://blog.mariusschulz.com/2017/01/13/typescript-vs-flow\" target=\"_blank\">TypeScript vs. Flow</a> by Marius Schulz</b></p><p>This post claims that both TypeScript and Flow are equally good.</p><p><b><a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\" target=\"_blank\">Flow vs. Typescript</a> by Jan Varwig</b></p><p>This post outlines the author&rsquo;s experience with using Flow in a React codebase. It advocates switching from Flow to TypeScript because of Flow&rsquo;s unhelpful error messages, bad tooling, and propensity to spread untyped code. It also claims that most of the type annotations are able to be shared between Flow and TypeScript with only minor changes.</p><p><b><a href=\"http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html\" target=\"_blank\">Type Systems for JavaScript</a> by Oliver Zeigermann</b></p><p>This slideshow shows many differences around the philosophies and goals of TypeScript and Flow, and it gives detailed explanations in the differences between the two type systems. It explains IDE support and how to get access to third-party type definitions.</p><p><b>Lack of Consensus</b></p><p>It seems like many people have differing opinions about which type system is better for a React codebase. Because there wasn&rsquo;t a broad consensus across the community, I decided to get some first-hand experience with each of these tools to see which one would be most practical and helpful for use at Tumblr.</p><h2><b>Project Setup</b></h2><p>I worked with a sample application to vet Flow and TypeScript. The application I used was <a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\" target=\"_blank\">Microsoft&rsquo;s TypeScript React Starter</a>. It uses <a href=\"https://github.com/wmonk/create-react-app-typescript_\" target=\"_blank\">a custom fork of create-react-app</a> to get TypeScript set up. When testing out Flow, I used the <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\">standard version of create-react-app</a> and used the source code from this exercise.</p><p>For the most part, Flow and TypeScript are basically interchangeable. I was able to reuse most of the source code between both projects with only minor changes. Here are some examples of changes I needed to make to get my TypeScript code working with Flow:</p><ul><li>Flow requires that types are imported using import type where TypeScript re-uses import.</li>\n<li>Some generic type constraints are different in redux’s type declarations between Flow and TypeScript, so I dropped the generic constraint for Flow.</li>\n<li>Types cannot have the same name as constants, so I had to rename a few small things (see below).</li>\n</ul><h2><b>Testing</b></h2><p>After I got the project prepared I set up the following situations to see which tool performed better. These are my assumptions of the most common situations in which a type checker will help when writing React code on a day-to-day basis.</p><h2>Handling an Unnecessary Case in a Switch</h2><p><b>TypeScript</b>\n</p><figure data-orig-width=\"834\" data-orig-height=\"434\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5011f197d5c52bb539989337e4f64c9d/tumblr_inline_ovx1byaLP01qzfx03_540.png\" alt=\"Unused switch case in TypeScript\" data-orig-width=\"834\" data-orig-height=\"434\"/></figure><p>TypeScript realizes that <code>'not_real'</code> is not a possible case for the switch.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"801\" data-orig-height=\"420\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a2b1a381b5c87d6fca6a42a450d438a8/tumblr_inline_ovx1c7gVy21qzfx03_540.png\" alt=\"Unused switch case in Flow\" data-orig-width=\"801\" data-orig-height=\"420\"/></figure><p>Flow does not detect any issue.</p><h2>Declaring Variables with Same Name as Type</h2><p><b>TypeScript</b>\n</p><figure data-orig-width=\"538\" data-orig-height=\"147\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/02301e3fc8ff70a69e2213eb43e0b632/tumblr_inline_ovx1cjTey61qzfx03_540.png\" alt=\"Overloaded name in TypeScript\" data-orig-width=\"538\" data-orig-height=\"147\"/></figure><p>TypeScript allows types to have the same name as constants, and it allows Command-clicking on the types to see their declarations.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"563\" data-orig-height=\"165\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/678a7949781a05354b7fbf63594f92af/tumblr_inline_ovx1cuQBqo1qzfx03_540.png\" alt=\"Overloaded name workaround in Flow\" data-orig-width=\"563\" data-orig-height=\"165\"/></figure><p>Flow requires types and constants to have different names. In this case, I needed to rename the type to <code>INCREMENT_ENTHUSIASM_T</code> to appease Flow&rsquo;s type checker.</p><h2>Returning Incorrect Type from Function</h2><p><b>TypeScript</b></p><pre><code>[ts]\n    Type '{ enthusiasmLevel: string; languageName: string; }' is not assignable to type 'StoreState'.\n      Types of property 'enthusiasmLevel' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n</code></pre><p><b>Flow 0.52</b></p><pre><code>[flow] object literal (This type is incompatible with the expected return type of object type Property `enthusiasmLevel` is incompatible:)</code></pre><p><b>Flow 0.53</b></p><pre><code>[flow] property `enthusiasmLevel` of StoreState (Property not found in number) [flow] property `languageName` of StoreState (Property not found in number)</code></pre><h2>Missing Required Props When Instantiating a Component</h2><p><b>TypeScript</b></p><figure data-orig-width=\"993\" data-orig-height=\"223\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d3439ea93490295bfd2fdc84d20376ec/tumblr_inline_ovx1d9BGAH1qzfx03_540.png\" alt=\"Missing required property in TypeScript\" data-orig-width=\"993\" data-orig-height=\"223\"/></figure><p>TypeScript shows the error at the site where the properties are missing with the error:</p><pre><code>[ts] Type '{}' is not assignable to type 'IntrinsicAttributes &amp; Props'. Type '{}' is not assignable to type 'Props'. Property 'name' is missing in type '{}'.\n</code></pre><p><b>Flow</b></p><figure data-orig-width=\"684\" data-orig-height=\"213\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a6931fde85c4e63cd529179f9eccb8f3/tumblr_inline_ovx1dnPILf1qzfx03_540.png\" alt=\"Missing required property in Flow\" data-orig-width=\"684\" data-orig-height=\"213\"/></figure><p>Flow shows the error <i>within the component where the property will be used, with no way to discover which call site is missing a property.</i> This can be very confusing in codebases that have lots of reusable components. Flow displays this error:</p><pre><code>[flow] property `name` of Props (Property not found in props of React element `Hello`)\n</code></pre><h2>Code Safety</h2><p><b>TypeScript</b></p><p>TypeScript allows enforcing full type coverage on .ts files with the <code>noImplicitAny</code> flag in the tsconfig.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"506\" data-orig-height=\"572\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/19c65f3c03bf586883f86293dc562d5e/tumblr_inline_ovx1e1ioBc1qzfx03_540.png\" alt=\"Code coverage plugin in Flow\" data-orig-width=\"506\" data-orig-height=\"572\"/></figure><p>Flow provides a code coverage plugin so that you can see which lines are implicitly not typed.<br/></p><h2><b>Other Considerations</b></h2><p>Flow has the most React community support and tooling, so there is much more documentation about how to get Flow and React working together. TypeScript is more popular with Angular developers. Choosing TypeScript may be breaking from community standards, so we may have more issues that don&rsquo;t have a simple answer on Google.</p><h2><b>Conclusion</b></h2><p>I concluded that we should use TypeScript because it seems easier to work with. My experience seems to line up with <a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\" target=\"_blank\">this blog post</a>. It has better error messages to debug type issues and its integration with VSCode makes coding more pleasant and transparent. If this ends up being the wrong choice later on, our codebase will be portable to Flow with some minor changes.</p><p>Shortly after arriving at this conclusion, Flow 0.53 was released and <a href=\"https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627\" target=\"_blank\">a blog post on Medium</a> published touting it&rsquo;s &ldquo;even better support for React&rdquo;. However, after running through the test cases above, I only found one case where Flow had improved its error messaging. TypeScript still seems like the more reliable, easier to use solution.</p><h2><b>Further Reading</b></h2><p>To continue our journey with TypeScript, I will need to integrate it into our codebase and teach it to the rest of our frontend developers. <a href=\"https://javascriptplayground.com/blog/2017/04/react-typescript/\" target=\"_blank\">Getting started with TypeScript and React</a> and <a href=\"http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/\" target=\"_blank\">Setting up a new Typescript 1.9 and React project</a> look like they will be helpful articles when integrating TypeScript into our codebase. <a href=\"https://basarat.gitbooks.io/typescript/content/\" target=\"_blank\">TypeScript Deep Dive</a> looks like a great book for JavaScript developers that aren&rsquo;t familar with TypeScript.</p><p>&ndash; Paul Rehkugler (<a href=\"https://blog.paulrehkugler.com/\" target=\"_blank\">@pr</a>)</p>","reblog":{"comment":"<p>One of the Core Web team’s goals at Tumblr is to reduce the number of runtime issues that we see in our React codebase. To help move some of those issues from runtime to compile time, I evaluated the two leading type systems, <a href=\"https://flow.org/\" target=\"_blank\">Flow</a> and <a href=\"https://www.typescriptlang.org/\" target=\"_blank\">TypeScript</a>, to see if they could give us more type safety. I did a bit of background reading about the differences between Flow and TypeScript to see what the community had to say about them.</p><h2><b>Background Reading</b></h2><p><b><a href=\"https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/\" target=\"_blank\">TypeScript, Flow and the Importance of Toolchains over Tools</a> by Ben Teese</b></p><p>This post claims that Flow and TypeScript are similar enough that you should choose whichever of them is easier to integrate with your other tools. For Angular development, it recommends using TypeScript; for React, Flow.</p><p><b><a href=\"https://blog.mariusschulz.com/2017/01/13/typescript-vs-flow\" target=\"_blank\">TypeScript vs. Flow</a> by Marius Schulz</b></p><p>This post claims that both TypeScript and Flow are equally good.</p><p><b><a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\" target=\"_blank\">Flow vs. Typescript</a> by Jan Varwig</b></p><p>This post outlines the author’s experience with using Flow in a React codebase. It advocates switching from Flow to TypeScript because of Flow’s unhelpful error messages, bad tooling, and propensity to spread untyped code. It also claims that most of the type annotations are able to be shared between Flow and TypeScript with only minor changes.</p><p><b><a href=\"http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html\" target=\"_blank\">Type Systems for JavaScript</a> by Oliver Zeigermann</b></p><p>This slideshow shows many differences around the philosophies and goals of TypeScript and Flow, and it gives detailed explanations in the differences between the two type systems. It explains IDE support and how to get access to third-party type definitions.</p><p><b>Lack of Consensus</b></p><p>It seems like many people have differing opinions about which type system is better for a React codebase. Because there wasn’t a broad consensus across the community, I decided to get some first-hand experience with each of these tools to see which one would be most practical and helpful for use at Tumblr.</p><h2><b>Project Setup</b></h2><p>I worked with a sample application to vet Flow and TypeScript. The application I used was <a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\" target=\"_blank\">Microsoft’s TypeScript React Starter</a>. It uses <a href=\"https://github.com/wmonk/create-react-app-typescript_\" target=\"_blank\">a custom fork of create-react-app</a> to get TypeScript set up. When testing out Flow, I used the <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\">standard version of create-react-app</a> and used the source code from this exercise.</p><p>For the most part, Flow and TypeScript are basically interchangeable. I was able to reuse most of the source code between both projects with only minor changes. Here are some examples of changes I needed to make to get my TypeScript code working with Flow:</p><ul><li>Flow requires that types are imported using import type where TypeScript re-uses import.</li>\n<li>Some generic type constraints are different in redux’s type declarations between Flow and TypeScript, so I dropped the generic constraint for Flow.</li>\n<li>Types cannot have the same name as constants, so I had to rename a few small things (see below).</li>\n</ul><h2><b>Testing</b></h2><p>After I got the project prepared I set up the following situations to see which tool performed better. These are my assumptions of the most common situations in which a type checker will help when writing React code on a day-to-day basis.</p><h2>Handling an Unnecessary Case in a Switch</h2><p><b>TypeScript</b>\n</p><figure data-orig-width=\"834\" data-orig-height=\"434\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5011f197d5c52bb539989337e4f64c9d/tumblr_inline_ovx1byaLP01qzfx03_540.png\" alt=\"Unused switch case in TypeScript\" data-orig-width=\"834\" data-orig-height=\"434\"></figure><p>TypeScript realizes that <code>'not_real'</code> is not a possible case for the switch.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"801\" data-orig-height=\"420\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a2b1a381b5c87d6fca6a42a450d438a8/tumblr_inline_ovx1c7gVy21qzfx03_540.png\" alt=\"Unused switch case in Flow\" data-orig-width=\"801\" data-orig-height=\"420\"></figure><p>Flow does not detect any issue.</p><h2>Declaring Variables with Same Name as Type</h2><p><b>TypeScript</b>\n</p><figure data-orig-width=\"538\" data-orig-height=\"147\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/02301e3fc8ff70a69e2213eb43e0b632/tumblr_inline_ovx1cjTey61qzfx03_540.png\" alt=\"Overloaded name in TypeScript\" data-orig-width=\"538\" data-orig-height=\"147\"></figure><p>TypeScript allows types to have the same name as constants, and it allows Command-clicking on the types to see their declarations.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"563\" data-orig-height=\"165\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/678a7949781a05354b7fbf63594f92af/tumblr_inline_ovx1cuQBqo1qzfx03_540.png\" alt=\"Overloaded name workaround in Flow\" data-orig-width=\"563\" data-orig-height=\"165\"></figure><p>Flow requires types and constants to have different names. In this case, I needed to rename the type to <code>INCREMENT_ENTHUSIASM_T</code> to appease Flow’s type checker.</p><h2>Returning Incorrect Type from Function</h2><p><b>TypeScript</b></p><pre><code>[ts]\n    Type '{ enthusiasmLevel: string; languageName: string; }' is not assignable to type 'StoreState'.\n      Types of property 'enthusiasmLevel' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n</code></pre><p><b>Flow 0.52</b></p><pre><code>[flow] object literal (This type is incompatible with the expected return type of object type Property `enthusiasmLevel` is incompatible:)</code></pre><p><b>Flow 0.53</b></p><pre><code>[flow] property `enthusiasmLevel` of StoreState (Property not found in number) [flow] property `languageName` of StoreState (Property not found in number)</code></pre><h2>Missing Required Props When Instantiating a Component</h2><p><b>TypeScript</b></p><figure data-orig-width=\"993\" data-orig-height=\"223\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d3439ea93490295bfd2fdc84d20376ec/tumblr_inline_ovx1d9BGAH1qzfx03_540.png\" alt=\"Missing required property in TypeScript\" data-orig-width=\"993\" data-orig-height=\"223\"></figure><p>TypeScript shows the error at the site where the properties are missing with the error:</p><pre><code>[ts] Type '{}' is not assignable to type 'IntrinsicAttributes &amp; Props'. Type '{}' is not assignable to type 'Props'. Property 'name' is missing in type '{}'.\n</code></pre><p><b>Flow</b></p><figure data-orig-width=\"684\" data-orig-height=\"213\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a6931fde85c4e63cd529179f9eccb8f3/tumblr_inline_ovx1dnPILf1qzfx03_540.png\" alt=\"Missing required property in Flow\" data-orig-width=\"684\" data-orig-height=\"213\"></figure><p>Flow shows the error <i>within the component where the property will be used, with no way to discover which call site is missing a property.</i> This can be very confusing in codebases that have lots of reusable components. Flow displays this error:</p><pre><code>[flow] property `name` of Props (Property not found in props of React element `Hello`)\n</code></pre><h2>Code Safety</h2><p><b>TypeScript</b></p><p>TypeScript allows enforcing full type coverage on .ts files with the <code>noImplicitAny</code> flag in the tsconfig.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"506\" data-orig-height=\"572\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/19c65f3c03bf586883f86293dc562d5e/tumblr_inline_ovx1e1ioBc1qzfx03_540.png\" alt=\"Code coverage plugin in Flow\" data-orig-width=\"506\" data-orig-height=\"572\"></figure><p>Flow provides a code coverage plugin so that you can see which lines are implicitly not typed.<br></p><h2><b>Other Considerations</b></h2><p>Flow has the most React community support and tooling, so there is much more documentation about how to get Flow and React working together. TypeScript is more popular with Angular developers. Choosing TypeScript may be breaking from community standards, so we may have more issues that don’t have a simple answer on Google.</p><h2><b>Conclusion</b></h2><p>I concluded that we should use TypeScript because it seems easier to work with. My experience seems to line up with <a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\" target=\"_blank\">this blog post</a>. It has better error messages to debug type issues and its integration with VSCode makes coding more pleasant and transparent. If this ends up being the wrong choice later on, our codebase will be portable to Flow with some minor changes.</p><p>Shortly after arriving at this conclusion, Flow 0.53 was released and <a href=\"https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627\" target=\"_blank\">a blog post on Medium</a> published touting it’s “even better support for React”. However, after running through the test cases above, I only found one case where Flow had improved its error messaging. TypeScript still seems like the more reliable, easier to use solution.</p><h2><b>Further Reading</b></h2><p>To continue our journey with TypeScript, I will need to integrate it into our codebase and teach it to the rest of our frontend developers. <a href=\"https://javascriptplayground.com/blog/2017/04/react-typescript/\" target=\"_blank\">Getting started with TypeScript and React</a> and <a href=\"http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/\" target=\"_blank\">Setting up a new Typescript 1.9 and React project</a> look like they will be helpful articles when integrating TypeScript into our codebase. <a href=\"https://basarat.gitbooks.io/typescript/content/\" target=\"_blank\">TypeScript Deep Dive</a> looks like a great book for JavaScript developers that aren’t familar with TypeScript.</p><p>– Paul Rehkugler (<a href=\"https://blog.paulrehkugler.com/\" target=\"_blank\">@pr</a>)</p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"165082071937"},"content_raw":"<p>One of the Core Web team’s goals at Tumblr is to reduce the number of runtime issues that we see in our React codebase. To help move some of those issues from runtime to compile time, I evaluated the two leading type systems, <a href=\"https://flow.org/\" target=\"_blank\">Flow</a> and <a href=\"https://www.typescriptlang.org/\" target=\"_blank\">TypeScript</a>, to see if they could give us more type safety. I did a bit of background reading about the differences between Flow and TypeScript to see what the community had to say about them.</p><h2><b>Background Reading</b></h2><p><b><a href=\"https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/\" target=\"_blank\">TypeScript, Flow and the Importance of Toolchains over Tools</a> by Ben Teese</b></p><p>This post claims that Flow and TypeScript are similar enough that you should choose whichever of them is easier to integrate with your other tools. For Angular development, it recommends using TypeScript; for React, Flow.</p><p><b><a href=\"https://blog.mariusschulz.com/2017/01/13/typescript-vs-flow\" target=\"_blank\">TypeScript vs. Flow</a> by Marius Schulz</b></p><p>This post claims that both TypeScript and Flow are equally good.</p><p><b><a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\" target=\"_blank\">Flow vs. Typescript</a> by Jan Varwig</b></p><p>This post outlines the author’s experience with using Flow in a React codebase. It advocates switching from Flow to TypeScript because of Flow’s unhelpful error messages, bad tooling, and propensity to spread untyped code. It also claims that most of the type annotations are able to be shared between Flow and TypeScript with only minor changes.</p><p><b><a href=\"http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html\" target=\"_blank\">Type Systems for JavaScript</a> by Oliver Zeigermann</b></p><p>This slideshow shows many differences around the philosophies and goals of TypeScript and Flow, and it gives detailed explanations in the differences between the two type systems. It explains IDE support and how to get access to third-party type definitions.</p><p><b>Lack of Consensus</b></p><p>It seems like many people have differing opinions about which type system is better for a React codebase. Because there wasn’t a broad consensus across the community, I decided to get some first-hand experience with each of these tools to see which one would be most practical and helpful for use at Tumblr.</p><h2><b>Project Setup</b></h2><p>I worked with a sample application to vet Flow and TypeScript. The application I used was <a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\" target=\"_blank\">Microsoft’s TypeScript React Starter</a>. It uses <a href=\"https://github.com/wmonk/create-react-app-typescript_\" target=\"_blank\">a custom fork of create-react-app</a> to get TypeScript set up. When testing out Flow, I used the <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\">standard version of create-react-app</a> and used the source code from this exercise.</p><p>For the most part, Flow and TypeScript are basically interchangeable. I was able to reuse most of the source code between both projects with only minor changes. Here are some examples of changes I needed to make to get my TypeScript code working with Flow:</p><ul><li>Flow requires that types are imported using import type where TypeScript re-uses import.</li>\n<li>Some generic type constraints are different in redux’s type declarations between Flow and TypeScript, so I dropped the generic constraint for Flow.</li>\n<li>Types cannot have the same name as constants, so I had to rename a few small things (see below).</li>\n</ul><h2><b>Testing</b></h2><p>After I got the project prepared I set up the following situations to see which tool performed better. These are my assumptions of the most common situations in which a type checker will help when writing React code on a day-to-day basis.</p><h2>Handling an Unnecessary Case in a Switch</h2><p><b>TypeScript</b>\n</p><figure data-orig-width=\"834\" data-orig-height=\"434\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5011f197d5c52bb539989337e4f64c9d/tumblr_inline_ovx1byaLP01qzfx03_540.png\" alt=\"Unused switch case in TypeScript\" data-orig-width=\"834\" data-orig-height=\"434\"></figure><p>TypeScript realizes that <code>'not_real'</code> is not a possible case for the switch.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"801\" data-orig-height=\"420\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a2b1a381b5c87d6fca6a42a450d438a8/tumblr_inline_ovx1c7gVy21qzfx03_540.png\" alt=\"Unused switch case in Flow\" data-orig-width=\"801\" data-orig-height=\"420\"></figure><p>Flow does not detect any issue.</p><h2>Declaring Variables with Same Name as Type</h2><p><b>TypeScript</b>\n</p><figure data-orig-width=\"538\" data-orig-height=\"147\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/02301e3fc8ff70a69e2213eb43e0b632/tumblr_inline_ovx1cjTey61qzfx03_540.png\" alt=\"Overloaded name in TypeScript\" data-orig-width=\"538\" data-orig-height=\"147\"></figure><p>TypeScript allows types to have the same name as constants, and it allows Command-clicking on the types to see their declarations.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"563\" data-orig-height=\"165\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/678a7949781a05354b7fbf63594f92af/tumblr_inline_ovx1cuQBqo1qzfx03_540.png\" alt=\"Overloaded name workaround in Flow\" data-orig-width=\"563\" data-orig-height=\"165\"></figure><p>Flow requires types and constants to have different names. In this case, I needed to rename the type to <code>INCREMENT_ENTHUSIASM_T</code> to appease Flow’s type checker.</p><h2>Returning Incorrect Type from Function</h2><p><b>TypeScript</b></p><pre><code>[ts]\n    Type '{ enthusiasmLevel: string; languageName: string; }' is not assignable to type 'StoreState'.\n      Types of property 'enthusiasmLevel' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n</code></pre><p><b>Flow 0.52</b></p><pre><code>[flow] object literal (This type is incompatible with the expected return type of object type Property `enthusiasmLevel` is incompatible:)</code></pre><p><b>Flow 0.53</b></p><pre><code>[flow] property `enthusiasmLevel` of StoreState (Property not found in number) [flow] property `languageName` of StoreState (Property not found in number)</code></pre><h2>Missing Required Props When Instantiating a Component</h2><p><b>TypeScript</b></p><figure data-orig-width=\"993\" data-orig-height=\"223\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d3439ea93490295bfd2fdc84d20376ec/tumblr_inline_ovx1d9BGAH1qzfx03_540.png\" alt=\"Missing required property in TypeScript\" data-orig-width=\"993\" data-orig-height=\"223\"></figure><p>TypeScript shows the error at the site where the properties are missing with the error:</p><pre><code>[ts] Type '{}' is not assignable to type 'IntrinsicAttributes &amp; Props'. Type '{}' is not assignable to type 'Props'. Property 'name' is missing in type '{}'.\n</code></pre><p><b>Flow</b></p><figure data-orig-width=\"684\" data-orig-height=\"213\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a6931fde85c4e63cd529179f9eccb8f3/tumblr_inline_ovx1dnPILf1qzfx03_540.png\" alt=\"Missing required property in Flow\" data-orig-width=\"684\" data-orig-height=\"213\"></figure><p>Flow shows the error <i>within the component where the property will be used, with no way to discover which call site is missing a property.</i> This can be very confusing in codebases that have lots of reusable components. Flow displays this error:</p><pre><code>[flow] property `name` of Props (Property not found in props of React element `Hello`)\n</code></pre><h2>Code Safety</h2><p><b>TypeScript</b></p><p>TypeScript allows enforcing full type coverage on .ts files with the <code>noImplicitAny</code> flag in the tsconfig.</p><p><b>Flow</b>\n</p><figure data-orig-width=\"506\" data-orig-height=\"572\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/19c65f3c03bf586883f86293dc562d5e/tumblr_inline_ovx1e1ioBc1qzfx03_540.png\" alt=\"Code coverage plugin in Flow\" data-orig-width=\"506\" data-orig-height=\"572\"></figure><p>Flow provides a code coverage plugin so that you can see which lines are implicitly not typed.<br></p><h2><b>Other Considerations</b></h2><p>Flow has the most React community support and tooling, so there is much more documentation about how to get Flow and React working together. TypeScript is more popular with Angular developers. Choosing TypeScript may be breaking from community standards, so we may have more issues that don’t have a simple answer on Google.</p><h2><b>Conclusion</b></h2><p>I concluded that we should use TypeScript because it seems easier to work with. My experience seems to line up with <a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\" target=\"_blank\">this blog post</a>. It has better error messages to debug type issues and its integration with VSCode makes coding more pleasant and transparent. If this ends up being the wrong choice later on, our codebase will be portable to Flow with some minor changes.</p><p>Shortly after arriving at this conclusion, Flow 0.53 was released and <a href=\"https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627\" target=\"_blank\">a blog post on Medium</a> published touting it’s “even better support for React”. However, after running through the test cases above, I only found one case where Flow had improved its error messaging. TypeScript still seems like the more reliable, easier to use solution.</p><h2><b>Further Reading</b></h2><p>To continue our journey with TypeScript, I will need to integrate it into our codebase and teach it to the rest of our frontend developers. <a href=\"https://javascriptplayground.com/blog/2017/04/react-typescript/\" target=\"_blank\">Getting started with TypeScript and React</a> and <a href=\"http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/\" target=\"_blank\">Setting up a new Typescript 1.9 and React project</a> look like they will be helpful articles when integrating TypeScript into our codebase. <a href=\"https://basarat.gitbooks.io/typescript/content/\" target=\"_blank\">TypeScript Deep Dive</a> looks like a great book for JavaScript developers that aren’t familar with TypeScript.</p><p>– Paul Rehkugler (<a href=\"https://blog.paulrehkugler.com/\" target=\"_blank\">@pr</a>)</p>","content":"<p>One of the Core Web team&rsquo;s goals at Tumblr is to reduce the number of runtime issues that we see in our React codebase. To help move some of those issues from runtime to compile time, I evaluated the two leading type systems, <a href=\"https://flow.org/\" target=\"_blank\">Flow</a> and <a href=\"https://www.typescriptlang.org/\" target=\"_blank\">TypeScript</a>, to see if they could give us more type safety. I did a bit of background reading about the differences between Flow and TypeScript to see what the community had to say about them.</p><h2><b>Background Reading</b></h2><p><b><a href=\"https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/\" target=\"_blank\">TypeScript, Flow and the Importance of Toolchains over Tools</a> by Ben Teese</b></p><p>This post claims that Flow and TypeScript are similar enough that you should choose whichever of them is easier to integrate with your other tools. For Angular development, it recommends using TypeScript; for React, Flow.</p><p><b><a href=\"https://blog.mariusschulz.com/2017/01/13/typescript-vs-flow\" target=\"_blank\">TypeScript vs. Flow</a> by Marius Schulz</b></p><p>This post claims that both TypeScript and Flow are equally good.</p><p><b><a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\" target=\"_blank\">Flow vs. Typescript</a>&nbsp;by Jan Varwig</b></p><p>This post outlines the author&rsquo;s experience with using Flow in a React codebase. It advocates switching from Flow to TypeScript because of Flow&rsquo;s unhelpful error messages, bad tooling, and propensity to spread untyped code. It also claims that most of the type annotations are able to be shared between Flow and TypeScript with only minor changes.</p><p><b><a href=\"http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html\" target=\"_blank\">Type Systems for JavaScript</a> by Oliver Zeigermann</b></p><p>This slideshow shows many differences around the philosophies and goals of TypeScript and Flow, and it gives detailed explanations in the differences between the two type systems. It explains IDE support and how to get access to third-party type definitions.</p><p><b>Lack of Consensus</b></p><p>It seems like many people have differing opinions about which type system is better for a React codebase. Because there wasn&rsquo;t a broad consensus across the community, I decided to get some first-hand experience with each of these tools to see which one would be most practical and helpful for use at Tumblr.</p><h2><b>Project Setup</b></h2><p>I worked with a sample application to vet Flow and TypeScript. The application I used was <a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\" target=\"_blank\">Microsoft&rsquo;s TypeScript React Starter</a>. It uses <a href=\"https://github.com/wmonk/create-react-app-typescript_\" target=\"_blank\">a custom fork of create-react-app</a> to get TypeScript set up. When testing out Flow, I used the <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\">standard version of create-react-app</a> and used the source code from this exercise.</p><p>For the most part, Flow and TypeScript are basically interchangeable. I was able to reuse most of the source code between both projects with only minor changes. Here are some examples of changes I needed to make to get my TypeScript code working with Flow:</p><ul><li>Flow requires that types are imported using import type where TypeScript re-uses import.</li>\n<li>Some generic type constraints are different in redux&rsquo;s type declarations between Flow and TypeScript, so I dropped the generic constraint for Flow.</li>\n<li>Types cannot have the same name as constants, so I had to rename a few small things (see below).</li>\n</ul><h2><b>Testing</b></h2><p>After I got the project prepared I set up the following situations to see which tool performed better. These are my assumptions of the most common situations in which a type checker will help when writing React code on a day-to-day basis.</p><h2>Handling an Unnecessary Case in a Switch</h2><p><b>TypeScript</b>\n</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5011f197d5c52bb539989337e4f64c9d/tumblr_inline_ovx1byaLP01qzfx03_540.png\" class=\"\"/></figure><p>TypeScript realizes that <code>'not_real'</code> is not a possible case for the switch.</p><p><b>Flow</b>\n</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a2b1a381b5c87d6fca6a42a450d438a8/tumblr_inline_ovx1c7gVy21qzfx03_540.png\" class=\"\"/></figure><p>Flow does not detect any issue.</p><h2>Declaring Variables with Same Name as Type</h2><p><b>TypeScript</b>\n</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/02301e3fc8ff70a69e2213eb43e0b632/tumblr_inline_ovx1cjTey61qzfx03_540.png\" class=\"\"/></figure><p>TypeScript allows types to have the same name as constants, and it allows Command-clicking on the types to see their declarations.</p><p><b>Flow</b>\n</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/678a7949781a05354b7fbf63594f92af/tumblr_inline_ovx1cuQBqo1qzfx03_540.png\" class=\"\"/></figure><p>Flow requires types and constants to have different names. In this case, I needed to rename the type to <code>INCREMENT_ENTHUSIASM_T</code> to appease Flow&rsquo;s type checker.</p><h2>Returning Incorrect Type from Function</h2><p><b>TypeScript</b></p><pre><code>[ts]\n    Type '{ enthusiasmLevel: string; languageName: string; }' is not assignable to type 'StoreState'.\n      Types of property 'enthusiasmLevel' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n</code></pre><p><b>Flow 0.52</b></p><pre><code>[flow] object literal (This type is incompatible with the expected return type of object type Property `enthusiasmLevel` is incompatible:)</code></pre><p><b>Flow 0.53</b></p><pre><code>[flow] property `enthusiasmLevel` of StoreState (Property not found in number) [flow] property `languageName` of StoreState (Property not found in number)</code></pre><h2>Missing Required Props When Instantiating a Component</h2><p><b>TypeScript</b></p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d3439ea93490295bfd2fdc84d20376ec/tumblr_inline_ovx1d9BGAH1qzfx03_540.png\" class=\"\"/></figure><p>TypeScript shows the error at the site where the properties are missing with the error:</p><pre><code>[ts] Type '{}' is not assignable to type 'IntrinsicAttributes &amp; Props'. Type '{}' is not assignable to type 'Props'. Property 'name' is missing in type '{}'.\n</code></pre><p><b>Flow</b></p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a6931fde85c4e63cd529179f9eccb8f3/tumblr_inline_ovx1dnPILf1qzfx03_540.png\" class=\"\"/></figure><p>Flow shows the error <i>within the component where the property will be used, with no way to discover which call site is missing a property.</i> This can be very confusing in codebases that have lots of reusable components. Flow displays this error:</p><pre><code>[flow] property `name` of Props (Property not found in props of React element `Hello`)\n</code></pre><h2>Code Safety</h2><p><b>TypeScript</b></p><p>TypeScript allows enforcing full type coverage on .ts files with the <code>noImplicitAny</code> flag in the tsconfig.</p><p><b>Flow</b>\n</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/19c65f3c03bf586883f86293dc562d5e/tumblr_inline_ovx1e1ioBc1qzfx03_540.png\" class=\"\"/></figure><p>Flow provides a code coverage plugin so that you can see which lines are implicitly not typed.<br /></p><h2><b>Other Considerations</b></h2><p>Flow has the most React community support and tooling, so there is much more documentation about how to get Flow and React working together. TypeScript is more popular with Angular developers. Choosing TypeScript may be breaking from community standards, so we may have more issues that don&rsquo;t have a simple answer on Google.</p><h2><b>Conclusion</b></h2><p>I concluded that we should use TypeScript because it seems easier to work with. My experience seems to line up with <a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\" target=\"_blank\">this blog post</a>. It has better error messages to debug type issues and its integration with VSCode makes coding more pleasant and transparent. If this ends up being the wrong choice later on, our codebase will be portable to Flow with some minor changes.</p><p>Shortly after arriving at this conclusion, Flow 0.53 was released and <a href=\"https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627\" target=\"_blank\">a blog post on Medium</a> published touting it&rsquo;s &ldquo;even better support for React&rdquo;. However, after running through the test cases above, I only found one case where Flow had improved its error messaging. TypeScript still seems like the more reliable, easier to use solution.</p><h2><b>Further Reading</b></h2><p>To continue our journey with TypeScript, I will need to integrate it into our codebase and teach it to the rest of our frontend developers. <a href=\"https://javascriptplayground.com/blog/2017/04/react-typescript/\" target=\"_blank\">Getting started with TypeScript and React</a> and <a href=\"http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/\" target=\"_blank\">Setting up a new Typescript 1.9 and React project</a> look like they will be helpful articles when integrating TypeScript into our codebase. <a href=\"https://basarat.gitbooks.io/typescript/content/\" target=\"_blank\">TypeScript Deep Dive</a> looks like a great book for JavaScript developers that aren&rsquo;t familar with TypeScript.</p><p>&ndash; Paul Rehkugler (<a href=\"https://blog.paulrehkugler.com/\" target=\"_blank\">@pr</a>)</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":159270203592,"post_url":"https://javascript.tumblr.com/post/159270203592/tumblr-themes-react-and-redux-part-1-setup","slug":"tumblr-themes-react-and-redux-part-1-setup","date":"2017-04-06 17:22:16 GMT","timestamp":1491499336,"state":"published","format":"html","reblog_key":"0ZK8yuf9","tags":[],"short_url":"https://tmblr.co/ZAczzi2KLFd38","summary":"Tumblr Themes & React and Redux: Part 1 - Setup and the Initial State","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":375,"title":"Tumblr Themes & React and Redux: Part 1 - Setup and the Initial State","body":"<p><a href=\"https://engineering.tumblr.com/post/159266372136/tumblr-themes-react-and-redux-part-1-setup\" class=\"tumblr_blog\" target=\"_blank\">engineering</a>:</p><blockquote>\n<figure class=\"tmblr-full\" data-orig-height=\"995\" data-orig-width=\"1982\"><img src=\"https://78.media.tumblr.com/2ef65b5b54bce140e7a90f04388ca7d1/tumblr_inline_onw21j562I1qzyw0r_540.png\" data-orig-height=\"995\" data-orig-width=\"1982\"/></figure><p>As a platform that prides itself on being a home for artists and creatives alike, it only makes sense that we allow our users to fully customize their Tumblrs to fully express themselves. Here at Tumblr, the world is your oyster not only in terms of looks but also in how you create your theme. I wanted to demonstrate how you too can develop a theme using <a href=\"http://redux.js.org/\" target=\"_blank\">Redux</a> and <a href=\"https://facebook.github.io/react/\" target=\"_blank\">React</a>. Since there are plenty of docs and tutorials on how to use those libraries themselves, I will briefly describe how I got the libraries to work with the Tumblr theme engine, and share some handy tips that made developing more efficient and more enjoyable.</p>\n<p>If you follow the ever changing landscape of JavaScript, then you’ve at least heard of these two libraries. Prior to building the <a href=\"https://mentalhealthquilt.tumblr.com/\" target=\"_blank\">Post-It-Forward</a> theme, I only knew of them by name but never got the chance to actually use them. Developers couldn’t get enough of how React made it easy to create and reuse components. Many also praise how elegantly React manages and renders views, especially when paired with Redux for state management. All of this sounded great. I wanted to turn this project into a learning experience. I thought, “why not?” and gave it a shot.</p>\n<h2>An Extremely Brief Introduction to Tumblr Themes</h2>\n<p>The way themes work on Tumblr is that we have a theme engine that provides special types of operators. These operators insert dynamic data, such as your Tumblr’s title or description, or are blocks that serve as conditionals for rendering a block of HTML, like the “Next Page” link.</p>\n<p>My HTML started off a little something like this:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{Title}&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>As you can see, <code>{Title}</code> is a variable that will return the title of the Tumblr. The point of entry for this theme is the <code>&lt;div&gt;</code> element with the <code>#post-it-forward-root</code>  ID. In your <code>index.js</code>  file you’ll reference this DOM element in your <code>ReactDom.render()</code> method. If you want to learn more about the theme engine, head over to our <a href=\"https://www.tumblr.com/docs/custom_themes\" target=\"_blank\">Theme Docs</a></p>\n<h2>Creating the Initial State</h2>\n<p>To get things started, we need to create an initial state. How do we introduce this initial state if we have to rely on the theme engine to give us all our data? How do we get the data from HTML land to JS land? Well, here’s one way of doing it:</p>\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    (function(root) {\n        var ensureString = function(str) {\n            return !str ? '' : str;\n        };\n\n        var basicVariables = {\n            title: ensureString({JSTitle}),\n            name: ensureString({JSName}),\n                        description: ensureString({JSDescription}),\n                        metaDescription: ensureString({JSMetaDescription}),\n                        blogUrl: ensureString({JSBlogURL}),\n                        rss: ensureString({JSRSS}),\n            favicon: ensureString({JSFavicon}),\n            customCss: ensureString({JSCustomCSS}),\n            isPermalinkPage: !!ensureString(/*{block:PermalinkPage}*/true/*{/block:PermalinkPage}*/),\n            isIndexPage: !!ensureString(/*{block:IndexPage}*/true/*{/block:IndexPage}*/),\n            /*{block:PostTitle}*/\n            postTitle: ensureString({JSPostTitle}),\n            /*{/block:PostTitle}*/\n            /*{block:PostSummary}*/\n            postSummary: ensureString({JSPostSummary}),\n            /*{/block:PostSummary}*/\n            portraitUrl16: ensureString({JSPortraitURL-16}),\n            portraitUrl24: ensureString({JSPortraitURL-24}),\n            portraitUrl30: ensureString({JSPortraitURL-30}),\n            portraitUrl40: ensureString({JSPortraitURL-40}),\n            portraitUrl48: ensureString({JSPortraitURL-48}),\n            portraitUrl64: ensureString({JSPortraitURL-64}),\n            portraitUrl96: ensureString({JSPortraitURL-96}),\n            portraitUrl128: ensureString({JSPortraitURL-128}),\n            copyrightYears: ensureString({JSCopyrightYears}),\n            isSearchPage: !!ensureString(/*{block:SearchPage}*/true/*{/block:SearchPage}*/),\n            searchQuery: ensureString({JSSearchQuery}),\n            safeSearchQuery: ensureString({JSURLSafeSearchQuery}),\n            searchPlaceHolder: ensureString('{lang:Search Blog}'),\n            noSearchResults: !!ensureString(/*{block:NoSearchResults}*/true/*{/block:NoSearchResults}*/),\n        };\n\n        root.tumblrData = {\n            basicVariables: basicVariables,\n            };\n    })(this);\n&lt;/script&gt;\n</code></pre>\n<p>This creates a <code>tumblrData</code> attribute on the browser’s <code>window</code> object.</p>\n<p>Sometimes the theme engine returns nothing for a particular variable if it’s not available. For example, if I made a post that does not have a title,  the final <code>root.tumblrData</code>  object will not have <code>postTitle</code> as a key. Sometimes the key will be available but the theme engine returned an empty value for it. For those cases, I created a helper method called <code>ensureString()</code> that turns those empty values into empty strings.  Sometimes you might need a boolean value. In those cases, I’ll enter the conditional variables from the theme engine into the helper method to get the boolean value from it.</p>\n<p>Once you’ve set up your initial state make sure that you place this script tag before the script tag that references the rest of your code that should be compiled and minified and uploaded through the asset uploader that the Tumblr text editor provides.  This ensures that the <code>tumblrData</code> is accessible through the <code>window</code> object by the time the React app gets initiated.</p>\n<p><code>tumblrData</code> should look something like this:</p>\n<pre><code>const tumblrData = {\n    basicVariables: {\n        blogUrl: \"https://mentalhealthquilt.tumblr.com/\",\n        copyrightYears: \"2016–2017\",\n        customCss: \"\",\n                description: \"Mental Health Quilt\",\n        favicon: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        isIndexPage: true,\n        isPermalinkPage: false,\n        isSearchPage: false,\n        metaDescription: \"Mental Health Quilt\",\n        name: \"mentalhealthquilt\",\n        noSearchResults: false,\n        portraitUrl16: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_16.png\",\n        portraitUrl24: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_24.png\",\n        portraitUrl30: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_30.png\",\n        portraitUrl40: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_40.png\",\n        portraitUrl48: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_48.png\",\n        portraitUrl64: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_64.png\",\n        portraitUrl96: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_96.png\",\n        portraitUrl128: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        rss: \"https://mentalhealthquilt.tumblr.com/rss\",\n        safeSearchQuery: \"\",\n        searchPlaceHolder: \"Search mentalhealthquilt\",\n        searchQuery: \"\",\n        title: \"Mental Health Quilt\",\n    },\n}\n</code></pre>\n<p>Now we have the data that the theme engine gave us in a format that React and Redux can work with.</p>\n<p>If you are new to these libraries, I highly recommend following the simple <a href=\"http://redux.js.org/docs/basics/index.html\" target=\"_blank\">Todo App Tutorial</a>  that is on the Redux website. They do a wonderful job of explaining the process as you build the app.</p>\n<h2>Helpful Tips</h2>\n<p>Setting up a local server will make developing way faster than the current setup. If you’re using both the “webpack”  and “webpack-dev-server” packages, in your <code>package.json</code> file under <code>scripts</code> you can place something like this in it:</p>\n<p><i>In your package.json file</i></p>\n<pre><code>...\n\"scripts\": {\n    \"local-server\": \"NODE_ENV=development webpack-dev-server --config path/to/webpack.config.js --port=3000 --inline --hot\"\n},\n...\n</code></pre>\n<p>To run that script, in the terminal you will type this command:</p>\n<pre><code>&gt; npm run local-server\n</code></pre>\n<p>In the Tumblr editor, be sure to replace your script tags referencing these external files like so:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{Title}&lt;/title&gt;\n                &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:3000/path/to/prod/index.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                        // where the tumblrData gets created\n                &lt;/script&gt;\n                &lt;script src=\"http://localhost:3000/path/to/prod/index.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Once you run that script, it’ll enable live reload so that every time you save a .js_.css_.scss/etc. file, it’ll rebuild the assets and refresh your Tumblr blog for you. This is way faster than having to re-upload your assets every time you make a change, no matter how small. Just remember to return your script and style references to the uploaded assets when you’re done working. Localhost is only for development.</p>\n<p>You could also add the Redux logger middleware to your project during development so that you can view how the state changes as you fire off different actions. For more information on how to set this up, the <a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\">Redux Logger Github</a> is a great resource.</p>\n<h2>Summary</h2>\n<p>Building a Tumblr theme using Redux and React is possible! Not only is there a workflow that makes development much faster, but it’s also a great way to flex your web development muscles. You can add more to the user experience of your Tumblr now that you have the world of JavaScript at your fingertips. Go forth and make some awesome themes!</p>\n<p>Stay tuned for part 2 that will cover paginating.</p>\n<p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mxssASjQiaTgBDxA9aSSHDA\" target=\"_blank\">@0xmichelle</a></p>\n</blockquote>","reblog":{"comment":"","tree_html":"<p><a href=\"https://engineering.tumblr.com/post/159266372136/tumblr-themes-react-and-redux-part-1-setup\" class=\"tumblr_blog\" target=\"_blank\">engineering</a>:</p>\n<blockquote>\n<figure class=\"tmblr-full\" data-orig-height=\"995\" data-orig-width=\"1982\"><img src=\"https://78.media.tumblr.com/2ef65b5b54bce140e7a90f04388ca7d1/tumblr_inline_onw21j562I1qzyw0r_540.png\" data-orig-height=\"995\" data-orig-width=\"1982\"></figure><p>As a platform that prides itself on being a home for artists and creatives alike, it only makes sense that we allow our users to fully customize their Tumblrs to fully express themselves. Here at Tumblr, the world is your oyster not only in terms of looks but also in how you create your theme. I wanted to demonstrate how you too can develop a theme using <a href=\"http://redux.js.org/\" target=\"_blank\">Redux</a> and <a href=\"https://facebook.github.io/react/\" target=\"_blank\">React</a>. Since there are plenty of docs and tutorials on how to use those libraries themselves, I will briefly describe how I got the libraries to work with the Tumblr theme engine, and share some handy tips that made developing more efficient and more enjoyable.</p>\n<p>If you follow the ever changing landscape of JavaScript, then you’ve at least heard of these two libraries. Prior to building the <a href=\"https://mentalhealthquilt.tumblr.com/\" target=\"_blank\">Post-It-Forward</a> theme, I only knew of them by name but never got the chance to actually use them. Developers couldn’t get enough of how React made it easy to create and reuse components. Many also praise how elegantly React manages and renders views, especially when paired with Redux for state management. All of this sounded great. I wanted to turn this project into a learning experience. I thought, “why not?” and gave it a shot.</p>\n<h2>An Extremely Brief Introduction to Tumblr Themes</h2>\n<p>The way themes work on Tumblr is that we have a theme engine that provides special types of operators. These operators insert dynamic data, such as your Tumblr’s title or description, or are blocks that serve as conditionals for rendering a block of HTML, like the “Next Page” link.</p>\n<p>My HTML started off a little something like this:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{Title}&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>As you can see, <code>{Title}</code> is a variable that will return the title of the Tumblr. The point of entry for this theme is the <code>&lt;div&gt;</code> element with the <code>#post-it-forward-root</code>  ID. In your <code>index.js</code>  file you’ll reference this DOM element in your <code>ReactDom.render()</code> method. If you want to learn more about the theme engine, head over to our <a href=\"https://www.tumblr.com/docs/custom_themes\" target=\"_blank\">Theme Docs</a></p>\n<h2>Creating the Initial State</h2>\n<p>To get things started, we need to create an initial state. How do we introduce this initial state if we have to rely on the theme engine to give us all our data? How do we get the data from HTML land to JS land? Well, here’s one way of doing it:</p>\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    (function(root) {\n        var ensureString = function(str) {\n            return !str ? '' : str;\n        };\n\n        var basicVariables = {\n            title: ensureString({JSTitle}),\n            name: ensureString({JSName}),\n                        description: ensureString({JSDescription}),\n                        metaDescription: ensureString({JSMetaDescription}),\n                        blogUrl: ensureString({JSBlogURL}),\n                        rss: ensureString({JSRSS}),\n            favicon: ensureString({JSFavicon}),\n            customCss: ensureString({JSCustomCSS}),\n            isPermalinkPage: !!ensureString(/*{block:PermalinkPage}*/true/*{/block:PermalinkPage}*/),\n            isIndexPage: !!ensureString(/*{block:IndexPage}*/true/*{/block:IndexPage}*/),\n            /*{block:PostTitle}*/\n            postTitle: ensureString({JSPostTitle}),\n            /*{/block:PostTitle}*/\n            /*{block:PostSummary}*/\n            postSummary: ensureString({JSPostSummary}),\n            /*{/block:PostSummary}*/\n            portraitUrl16: ensureString({JSPortraitURL-16}),\n            portraitUrl24: ensureString({JSPortraitURL-24}),\n            portraitUrl30: ensureString({JSPortraitURL-30}),\n            portraitUrl40: ensureString({JSPortraitURL-40}),\n            portraitUrl48: ensureString({JSPortraitURL-48}),\n            portraitUrl64: ensureString({JSPortraitURL-64}),\n            portraitUrl96: ensureString({JSPortraitURL-96}),\n            portraitUrl128: ensureString({JSPortraitURL-128}),\n            copyrightYears: ensureString({JSCopyrightYears}),\n            isSearchPage: !!ensureString(/*{block:SearchPage}*/true/*{/block:SearchPage}*/),\n            searchQuery: ensureString({JSSearchQuery}),\n            safeSearchQuery: ensureString({JSURLSafeSearchQuery}),\n            searchPlaceHolder: ensureString('{lang:Search Blog}'),\n            noSearchResults: !!ensureString(/*{block:NoSearchResults}*/true/*{/block:NoSearchResults}*/),\n        };\n\n        root.tumblrData = {\n            basicVariables: basicVariables,\n            };\n    })(this);\n&lt;/script&gt;\n</code></pre>\n<p>This creates a <code>tumblrData</code> attribute on the browser’s <code>window</code> object.</p>\n<p>Sometimes the theme engine returns nothing for a particular variable if it’s not available. For example, if I made a post that does not have a title,  the final <code>root.tumblrData</code>  object will not have <code>postTitle</code> as a key. Sometimes the key will be available but the theme engine returned an empty value for it. For those cases, I created a helper method called <code>ensureString()</code> that turns those empty values into empty strings.  Sometimes you might need a boolean value. In those cases, I’ll enter the conditional variables from the theme engine into the helper method to get the boolean value from it.</p>\n<p>Once you’ve set up your initial state make sure that you place this script tag before the script tag that references the rest of your code that should be compiled and minified and uploaded through the asset uploader that the Tumblr text editor provides.  This ensures that the <code>tumblrData</code> is accessible through the <code>window</code> object by the time the React app gets initiated.</p>\n<p><code>tumblrData</code> should look something like this:</p>\n<pre><code>const tumblrData = {\n    basicVariables: {\n        blogUrl: \"https://mentalhealthquilt.tumblr.com/\",\n        copyrightYears: \"2016–2017\",\n        customCss: \"\",\n                description: \"Mental Health Quilt\",\n        favicon: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        isIndexPage: true,\n        isPermalinkPage: false,\n        isSearchPage: false,\n        metaDescription: \"Mental Health Quilt\",\n        name: \"mentalhealthquilt\",\n        noSearchResults: false,\n        portraitUrl16: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_16.png\",\n        portraitUrl24: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_24.png\",\n        portraitUrl30: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_30.png\",\n        portraitUrl40: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_40.png\",\n        portraitUrl48: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_48.png\",\n        portraitUrl64: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_64.png\",\n        portraitUrl96: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_96.png\",\n        portraitUrl128: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        rss: \"https://mentalhealthquilt.tumblr.com/rss\",\n        safeSearchQuery: \"\",\n        searchPlaceHolder: \"Search mentalhealthquilt\",\n        searchQuery: \"\",\n        title: \"Mental Health Quilt\",\n    },\n}\n</code></pre>\n<p>Now we have the data that the theme engine gave us in a format that React and Redux can work with.</p>\n<p>If you are new to these libraries, I highly recommend following the simple <a href=\"http://redux.js.org/docs/basics/index.html\" target=\"_blank\">Todo App Tutorial</a>  that is on the Redux website. They do a wonderful job of explaining the process as you build the app.</p>\n<h2>Helpful Tips</h2>\n<p>Setting up a local server will make developing way faster than the current setup. If you’re using both the “webpack”  and “webpack-dev-server” packages, in your <code>package.json</code> file under <code>scripts</code> you can place something like this in it:</p>\n<p><i>In your package.json file</i></p>\n<pre><code>...\n\"scripts\": {\n    \"local-server\": \"NODE_ENV=development webpack-dev-server --config path/to/webpack.config.js --port=3000 --inline --hot\"\n},\n...\n</code></pre>\n<p>To run that script, in the terminal you will type this command:</p>\n<pre><code>&gt; npm run local-server\n</code></pre>\n<p>In the Tumblr editor, be sure to replace your script tags referencing these external files like so:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{Title}&lt;/title&gt;\n                &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:3000/path/to/prod/index.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                        // where the tumblrData gets created\n                &lt;/script&gt;\n                &lt;script src=\"http://localhost:3000/path/to/prod/index.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Once you run that script, it’ll enable live reload so that every time you save a .js_.css_.scss/etc. file, it’ll rebuild the assets and refresh your Tumblr blog for you. This is way faster than having to re-upload your assets every time you make a change, no matter how small. Just remember to return your script and style references to the uploaded assets when you’re done working. Localhost is only for development.</p>\n<p>You could also add the Redux logger middleware to your project during development so that you can view how the state changes as you fire off different actions. For more information on how to set this up, the <a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\">Redux Logger Github</a> is a great resource.</p>\n<h2>Summary</h2>\n<p>Building a Tumblr theme using Redux and React is possible! Not only is there a workflow that makes development much faster, but it’s also a great way to flex your web development muscles. You can add more to the user experience of your Tumblr now that you have the world of JavaScript at your fingertips. Go forth and make some awesome themes!</p>\n<p>Stay tuned for part 2 that will cover paginating.</p>\n<p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mxssASjQiaTgBDxA9aSSHDA\" target=\"_blank\">@0xmichelle</a></p>\n</blockquote>"},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"159266372136"},"content_raw":"<p><figure class=\"tmblr-full\" data-orig-height=\"995\" data-orig-width=\"1982\"><img src=\"https://78.media.tumblr.com/2ef65b5b54bce140e7a90f04388ca7d1/tumblr_inline_onw21j562I1qzyw0r_540.png\" data-orig-height=\"995\" data-orig-width=\"1982\"></figure><p>As a platform that prides itself on being a home for artists and creatives alike, it only makes sense that we allow our users to fully customize their Tumblrs to fully express themselves. Here at Tumblr, the world is your oyster not only in terms of looks but also in how you create your theme. I wanted to demonstrate how you too can develop a theme using <a href=\"http://redux.js.org/\" target=\"_blank\">Redux</a> and <a href=\"https://facebook.github.io/react/\" target=\"_blank\">React</a>. Since there are plenty of docs and tutorials on how to use those libraries themselves, I will briefly describe how I got the libraries to work with the Tumblr theme engine, and share some handy tips that made developing more efficient and more enjoyable.</p>\n<p>If you follow the ever changing landscape of JavaScript, then you’ve at least heard of these two libraries. Prior to building the <a href=\"https://mentalhealthquilt.tumblr.com/\" target=\"_blank\">Post-It-Forward</a> theme, I only knew of them by name but never got the chance to actually use them. Developers couldn’t get enough of how React made it easy to create and reuse components. Many also praise how elegantly React manages and renders views, especially when paired with Redux for state management. All of this sounded great. I wanted to turn this project into a learning experience. I thought, “why not?” and gave it a shot.</p>\n<h2>An Extremely Brief Introduction to Tumblr Themes</h2>\n<p>The way themes work on Tumblr is that we have a theme engine that provides special types of operators. These operators insert dynamic data, such as your Tumblr’s title or description, or are blocks that serve as conditionals for rendering a block of HTML, like the “Next Page” link.</p>\n<p>My HTML started off a little something like this:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{Title}&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>As you can see, <code>{Title}</code> is a variable that will return the title of the Tumblr. The point of entry for this theme is the <code>&lt;div&gt;</code> element with the <code>#post-it-forward-root</code>  ID. In your <code>index.js</code>  file you’ll reference this DOM element in your <code>ReactDom.render()</code> method. If you want to learn more about the theme engine, head over to our <a href=\"https://www.tumblr.com/docs/custom_themes\" target=\"_blank\">Theme Docs</a></p>\n<h2>Creating the Initial State</h2>\n<p>To get things started, we need to create an initial state. How do we introduce this initial state if we have to rely on the theme engine to give us all our data? How do we get the data from HTML land to JS land? Well, here’s one way of doing it:</p>\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    (function(root) {\n        var ensureString = function(str) {\n            return !str ? '' : str;\n        };\n\n        var basicVariables = {\n            title: ensureString({JSTitle}),\n            name: ensureString({JSName}),\n                        description: ensureString({JSDescription}),\n                        metaDescription: ensureString({JSMetaDescription}),\n                        blogUrl: ensureString({JSBlogURL}),\n                        rss: ensureString({JSRSS}),\n            favicon: ensureString({JSFavicon}),\n            customCss: ensureString({JSCustomCSS}),\n            isPermalinkPage: !!ensureString(/*{block:PermalinkPage}*/true/*{/block:PermalinkPage}*/),\n            isIndexPage: !!ensureString(/*{block:IndexPage}*/true/*{/block:IndexPage}*/),\n            /*{block:PostTitle}*/\n            postTitle: ensureString({JSPostTitle}),\n            /*{/block:PostTitle}*/\n            /*{block:PostSummary}*/\n            postSummary: ensureString({JSPostSummary}),\n            /*{/block:PostSummary}*/\n            portraitUrl16: ensureString({JSPortraitURL-16}),\n            portraitUrl24: ensureString({JSPortraitURL-24}),\n            portraitUrl30: ensureString({JSPortraitURL-30}),\n            portraitUrl40: ensureString({JSPortraitURL-40}),\n            portraitUrl48: ensureString({JSPortraitURL-48}),\n            portraitUrl64: ensureString({JSPortraitURL-64}),\n            portraitUrl96: ensureString({JSPortraitURL-96}),\n            portraitUrl128: ensureString({JSPortraitURL-128}),\n            copyrightYears: ensureString({JSCopyrightYears}),\n            isSearchPage: !!ensureString(/*{block:SearchPage}*/true/*{/block:SearchPage}*/),\n            searchQuery: ensureString({JSSearchQuery}),\n            safeSearchQuery: ensureString({JSURLSafeSearchQuery}),\n            searchPlaceHolder: ensureString('{lang:Search Blog}'),\n            noSearchResults: !!ensureString(/*{block:NoSearchResults}*/true/*{/block:NoSearchResults}*/),\n        };\n\n        root.tumblrData = {\n            basicVariables: basicVariables,\n            };\n    })(this);\n&lt;/script&gt;\n</code></pre>\n<p>This creates a <code>tumblrData</code> attribute on the browser’s <code>window</code> object.</p>\n<p>Sometimes the theme engine returns nothing for a particular variable if it’s not available. For example, if I made a post that does not have a title,  the final <code>root.tumblrData</code>  object will not have <code>postTitle</code> as a key. Sometimes the key will be available but the theme engine returned an empty value for it. For those cases, I created a helper method called <code>ensureString()</code> that turns those empty values into empty strings.  Sometimes you might need a boolean value. In those cases, I’ll enter the conditional variables from the theme engine into the helper method to get the boolean value from it.</p>\n<p>Once you’ve set up your initial state make sure that you place this script tag before the script tag that references the rest of your code that should be compiled and minified and uploaded through the asset uploader that the Tumblr text editor provides.  This ensures that the <code>tumblrData</code> is accessible through the <code>window</code> object by the time the React app gets initiated.</p>\n<p><code>tumblrData</code> should look something like this:</p>\n<pre><code>const tumblrData = {\n    basicVariables: {\n        blogUrl: \"https://mentalhealthquilt.tumblr.com/\",\n        copyrightYears: \"2016–2017\",\n        customCss: \"\",\n                description: \"Mental Health Quilt\",\n        favicon: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        isIndexPage: true,\n        isPermalinkPage: false,\n        isSearchPage: false,\n        metaDescription: \"Mental Health Quilt\",\n        name: \"mentalhealthquilt\",\n        noSearchResults: false,\n        portraitUrl16: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_16.png\",\n        portraitUrl24: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_24.png\",\n        portraitUrl30: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_30.png\",\n        portraitUrl40: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_40.png\",\n        portraitUrl48: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_48.png\",\n        portraitUrl64: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_64.png\",\n        portraitUrl96: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_96.png\",\n        portraitUrl128: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        rss: \"https://mentalhealthquilt.tumblr.com/rss\",\n        safeSearchQuery: \"\",\n        searchPlaceHolder: \"Search mentalhealthquilt\",\n        searchQuery: \"\",\n        title: \"Mental Health Quilt\",\n    },\n}\n</code></pre>\n<p>Now we have the data that the theme engine gave us in a format that React and Redux can work with.</p>\n<p>If you are new to these libraries, I highly recommend following the simple <a href=\"http://redux.js.org/docs/basics/index.html\" target=\"_blank\">Todo App Tutorial</a>  that is on the Redux website. They do a wonderful job of explaining the process as you build the app.</p>\n<h2>Helpful Tips</h2>\n<p>Setting up a local server will make developing way faster than the current setup. If you’re using both the “webpack”  and “webpack-dev-server” packages, in your <code>package.json</code> file under <code>scripts</code> you can place something like this in it:</p>\n<p><i>In your package.json file</i></p>\n<pre><code>...\n\"scripts\": {\n    \"local-server\": \"NODE_ENV=development webpack-dev-server --config path/to/webpack.config.js --port=3000 --inline --hot\"\n},\n...\n</code></pre>\n<p>To run that script, in the terminal you will type this command:</p>\n<pre><code>&gt; npm run local-server\n</code></pre>\n<p>In the Tumblr editor, be sure to replace your script tags referencing these external files like so:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{Title}&lt;/title&gt;\n                &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:3000/path/to/prod/index.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                        // where the tumblrData gets created\n                &lt;/script&gt;\n                &lt;script src=\"http://localhost:3000/path/to/prod/index.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Once you run that script, it’ll enable live reload so that every time you save a .js_.css_.scss/etc. file, it’ll rebuild the assets and refresh your Tumblr blog for you. This is way faster than having to re-upload your assets every time you make a change, no matter how small. Just remember to return your script and style references to the uploaded assets when you’re done working. Localhost is only for development.</p>\n<p>You could also add the Redux logger middleware to your project during development so that you can view how the state changes as you fire off different actions. For more information on how to set this up, the <a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\">Redux Logger Github</a> is a great resource.</p>\n<h2>Summary</h2>\n<p>Building a Tumblr theme using Redux and React is possible! Not only is there a workflow that makes development much faster, but it’s also a great way to flex your web development muscles. You can add more to the user experience of your Tumblr now that you have the world of JavaScript at your fingertips. Go forth and make some awesome themes!</p>\n<p>Stay tuned for part 2 that will cover paginating.</p>\n<p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mxssASjQiaTgBDxA9aSSHDA\" target=\"_blank\">@0xmichelle</a></p></p>","content":"<p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/2ef65b5b54bce140e7a90f04388ca7d1/tumblr_inline_onw21j562I1qzyw0r_540.png\" class=\"\"/></figure><p>As a platform that prides itself on being a home for artists and creatives alike, it only makes sense that we allow our users to fully customize their Tumblrs to fully express themselves. Here at Tumblr, the world is your oyster not only in terms of looks but also in how you create your theme. I wanted to demonstrate how you too can develop a theme using <a href=\"http://redux.js.org/\" target=\"_blank\">Redux</a> and <a href=\"https://facebook.github.io/react/\" target=\"_blank\">React</a>. Since there are plenty of docs and tutorials on how to use those libraries themselves, I will briefly describe how I got the libraries to work with the Tumblr theme engine, and share some handy tips that made developing more efficient and more enjoyable.</p>\n<p>If you follow the ever changing landscape of JavaScript, then you&rsquo;ve at least heard of these two libraries. Prior to building the <a href=\"https://mentalhealthquilt.tumblr.com/\" target=\"_blank\">Post-It-Forward</a> theme, I only knew of them by name but never got the chance to actually use them. Developers couldn&rsquo;t get enough of how React made it easy to create and reuse components. Many also praise how elegantly React manages and renders views, especially when paired with Redux for state management. All of this sounded great. I wanted to turn this project into a learning experience. I thought, &ldquo;why not?&rdquo; and gave it a shot.</p>\n<h2>An Extremely Brief Introduction to Tumblr Themes</h2>\n<p>The way themes work on Tumblr is that we have a theme engine that provides special types of operators. These operators insert dynamic data, such as your Tumblr&rsquo;s title or description, or are blocks that serve as conditionals for rendering a block of HTML, like the &ldquo;Next Page&rdquo; link.</p>\n<p>My HTML started off a little something like this:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{Title}&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>As you can see, <code>{Title}</code> is a variable that will return the title of the Tumblr. The point of entry for this theme is the <code>&lt;div&gt;</code> element with the <code>#post-it-forward-root</code>  ID. In your <code>index.js</code>  file you&rsquo;ll reference this DOM element in your <code>ReactDom.render()</code> method. If you want to learn more about the theme engine, head over to our <a href=\"https://www.tumblr.com/docs/custom_themes\" target=\"_blank\">Theme Docs</a></p>\n<h2>Creating the Initial State</h2>\n<p>To get things started, we need to create an initial state. How do we introduce this initial state if we have to rely on the theme engine to give us all our data? How do we get the data from HTML land to JS land? Well, here&rsquo;s one way of doing it:</p>\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    (function(root) {\n        var ensureString = function(str) {\n            return !str ? '' : str;\n        };\n\n        var basicVariables = {\n            title: ensureString({JSTitle}),\n            name: ensureString({JSName}),\n                        description: ensureString({JSDescription}),\n                        metaDescription: ensureString({JSMetaDescription}),\n                        blogUrl: ensureString({JSBlogURL}),\n                        rss: ensureString({JSRSS}),\n            favicon: ensureString({JSFavicon}),\n            customCss: ensureString({JSCustomCSS}),\n            isPermalinkPage: !!ensureString(/*{block:PermalinkPage}*/true/*{/block:PermalinkPage}*/),\n            isIndexPage: !!ensureString(/*{block:IndexPage}*/true/*{/block:IndexPage}*/),\n            /*{block:PostTitle}*/\n            postTitle: ensureString({JSPostTitle}),\n            /*{/block:PostTitle}*/\n            /*{block:PostSummary}*/\n            postSummary: ensureString({JSPostSummary}),\n            /*{/block:PostSummary}*/\n            portraitUrl16: ensureString({JSPortraitURL-16}),\n            portraitUrl24: ensureString({JSPortraitURL-24}),\n            portraitUrl30: ensureString({JSPortraitURL-30}),\n            portraitUrl40: ensureString({JSPortraitURL-40}),\n            portraitUrl48: ensureString({JSPortraitURL-48}),\n            portraitUrl64: ensureString({JSPortraitURL-64}),\n            portraitUrl96: ensureString({JSPortraitURL-96}),\n            portraitUrl128: ensureString({JSPortraitURL-128}),\n            copyrightYears: ensureString({JSCopyrightYears}),\n            isSearchPage: !!ensureString(/*{block:SearchPage}*/true/*{/block:SearchPage}*/),\n            searchQuery: ensureString({JSSearchQuery}),\n            safeSearchQuery: ensureString({JSURLSafeSearchQuery}),\n            searchPlaceHolder: ensureString('{lang:Search Blog}'),\n            noSearchResults: !!ensureString(/*{block:NoSearchResults}*/true/*{/block:NoSearchResults}*/),\n        };\n\n        root.tumblrData = {\n            basicVariables: basicVariables,\n            };\n    })(this);\n&lt;/script&gt;\n</code></pre>\n<p>This creates a <code>tumblrData</code> attribute on the browser&rsquo;s <code>window</code> object.</p>\n<p>Sometimes the theme engine returns nothing for a particular variable if it&rsquo;s not available. For example, if I made a post that does not have a title,  the final <code>root.tumblrData</code>  object will not have <code>postTitle</code> as a key. Sometimes the key will be available but the theme engine returned an empty value for it. For those cases, I created a helper method called <code>ensureString()</code> that turns those empty values into empty strings.  Sometimes you might need a boolean value. In those cases, I&rsquo;ll enter the conditional variables from the theme engine into the helper method to get the boolean value from it.</p>\n<p>Once you&rsquo;ve set up your initial state make sure that you place this script tag before the script tag that references the rest of your code that should be compiled and minified and uploaded through the asset uploader that the Tumblr text editor provides.  This ensures that the <code>tumblrData</code> is accessible through the <code>window</code> object by the time the React app gets initiated.</p>\n<p><code>tumblrData</code> should look something like this:</p>\n<pre><code>const tumblrData = {\n    basicVariables: {\n        blogUrl: \"https://mentalhealthquilt.tumblr.com/\",\n        copyrightYears: \"2016&ndash;2017\",\n        customCss: \"\",\n                description: \"Mental Health Quilt\",\n        favicon: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        isIndexPage: true,\n        isPermalinkPage: false,\n        isSearchPage: false,\n        metaDescription: \"Mental Health Quilt\",\n        name: \"mentalhealthquilt\",\n        noSearchResults: false,\n        portraitUrl16: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_16.png\",\n        portraitUrl24: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_24.png\",\n        portraitUrl30: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_30.png\",\n        portraitUrl40: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_40.png\",\n        portraitUrl48: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_48.png\",\n        portraitUrl64: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_64.png\",\n        portraitUrl96: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_96.png\",\n        portraitUrl128: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        rss: \"https://mentalhealthquilt.tumblr.com/rss\",\n        safeSearchQuery: \"\",\n        searchPlaceHolder: \"Search mentalhealthquilt\",\n        searchQuery: \"\",\n        title: \"Mental Health Quilt\",\n    },\n}\n</code></pre>\n<p>Now we have the data that the theme engine gave us in a format that React and Redux can work with.</p>\n<p>If you are new to these libraries, I highly recommend following the simple <a href=\"http://redux.js.org/docs/basics/index.html\" target=\"_blank\">Todo App Tutorial</a>  that is on the Redux website. They do a wonderful job of explaining the process as you build the app.</p>\n<h2>Helpful Tips</h2>\n<p>Setting up a local server will make developing way faster than the current setup. If you&rsquo;re using both the &ldquo;webpack&rdquo;  and &ldquo;webpack-dev-server&rdquo; packages, in your <code>package.json</code> file under <code>scripts</code> you can place something like this in it:</p>\n<p><i>In your package.json file</i></p>\n<pre><code>...\n\"scripts\": {\n    \"local-server\": \"NODE_ENV=development webpack-dev-server --config path/to/webpack.config.js --port=3000 --inline --hot\"\n},\n...\n</code></pre>\n<p>To run that script, in the terminal you will type this command:</p>\n<pre><code>&gt; npm run local-server\n</code></pre>\n<p>In the Tumblr editor, be sure to replace your script tags referencing these external files like so:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{Title}&lt;/title&gt;\n                &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:3000/path/to/prod/index.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                        // where the tumblrData gets created\n                &lt;/script&gt;\n                &lt;script src=\"http://localhost:3000/path/to/prod/index.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Once you run that script, it&rsquo;ll enable live reload so that every time you save a .js_.css_.scss/etc. file, it&rsquo;ll rebuild the assets and refresh your Tumblr blog for you. This is way faster than having to re-upload your assets every time you make a change, no matter how small. Just remember to return your script and style references to the uploaded assets when you&rsquo;re done working. Localhost is only for development.</p>\n<p>You could also add the Redux logger middleware to your project during development so that you can view how the state changes as you fire off different actions. For more information on how to set this up, the <a href=\"https://github.com/evgenyrodionov/redux-logger\" target=\"_blank\">Redux Logger Github</a> is a great resource.</p>\n<h2>Summary</h2>\n<p>Building a Tumblr theme using Redux and React is possible! Not only is there a workflow that makes development much faster, but it&rsquo;s also a great way to flex your web development muscles. You can add more to the user experience of your Tumblr now that you have the world of JavaScript at your fingertips. Go forth and make some awesome themes!</p>\n<p>Stay tuned for part 2 that will cover paginating.</p>\n<p>- <a href=\"https://tmblr.co/mxssASjQiaTgBDxA9aSSHDA\" target=\"_blank\">@0xmichelle</a></p></p>","is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":150688267032,"post_url":"https://javascript.tumblr.com/post/150688267032/introducing-laphs","slug":"introducing-laphs","date":"2016-09-20 17:36:54 GMT","timestamp":1474393014,"state":"published","format":"html","reblog_key":"9gJbBjdL","tags":[],"short_url":"https://tmblr.co/ZAczzi2CLk7iO","summary":"Introducing Laphs","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":98,"title":"Introducing Laphs","body":"<p><a class=\"tumblr_blog\" href=\"http://engineering.tumblr.com/post/150687160704\" target=\"_blank\">engineering</a>:</p>\n<blockquote>\n<p>The Core Web team at Tumblr is proud to announce the release of <a href=\"https://github.com/tumblr/laphs\" target=\"_blank\">Laphs</a> (Live Anywhere Photos - LAPhs; get it?), an open source JavaScript library for implementing Apple’s Live Photos on the web.<br/></p>\n<p>We use Laphs to support Live Photos on the web at Tumblr and now you can too! Check it out on <a href=\"https://github.com/tumblr/laphs\" target=\"_blank\">github</a> and <a href=\"https://www.npmjs.com/package/laphs\" target=\"_blank\">npm</a> and let us know what you think.</p>\n<p>Happy coding!</p>\n</blockquote>","reblog":{"comment":"","tree_html":"<p><a class=\"tumblr_blog\" href=\"http://engineering.tumblr.com/post/150687160704\" target=\"_blank\">engineering</a>:</p><blockquote>\n<p>The Core Web team at Tumblr is proud to announce the release of <a href=\"https://github.com/tumblr/laphs\" target=\"_blank\">Laphs</a> (Live Anywhere Photos - LAPhs; get it?), an open source JavaScript library for implementing Apple’s Live Photos on the web.<br></p>\n<p>We use Laphs to support Live Photos on the web at Tumblr and now you can too! Check it out on <a href=\"https://github.com/tumblr/laphs\" target=\"_blank\">github</a> and <a href=\"https://www.npmjs.com/package/laphs\" target=\"_blank\">npm</a> and let us know what you think.</p>\n<p>Happy coding!</p>\n</blockquote>"},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"150687160704"},"content_raw":"<p>The Core Web team at Tumblr is proud to announce the release of <a href=\"https://github.com/tumblr/laphs\" target=\"_blank\">Laphs</a> (Live Anywhere Photos - LAPhs; get it?), an open source JavaScript library for implementing Apple’s Live Photos on the web.<br></p>\n<p>We use Laphs to support Live Photos on the web at Tumblr and now you can too! Check it out on <a href=\"https://github.com/tumblr/laphs\" target=\"_blank\">github</a> and <a href=\"https://www.npmjs.com/package/laphs\" target=\"_blank\">npm</a> and let us know what you think.</p>\n<p>Happy coding!</p>","content":"<p>The Core Web team at Tumblr is proud to announce the release of <a href=\"https://github.com/tumblr/laphs\" target=\"_blank\">Laphs</a> (Live Anywhere Photos - LAPhs; get it?), an open source JavaScript library for implementing Apple&rsquo;s Live Photos on the web.<br /></p>\n<p>We use Laphs to support Live Photos on the web at Tumblr and now you can too! Check it out on <a href=\"https://github.com/tumblr/laphs\" target=\"_blank\">github</a> and <a href=\"https://www.npmjs.com/package/laphs\" target=\"_blank\">npm</a> and let us know what you think.</p>\n<p>Happy coding!</p>","is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":147714873722,"post_url":"https://javascript.tumblr.com/post/147714873722/flux-and-react-in-data-lasso","slug":"flux-and-react-in-data-lasso","date":"2016-07-20 21:24:11 GMT","timestamp":1469049851,"state":"published","format":"html","reblog_key":"JqwhsDeL","tags":["javascript","flux","react","data lasso"],"short_url":"https://tmblr.co/ZAczzi29aVXbw","summary":"Flux and React in Data Lasso","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":37,"title":"Flux and React in Data Lasso","body":"<h2>TL;DR</h2><p>Flux helped bring the complexity of Data Lasso down, replacing messy event bus structure. React helped make the UI more manageable and reduce code duplication. More below on our experience.<br/></p><!-- more --><h2><b>Flux</b></h2><p>Data Lasso runs entirely in the browser. It is a somewhat complex app that has a rich UI and is highly interactive.</p><p>From the beginning, it used to rely on an event bus that tied different parts of the app together. But with new functionality being added, code complexity was increasing at a very high rate. Some bugs were hard to pinpoint to a source. Fixing others required more workarounds, what in the end led to more bugs.</p><p>This surfaced the underlying problem with <b>event bus</b>. While being flexible, it introduced too much complexity by itself, becoming a drag on the code.</p><p>Here is a simplified diagram of uploading a new dataset:</p><figure data-orig-width=\"700\" data-orig-height=\"527\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/24b97bb719cf745623269f0138936b93/tumblr_inline_oamtunQL4k1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"700\" data-orig-height=\"527\"/></figure><p>The dependencies that formed were vast - logic from one component was calling into several other (<a href=\"https://github.com/tumblr/data-lasso/blob/4d23fd81df2f47c606dd7b56c736bb8fe02024b3/src/models/Data.js#L91\" target=\"_blank\">example</a>) components. Something as simple as adding a new upload source was going to double the amount of event listeners and interdependencies.</p><p><b>Flux</b> aims to solve a similar problem, so I decided to give it a try.</p><p>First of all, a bit on Flux. It is an application architecture for building interfaces, with it&rsquo;s core principle being unidirectional data flow. I highly recommend looking through <a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\">Facebook’s flux overview</a>.</p><p>I like to think of Flux more as of a state of mind. You don’t have to use solutions like Redux to get started, it’s up to you on how you want to execute the pattern. That is what I did with Data Lasso - here are some of the key components:</p><ul><li><b>Store + Dispatcher:</b> In Data Lasso, Store is really just a single Backbone Model. Dispatcher, which is typically it&rsquo;s own thing, is integrated into the Store. Actions are dispatched right on the Store, which is a “single source of truth”.</li><li><b>Actions:</b> As Flux architecture goes, I am a big fan of having strict pre-defined actions, as well as a <a href=\"http://redux.js.org/docs/basics/Reducers.html\" target=\"_blank\">Reducer</a>. From the standpoint of bringing clarity into the code, those two are great concepts. Data Lasso, however, is not that complex, so I opted for a humble switch statement on the Store that does the trick (<a href=\"https://github.com/tumblr/data-lasso/blob/master/src/store/index.js#L39\" target=\"_blank\">here</a> it’s in the code).</li></ul><p>With that in mind, the diagram from before changes to this:</p><figure data-orig-width=\"700\" data-orig-height=\"539\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5c0e0a7780a8c8bbb8146180e20794f9/tumblr_inline_oamtvvILaX1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"700\" data-orig-height=\"539\"/></figure><p>From the first glance, it’s not less complex. If anything, there is more entries. That’s not the point, however. The benefit is in having a more predictable logic. It’s more clear what is happening at more or less any point in time.</p><p>There are some other benefits:</p><ul><li>Anything that can happen, happens in one place. It’s always nice to be able to glance at one file and get a complete picture</li><li>Race conditions are less likely, since everything is dispatched through a single point in the app</li></ul><p>Overall, Flux pattern was a perfect match for Data Lasso. It really solved some of the pains of a highly dynamic application without adding unnecessary abstract conventions.</p><h2><b>React</b></h2><p>React was a more straightforward change. Besides the fact that React&rsquo;s way of doing things matches well to a unidirectional data flow, it was a much nicer view layer to use, compared to Backbone Views.</p><p>Some advantages:</p><ul><li>Components! Having few reusable components made a ton of difference, improving consistency and reducing code duplication.</li><li>Event binding made the UI easier to comprehend and maintain.</li></ul><p>While animations took some trial and error to figure out, at the end of the day React was a great improvement, and maybe most of all - felt like a natural next step.</p><hr><h2>Further reading</h2><ul><li><a href=\"https://github.com/tumblr/data-lasso/pull/14\" target=\"_blank\">Pull Request</a> that implemented Flux in Data Lasso. (Did we mention that Data Lasso is Open Source?)</li><li><a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\">Flux Overview</a> - video is exceptionally helpful and we would recommend you watch it!</li><li><a href=\"https://facebook.github.io/react/\" target=\"_blank\">React</a> - while it&rsquo;s necessary to maintain a healthy level of skepticism towards new technologies that come and go so frequently, React proved a new paradigm of thinking and established a solid solution to a painful problem.</li></ul>","body_abstract":"\n<h2>TL;DR</h2>\n<p>Flux helped bring the complexity of Data Lasso down, replacing messy event bus structure. React helped make the UI more manageable and reduce code duplication. More below on our experience.<br></p>\n","reblog":{"comment":"<p><h2>TL;DR</h2><p>Flux helped bring the complexity of Data Lasso down, replacing messy event bus structure. React helped make the UI more manageable and reduce code duplication. More below on our experience.<br></p>[[MORE]]<h2><b>Flux</b></h2><p>Data Lasso runs entirely in the browser. It is a somewhat complex app that has a rich UI and is highly interactive.</p><p>From the beginning, it used to rely on an event bus that tied different parts of the app together. But with new functionality being added, code complexity was increasing at a very high rate. Some bugs were hard to pinpoint to a source. Fixing others required more workarounds, what in the end led to more bugs.</p><p>This surfaced the underlying problem with <b>event bus</b>. While being flexible, it introduced too much complexity by itself, becoming a drag on the code.</p><p>Here is a simplified diagram of uploading a new dataset:</p><figure data-orig-width=\"700\" data-orig-height=\"527\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/24b97bb719cf745623269f0138936b93/tumblr_inline_oamtunQL4k1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"700\" data-orig-height=\"527\"></figure><p>The dependencies that formed were vast - logic from one component was calling into several other (<a href=\"https://github.com/tumblr/data-lasso/blob/4d23fd81df2f47c606dd7b56c736bb8fe02024b3/src/models/Data.js#L91\" target=\"_blank\">example</a>) components. Something as simple as adding a new upload source was going to double the amount of event listeners and interdependencies.</p><p><b>Flux</b> aims to solve a similar problem, so I decided to give it a try.</p><p>First of all, a bit on Flux. It is an application architecture for building interfaces, with it’s core principle being unidirectional data flow. I highly recommend looking through <a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\">Facebook’s flux overview</a>.</p><p>I like to think of Flux more as of a state of mind. You don’t have to use solutions like Redux to get started, it’s up to you on how you want to execute the pattern. That is what I did with Data Lasso - here are some of the key components:</p><ul><li><b>Store + Dispatcher:</b> In Data Lasso, Store is really just a single Backbone Model. Dispatcher, which is typically it’s own thing, is integrated into the Store. Actions are dispatched right on the Store, which is a “single source of truth”.</li><li><b>Actions:</b> As Flux architecture goes, I am a big fan of having strict pre-defined actions, as well as a <a href=\"http://redux.js.org/docs/basics/Reducers.html\" target=\"_blank\">Reducer</a>. From the standpoint of bringing clarity into the code, those two are great concepts. Data Lasso, however, is not that complex, so I opted for a humble switch statement on the Store that does the trick (<a href=\"https://github.com/tumblr/data-lasso/blob/master/src/store/index.js#L39\" target=\"_blank\">here</a> it’s in the code).</li></ul><p>With that in mind, the diagram from before changes to this:</p><figure data-orig-width=\"700\" data-orig-height=\"539\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5c0e0a7780a8c8bbb8146180e20794f9/tumblr_inline_oamtvvILaX1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"700\" data-orig-height=\"539\"></figure><p>From the first glance, it’s not less complex. If anything, there is more entries. That’s not the point, however. The benefit is in having a more predictable logic. It’s more clear what is happening at more or less any point in time.</p><p>There are some other benefits:</p><ul><li>Anything that can happen, happens in one place. It’s always nice to be able to glance at one file and get a complete picture</li><li>Race conditions are less likely, since everything is dispatched through a single point in the app</li></ul><p>Overall, Flux pattern was a perfect match for Data Lasso. It really solved some of the pains of a highly dynamic application without adding unnecessary abstract conventions.</p><h2><b>React</b></h2><p>React was a more straightforward change. Besides the fact that React’s way of doing things matches well to a unidirectional data flow, it was a much nicer view layer to use, compared to Backbone Views.</p><p>Some advantages:</p><ul><li>Components! Having few reusable components made a ton of difference, improving consistency and reducing code duplication.</li><li>Event binding made the UI easier to comprehend and maintain.</li></ul><p>While animations took some trial and error to figure out, at the end of the day React was a great improvement, and maybe most of all - felt like a natural next step.</p><hr><h2>Further reading</h2><ul><li><a href=\"https://github.com/tumblr/data-lasso/pull/14\" target=\"_blank\">Pull Request</a> that implemented Flux in Data Lasso. (Did we mention that Data Lasso is Open Source?)</li><li><a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\">Flux Overview</a> - video is exceptionally helpful and we would recommend you watch it!</li><li><a href=\"https://facebook.github.io/react/\" target=\"_blank\">React</a> - while it’s necessary to maintain a healthy level of skepticism towards new technologies that come and go so frequently, React proved a new paradigm of thinking and established a solid solution to a painful problem.</li></ul></p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"147714873722"},"content_raw":"<p><h2>TL;DR</h2><p>Flux helped bring the complexity of Data Lasso down, replacing messy event bus structure. React helped make the UI more manageable and reduce code duplication. More below on our experience.<br></p>[[MORE]]<h2><b>Flux</b></h2><p>Data Lasso runs entirely in the browser. It is a somewhat complex app that has a rich UI and is highly interactive.</p><p>From the beginning, it used to rely on an event bus that tied different parts of the app together. But with new functionality being added, code complexity was increasing at a very high rate. Some bugs were hard to pinpoint to a source. Fixing others required more workarounds, what in the end led to more bugs.</p><p>This surfaced the underlying problem with <b>event bus</b>. While being flexible, it introduced too much complexity by itself, becoming a drag on the code.</p><p>Here is a simplified diagram of uploading a new dataset:</p><figure data-orig-width=\"700\" data-orig-height=\"527\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/24b97bb719cf745623269f0138936b93/tumblr_inline_oamtunQL4k1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"700\" data-orig-height=\"527\"></figure><p>The dependencies that formed were vast - logic from one component was calling into several other (<a href=\"https://github.com/tumblr/data-lasso/blob/4d23fd81df2f47c606dd7b56c736bb8fe02024b3/src/models/Data.js#L91\" target=\"_blank\">example</a>) components. Something as simple as adding a new upload source was going to double the amount of event listeners and interdependencies.</p><p><b>Flux</b> aims to solve a similar problem, so I decided to give it a try.</p><p>First of all, a bit on Flux. It is an application architecture for building interfaces, with it’s core principle being unidirectional data flow. I highly recommend looking through <a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\">Facebook’s flux overview</a>.</p><p>I like to think of Flux more as of a state of mind. You don’t have to use solutions like Redux to get started, it’s up to you on how you want to execute the pattern. That is what I did with Data Lasso - here are some of the key components:</p><ul><li><b>Store + Dispatcher:</b> In Data Lasso, Store is really just a single Backbone Model. Dispatcher, which is typically it’s own thing, is integrated into the Store. Actions are dispatched right on the Store, which is a “single source of truth”.</li><li><b>Actions:</b> As Flux architecture goes, I am a big fan of having strict pre-defined actions, as well as a <a href=\"http://redux.js.org/docs/basics/Reducers.html\" target=\"_blank\">Reducer</a>. From the standpoint of bringing clarity into the code, those two are great concepts. Data Lasso, however, is not that complex, so I opted for a humble switch statement on the Store that does the trick (<a href=\"https://github.com/tumblr/data-lasso/blob/master/src/store/index.js#L39\" target=\"_blank\">here</a> it’s in the code).</li></ul><p>With that in mind, the diagram from before changes to this:</p><figure data-orig-width=\"700\" data-orig-height=\"539\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5c0e0a7780a8c8bbb8146180e20794f9/tumblr_inline_oamtvvILaX1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"700\" data-orig-height=\"539\"></figure><p>From the first glance, it’s not less complex. If anything, there is more entries. That’s not the point, however. The benefit is in having a more predictable logic. It’s more clear what is happening at more or less any point in time.</p><p>There are some other benefits:</p><ul><li>Anything that can happen, happens in one place. It’s always nice to be able to glance at one file and get a complete picture</li><li>Race conditions are less likely, since everything is dispatched through a single point in the app</li></ul><p>Overall, Flux pattern was a perfect match for Data Lasso. It really solved some of the pains of a highly dynamic application without adding unnecessary abstract conventions.</p><h2><b>React</b></h2><p>React was a more straightforward change. Besides the fact that React’s way of doing things matches well to a unidirectional data flow, it was a much nicer view layer to use, compared to Backbone Views.</p><p>Some advantages:</p><ul><li>Components! Having few reusable components made a ton of difference, improving consistency and reducing code duplication.</li><li>Event binding made the UI easier to comprehend and maintain.</li></ul><p>While animations took some trial and error to figure out, at the end of the day React was a great improvement, and maybe most of all - felt like a natural next step.</p><hr><h2>Further reading</h2><ul><li><a href=\"https://github.com/tumblr/data-lasso/pull/14\" target=\"_blank\">Pull Request</a> that implemented Flux in Data Lasso. (Did we mention that Data Lasso is Open Source?)</li><li><a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\">Flux Overview</a> - video is exceptionally helpful and we would recommend you watch it!</li><li><a href=\"https://facebook.github.io/react/\" target=\"_blank\">React</a> - while it’s necessary to maintain a healthy level of skepticism towards new technologies that come and go so frequently, React proved a new paradigm of thinking and established a solid solution to a painful problem.</li></ul></p>","content":"<p><h2>TL;DR</h2><p>Flux helped bring the complexity of Data Lasso down, replacing messy event bus structure. React helped make the UI more manageable and reduce code duplication. More below on our experience.<br /></p><h2><b>Flux</b></h2><p>Data Lasso runs entirely in the browser. It is a somewhat complex app that has a rich UI and is highly interactive.</p><p>From the beginning, it used to rely on an event bus that tied different parts of the app together. But with new functionality being added, code complexity was increasing at a very high rate. Some bugs were hard to pinpoint to a source. Fixing others required more workarounds, what in the end led to more bugs.</p><p>This surfaced the underlying problem with <b>event bus</b>. While being flexible, it introduced too much complexity by itself, becoming a drag on the code.</p><p>Here is a simplified diagram of uploading a new dataset:</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/24b97bb719cf745623269f0138936b93/tumblr_inline_oamtunQL4k1rnmbe6_540.png\" class=\"\"/></figure><p>The dependencies that formed were vast - logic from one component was calling into several other&nbsp;(<a href=\"https://github.com/tumblr/data-lasso/blob/4d23fd81df2f47c606dd7b56c736bb8fe02024b3/src/models/Data.js#L91\" target=\"_blank\">example</a>) components. Something as simple as adding a new upload source was going to double the amount of event listeners and interdependencies.</p><p><b>Flux</b> aims to solve a similar problem, so I decided to give it a try.</p><p>First of all, a bit on Flux. It is an application architecture for building interfaces, with it&rsquo;s core principle being unidirectional data flow. I highly recommend looking through <a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\">Facebook&rsquo;s flux overview</a>.</p><p>I like to think of Flux more as of a state of mind. You don&rsquo;t have to use solutions like Redux to get started, it&rsquo;s up to you on how you want to execute the pattern. That is what I did with Data Lasso - here are some of the key components:</p><ul><li><b>Store + Dispatcher:</b> In Data Lasso, Store is really just a single Backbone Model. Dispatcher, which is typically it&rsquo;s own thing, is integrated into the Store. Actions are dispatched right on the Store, which is a &ldquo;single source of truth&rdquo;.</li><li><b>Actions:</b> As Flux architecture goes, I am a big fan of having strict pre-defined actions, as well as a <a href=\"http://redux.js.org/docs/basics/Reducers.html\" target=\"_blank\">Reducer</a>. From the standpoint of bringing clarity into the code, those two are great concepts. Data Lasso, however, is not that complex, so I opted for a humble switch statement on the Store that does the trick (<a href=\"https://github.com/tumblr/data-lasso/blob/master/src/store/index.js#L39\" target=\"_blank\">here</a> it&rsquo;s in the code).</li></ul><p>With that in mind, the diagram from before changes to this:</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5c0e0a7780a8c8bbb8146180e20794f9/tumblr_inline_oamtvvILaX1rnmbe6_540.png\" class=\"\"/></figure><p>From the first glance, it&rsquo;s not less complex. If anything, there is more entries. That&rsquo;s not the point, however. The benefit is in having a more predictable logic. It&rsquo;s more clear what is happening at more or less any point in time.</p><p>There are some other benefits:</p><ul><li>Anything that can happen, happens in one place. It&rsquo;s always nice to be able to glance at one file and get a complete picture</li><li>Race conditions are less likely, since everything is dispatched through a single point in the app</li></ul><p>Overall, Flux pattern was a perfect match for Data Lasso. It really solved some of the pains of a highly dynamic application without adding unnecessary abstract conventions.</p><h2><b>React</b></h2><p>React was a more straightforward change. Besides the fact that React&rsquo;s way of doing things matches well to a unidirectional data flow, it was a much nicer view layer to use, compared to Backbone Views.</p><p>Some advantages:</p><ul><li>Components! Having few reusable components made a ton of difference, improving consistency and reducing code duplication.</li><li>Event binding made the UI easier to comprehend and maintain.</li></ul><p>While animations took some trial and error to figure out, at the end of the day React was a great improvement, and maybe most of all - felt like a natural next step.</p><hr /><h2>Further reading</h2><ul><li><a href=\"https://github.com/tumblr/data-lasso/pull/14\" target=\"_blank\">Pull Request</a> that implemented Flux in Data Lasso. (Did we mention that Data Lasso is Open Source?)</li><li><a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\">Flux Overview</a> - video is exceptionally helpful and we would recommend you watch it!</li><li><a href=\"https://facebook.github.io/react/\" target=\"_blank\">React</a> - while it&rsquo;s necessary to maintain a healthy level of skepticism towards new technologies that come and go so frequently, React proved a new paradigm of thinking and established a solid solution to a painful problem.</li></ul></p>","content_abstract":"<p>\n\n<h2>TL;DR</h2>\n<p>Flux helped bring the complexity of Data Lasso down, replacing messy event bus structure. React helped make the UI more manageable and reduce code duplication. More below on our experience.<br /></p>\n</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":146706556192,"post_url":"https://javascript.tumblr.com/post/146706556192/tumblrjs-update","slug":"tumblrjs-update","date":"2016-06-30 15:08:26 GMT","timestamp":1467299306,"state":"published","format":"markdown","reblog_key":"DCGUT9cb","tags":["tumblr.js","api","javascript"],"short_url":"https://tmblr.co/ZAczzi28eP6KW","summary":"tumblr.js update","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":56,"title":"tumblr.js update","body":"<p>We just published <a href=\"https://github.com/tumblr/tumblr.js/releases/tag/1.1.0\" target=\"_blank\">v1.1.0</a> of the <a href=\"https://github.com/tumblr/tumblr.js\" target=\"_blank\">tumblr.js</a> API client. We didn&rsquo;t make too much of a fuss when we released a <a href=\"https://github.com/tumblr/tumblr.js/releases/tag/1.0.0\" target=\"_blank\">bigger update</a> in May, but here&rsquo;s a quick run-down of the bigger updates you may have missed if you haven&rsquo;t looked at the JS client in a while:</p>\n\n<ul><li><strong>Method names on the API are named more consistently.</strong> For example, <code>blogInfo</code> and <code>blogPosts</code> and <code>blogFollowers</code> rather than <code>blogInfo</code> and <code>posts</code> and <code>followers</code>.</li>\n<li><strong>Customizable API <code>baseUrl</code>.</strong> We use this internally when we&rsquo;re testing new API features during development, and it&rsquo;s super convenient.</li>\n<li><strong><code>data64</code> support</strong>, which is handy for those times when you have a base64-encoded image just lying around and you want to post it to Tumblr.</li>\n<li><strong>Support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\"><code>Promise</code></a> objects.</strong> It&rsquo;s way more convenient, if you ask me. Regular callbacks are still supported too.</li>\n<li><strong>Linting!</strong> We&rsquo;ve been using <code>eslint</code> internally for a while, so we decided to go for it here too. We&rsquo;re linting in addition to running <code>mocha</code> tests on pull requests.</li>\n</ul><p>Check it out on <a href=\"https://github.com/tumblr/tumblr.js\" target=\"_blank\">GitHub</a> and/or <a href=\"https://www.npmjs.com/package/tumblr.js\" target=\"_blank\">npm</a> and star it, if you feel so inclined.</p>\n\n<h2><strong>tumblr.js REPL</strong></h2>\n\n<p>When we were updating the API client, we were pleasantly suprised to discover a REPL in the codebase. If you don&rsquo;t know, that&rsquo;s basically a command-line console that you can use to make API requests and examine the responses. We dusted it off and decided to give it <a href=\"https://github.com/tumblr/tumblr-repl\" target=\"_blank\">its own repository</a>. It&rsquo;s also on <a href=\"https://www.npmjs.com/package/tumblr-repl\" target=\"_blank\">npm</a>.</p>\n\n<p>If you&rsquo;re interested in exploring the Tumblr API, but don&rsquo;t have a particular project in mind yet, it&rsquo;s a great way to get your feet wet. Try it out!</p>","reblog":{"comment":"<p>We just published <a href=\"https://github.com/tumblr/tumblr.js/releases/tag/1.1.0\" target=\"_blank\">v1.1.0</a> of the <a href=\"https://github.com/tumblr/tumblr.js\" target=\"_blank\">tumblr.js</a> API client. We didn’t make too much of a fuss when we released a <a href=\"https://github.com/tumblr/tumblr.js/releases/tag/1.0.0\" target=\"_blank\">bigger update</a> in May, but here’s a quick run-down of the bigger updates you may have missed if you haven’t looked at the JS client in a while:</p>\n\n<ul><li><strong>Method names on the API are named more consistently.</strong> For example, <code>blogInfo</code> and <code>blogPosts</code> and <code>blogFollowers</code> rather than <code>blogInfo</code> and <code>posts</code> and <code>followers</code>.</li>\n<li><strong>Customizable API <code>baseUrl</code>.</strong> We use this internally when we’re testing new API features during development, and it’s super convenient.</li>\n<li><strong><code>data64</code> support</strong>, which is handy for those times when you have a base64-encoded image just lying around and you want to post it to Tumblr.</li>\n<li><strong>Support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\"><code>Promise</code></a> objects.</strong> It’s way more convenient, if you ask me. Regular callbacks are still supported too.</li>\n<li><strong>Linting!</strong> We’ve been using <code>eslint</code> internally for a while, so we decided to go for it here too. We’re linting in addition to running <code>mocha</code> tests on pull requests.</li>\n</ul><p>Check it out on <a href=\"https://github.com/tumblr/tumblr.js\" target=\"_blank\">GitHub</a> and/or <a href=\"https://www.npmjs.com/package/tumblr.js\" target=\"_blank\">npm</a> and star it, if you feel so inclined.</p>\n\n<h2><strong>tumblr.js REPL</strong></h2>\n\n<p>When we were updating the API client, we were pleasantly suprised to discover a REPL in the codebase. If you don’t know, that’s basically a command-line console that you can use to make API requests and examine the responses. We dusted it off and decided to give it <a href=\"https://github.com/tumblr/tumblr-repl\" target=\"_blank\">its own repository</a>. It’s also on <a href=\"https://www.npmjs.com/package/tumblr-repl\" target=\"_blank\">npm</a>.</p>\n\n<p>If you’re interested in exploring the Tumblr API, but don’t have a particular project in mind yet, it’s a great way to get your feet wet. Try it out!</p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"146706556192"},"content_raw":"<p>We just published <a href=\"https://github.com/tumblr/tumblr.js/releases/tag/1.1.0\" target=\"_blank\">v1.1.0</a> of the <a href=\"https://github.com/tumblr/tumblr.js\" target=\"_blank\">tumblr.js</a> API client. We didn’t make too much of a fuss when we released a <a href=\"https://github.com/tumblr/tumblr.js/releases/tag/1.0.0\" target=\"_blank\">bigger update</a> in May, but here’s a quick run-down of the bigger updates you may have missed if you haven’t looked at the JS client in a while:</p>\n\n<ul><li><strong>Method names on the API are named more consistently.</strong> For example, <code>blogInfo</code> and <code>blogPosts</code> and <code>blogFollowers</code> rather than <code>blogInfo</code> and <code>posts</code> and <code>followers</code>.</li>\n<li><strong>Customizable API <code>baseUrl</code>.</strong> We use this internally when we’re testing new API features during development, and it’s super convenient.</li>\n<li><strong><code>data64</code> support</strong>, which is handy for those times when you have a base64-encoded image just lying around and you want to post it to Tumblr.</li>\n<li><strong>Support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\"><code>Promise</code></a> objects.</strong> It’s way more convenient, if you ask me. Regular callbacks are still supported too.</li>\n<li><strong>Linting!</strong> We’ve been using <code>eslint</code> internally for a while, so we decided to go for it here too. We’re linting in addition to running <code>mocha</code> tests on pull requests.</li>\n</ul><p>Check it out on <a href=\"https://github.com/tumblr/tumblr.js\" target=\"_blank\">GitHub</a> and/or <a href=\"https://www.npmjs.com/package/tumblr.js\" target=\"_blank\">npm</a> and star it, if you feel so inclined.</p>\n\n<h2><strong>tumblr.js REPL</strong></h2>\n\n<p>When we were updating the API client, we were pleasantly suprised to discover a REPL in the codebase. If you don’t know, that’s basically a command-line console that you can use to make API requests and examine the responses. We dusted it off and decided to give it <a href=\"https://github.com/tumblr/tumblr-repl\" target=\"_blank\">its own repository</a>. It’s also on <a href=\"https://www.npmjs.com/package/tumblr-repl\" target=\"_blank\">npm</a>.</p>\n\n<p>If you’re interested in exploring the Tumblr API, but don’t have a particular project in mind yet, it’s a great way to get your feet wet. Try it out!</p>","content":"<p>We just published <a href=\"https://github.com/tumblr/tumblr.js/releases/tag/1.1.0\" target=\"_blank\">v1.1.0</a> of the <a href=\"https://github.com/tumblr/tumblr.js\" target=\"_blank\">tumblr.js</a> API client. We didn&rsquo;t make too much of a fuss when we released a <a href=\"https://github.com/tumblr/tumblr.js/releases/tag/1.0.0\" target=\"_blank\">bigger update</a> in May, but here&rsquo;s a quick run-down of the bigger updates you may have missed if you haven&rsquo;t looked at the JS client in a while:</p>\n\n<ul><li><strong>Method names on the API are named more consistently.</strong> For example, <code>blogInfo</code> and <code>blogPosts</code> and <code>blogFollowers</code> rather than <code>blogInfo</code> and <code>posts</code> and <code>followers</code>.</li>\n<li><strong>Customizable API <code>baseUrl</code>.</strong> We use this internally when we&rsquo;re testing new API features during development, and it&rsquo;s super convenient.</li>\n<li><strong><code>data64</code> support</strong>, which is handy for those times when you have a base64-encoded image just lying around and you want to post it to Tumblr.</li>\n<li><strong>Support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\"><code>Promise</code></a> objects.</strong> It&rsquo;s way more convenient, if you ask me. Regular callbacks are still supported too.</li>\n<li><strong>Linting!</strong> We&rsquo;ve been using <code>eslint</code> internally for a while, so we decided to go for it here too. We&rsquo;re linting in addition to running <code>mocha</code> tests on pull requests.</li>\n</ul><p>Check it out on <a href=\"https://github.com/tumblr/tumblr.js\" target=\"_blank\">GitHub</a> and/or <a href=\"https://www.npmjs.com/package/tumblr.js\" target=\"_blank\">npm</a> and star it, if you feel so inclined.</p>\n\n<h2><strong>tumblr.js REPL</strong></h2>\n\n<p>When we were updating the API client, we were pleasantly suprised to discover a REPL in the codebase. If you don&rsquo;t know, that&rsquo;s basically a command-line console that you can use to make API requests and examine the responses. We dusted it off and decided to give it <a href=\"https://github.com/tumblr/tumblr-repl\" target=\"_blank\">its own repository</a>. It&rsquo;s also on <a href=\"https://www.npmjs.com/package/tumblr-repl\" target=\"_blank\">npm</a>.</p>\n\n<p>If you&rsquo;re interested in exploring the Tumblr API, but don&rsquo;t have a particular project in mind yet, it&rsquo;s a great way to get your feet wet. Try it out!</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":144249642797,"post_url":"https://javascript.tumblr.com/post/144249642797/data-lasso-2","slug":"data-lasso-2","date":"2016-05-12 14:33:35 GMT","timestamp":1463063615,"state":"published","format":"html","reblog_key":"6BuNSOzE","tags":["data lasso","javascript"],"short_url":"https://tmblr.co/ZAczzi26Lyjyj","summary":"Data Lasso 2","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":66,"title":"Data Lasso 2","body":"<p>Data Lasso, Tumblr’s three-dimensional visualization tool, just got a serious upgrade. Along with a version bump to 2.x, Data Lasso now has some handy new features (as well as completely reworked internals). A GIF is worth a thousand words:</p><figure class=\"tmblr-full\" data-orig-height=\"749\" data-orig-width=\"1280\"><img src=\"https://78.media.tumblr.com/c3b58cdff0d160d03b6f8d392f693d72/tumblr_inline_o72k4nT2om1rnmbe6_540.gif\" data-orig-height=\"749\" data-orig-width=\"1280\"/></figure><p>Quick refresher: Data Lasso is a visualization tool that Tumblr built that allows us to look at large multi-dimensional data sets quickly. If you haven’t tried it yet, check out the hosted version <a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">here</a>.</p>\n\n<h2><b>New stuff</b></h2>\n\n<ul><li>Data Lasso is built on the premise of being able to quickly visualize data and select a subset of interest, using a lasso-like tool. That tool just became much more flexible. Now, you will be able to make complex selections by adding and subtracting from an existing selection - much like the tools that you are already used to, if you work with image editing programs. Hold your shift key to add, option/alt to subtract.<br/></li><li>Now, you can also upload datasets using a URL, without needing to download them. Same rules apply - it can be any <code>.csv</code>, <code>.tsv</code> or <code>.json</code>, as long as it’s properly formatted. That will come in handy if you are using data lasso with public datasets that are available online, or if you are working with systems like Hive that provide a link to your query results.<br/></li></ul><h2><b>Reworked Internals</b></h2>\n\n<p>A lot was changed under the 3 dimensional hood of Data Lasso.</p>\n\n<ul><li>Architecture now follows principles of Flux (a fitting approach for a complex <a href=\"https://css-tricks.com/poll-results-front-end-front-end/\" target=\"_blank\">front-end</a> application like Data Lasso) and its interface is now powered by React. These two things help to reduce the complexity a lot. More on moving to Flux + React in a blog post to follow.<br/></li><li>The build process was moved to Webpack and was simplified a lot. Webpack loaders also allowed us to have <code>.hlsl</code> files in the codebase for the first time - so we no longer had to rely on workarounds to include the vertex and fragment shaders that Data Lasso relies on for utilizing GPU.<br/></li></ul><p>It won’t be a major version bump, of course, if it did not contain backwards incompatible changes. With a move to Flux, the event bus was deprecated. So if you are using Data Lasso inside your app and rely on events for interacting with it, you will have to switch to using Store and Dispatcher instead. It is good in the long term - as it provides so much more clarity into what’s going on inside Data Lasso.</p>\n\n<p>That should be it! Overall, 2.0 is a solid release that adds new fundamental functionality, while allowing for future work to go smoother. As usual, if you encounter a problem - open an issue on the <a href=\"https://github.com/tumblr/data-lasso\" target=\"_blank\">repository</a>.</p>","reblog":{"comment":"<p>Data Lasso, Tumblr’s three-dimensional visualization tool, just got a serious upgrade. Along with a version bump to 2.x, Data Lasso now has some handy new features (as well as completely reworked internals). A GIF is worth a thousand words:</p><figure class=\"tmblr-full\" data-orig-height=\"749\" data-orig-width=\"1280\"><img src=\"https://78.media.tumblr.com/c3b58cdff0d160d03b6f8d392f693d72/tumblr_inline_o72k4nT2om1rnmbe6_540.gif\" data-orig-height=\"749\" data-orig-width=\"1280\"></figure><p>Quick refresher: Data Lasso is a visualization tool that Tumblr built that allows us to look at large multi-dimensional data sets quickly. If you haven’t tried it yet, check out the hosted version <a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">here</a>.</p>\n\n<h2><b>New stuff</b></h2>\n\n<ul><li>Data Lasso is built on the premise of being able to quickly visualize data and select a subset of interest, using a lasso-like tool. That tool just became much more flexible. Now, you will be able to make complex selections by adding and subtracting from an existing selection - much like the tools that you are already used to, if you work with image editing programs. Hold your shift key to add, option/alt to subtract.<br></li><li>Now, you can also upload datasets using a URL, without needing to download them. Same rules apply - it can be any <code>.csv</code>, <code>.tsv</code> or <code>.json</code>, as long as it’s properly formatted. That will come in handy if you are using data lasso with public datasets that are available online, or if you are working with systems like Hive that provide a link to your query results.<br></li></ul><h2><b>Reworked Internals</b></h2>\n\n<p>A lot was changed under the 3 dimensional hood of Data Lasso.</p>\n\n<ul><li>Architecture now follows principles of Flux (a fitting approach for a complex <a href=\"https://css-tricks.com/poll-results-front-end-front-end/\" target=\"_blank\">front-end</a> application like Data Lasso) and its interface is now powered by React. These two things help to reduce the complexity a lot. More on moving to Flux + React in a blog post to follow.<br></li><li>The build process was moved to Webpack and was simplified a lot. Webpack loaders also allowed us to have <code>.hlsl</code> files in the codebase for the first time - so we no longer had to rely on workarounds to include the vertex and fragment shaders that Data Lasso relies on for utilizing GPU.<br></li></ul><p>It won’t be a major version bump, of course, if it did not contain backwards incompatible changes. With a move to Flux, the event bus was deprecated. So if you are using Data Lasso inside your app and rely on events for interacting with it, you will have to switch to using Store and Dispatcher instead. It is good in the long term - as it provides so much more clarity into what’s going on inside Data Lasso.</p>\n\n<p>That should be it! Overall, 2.0 is a solid release that adds new fundamental functionality, while allowing for future work to go smoother. As usual, if you encounter a problem - open an issue on the <a href=\"https://github.com/tumblr/data-lasso\" target=\"_blank\">repository</a>.</p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"144249642797"},"content_raw":"<p>Data Lasso, Tumblr’s three-dimensional visualization tool, just got a serious upgrade. Along with a version bump to 2.x, Data Lasso now has some handy new features (as well as completely reworked internals). A GIF is worth a thousand words:</p><figure class=\"tmblr-full\" data-orig-height=\"749\" data-orig-width=\"1280\"><img src=\"https://78.media.tumblr.com/c3b58cdff0d160d03b6f8d392f693d72/tumblr_inline_o72k4nT2om1rnmbe6_540.gif\" data-orig-height=\"749\" data-orig-width=\"1280\"></figure><p>Quick refresher: Data Lasso is a visualization tool that Tumblr built that allows us to look at large multi-dimensional data sets quickly. If you haven’t tried it yet, check out the hosted version <a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">here</a>.</p>\n\n<h2><b>New stuff</b></h2>\n\n<ul><li>Data Lasso is built on the premise of being able to quickly visualize data and select a subset of interest, using a lasso-like tool. That tool just became much more flexible. Now, you will be able to make complex selections by adding and subtracting from an existing selection - much like the tools that you are already used to, if you work with image editing programs. Hold your shift key to add, option/alt to subtract.<br></li><li>Now, you can also upload datasets using a URL, without needing to download them. Same rules apply - it can be any <code>.csv</code>, <code>.tsv</code> or <code>.json</code>, as long as it’s properly formatted. That will come in handy if you are using data lasso with public datasets that are available online, or if you are working with systems like Hive that provide a link to your query results.<br></li></ul><h2><b>Reworked Internals</b></h2>\n\n<p>A lot was changed under the 3 dimensional hood of Data Lasso.</p>\n\n<ul><li>Architecture now follows principles of Flux (a fitting approach for a complex <a href=\"https://css-tricks.com/poll-results-front-end-front-end/\" target=\"_blank\">front-end</a> application like Data Lasso) and its interface is now powered by React. These two things help to reduce the complexity a lot. More on moving to Flux + React in a blog post to follow.<br></li><li>The build process was moved to Webpack and was simplified a lot. Webpack loaders also allowed us to have <code>.hlsl</code> files in the codebase for the first time - so we no longer had to rely on workarounds to include the vertex and fragment shaders that Data Lasso relies on for utilizing GPU.<br></li></ul><p>It won’t be a major version bump, of course, if it did not contain backwards incompatible changes. With a move to Flux, the event bus was deprecated. So if you are using Data Lasso inside your app and rely on events for interacting with it, you will have to switch to using Store and Dispatcher instead. It is good in the long term - as it provides so much more clarity into what’s going on inside Data Lasso.</p>\n\n<p>That should be it! Overall, 2.0 is a solid release that adds new fundamental functionality, while allowing for future work to go smoother. As usual, if you encounter a problem - open an issue on the <a href=\"https://github.com/tumblr/data-lasso\" target=\"_blank\">repository</a>.</p>","content":"<p>Data Lasso, Tumblr&rsquo;s three-dimensional visualization tool, just got a serious upgrade. Along with a version bump to 2.x, Data Lasso now has some handy new features (as well as completely reworked internals). A GIF is worth a thousand words:</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/c3b58cdff0d160d03b6f8d392f693d72/tumblr_inline_o72k4nT2om1rnmbe6_540.gif\" class=\"\"/></figure><p>Quick refresher: Data Lasso is a visualization tool that Tumblr built that allows us to look at large multi-dimensional data sets quickly. If you haven&rsquo;t tried it yet, check out the hosted version <a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">here</a>.</p>\n\n<h2><b>New stuff</b></h2>\n\n<ul><li>Data Lasso is built on the premise of being able to quickly visualize data and select a subset of interest, using a lasso-like tool. That tool just became much more flexible. Now, you will be able to make complex selections by adding and subtracting from an existing selection - much like the tools that you are already used to, if you work with image editing programs. Hold your shift key to add, option/alt to subtract.<br /></li><li>Now, you can also upload datasets using a URL, without needing to download them. Same rules apply - it can be any <code>.csv</code>, <code>.tsv</code> or <code>.json</code>, as long as it&rsquo;s properly formatted. That will come in handy if you are using data lasso with public datasets that are available online, or if you are working with systems like Hive that provide a link to your query results.<br /></li></ul><h2><b>Reworked Internals</b></h2>\n\n<p>A lot was changed under the 3 dimensional hood of Data Lasso.</p>\n\n<ul><li>Architecture now follows principles of Flux (a fitting approach for a complex <a href=\"https://css-tricks.com/poll-results-front-end-front-end/\" target=\"_blank\">front-end</a> application like Data Lasso) and its interface is now powered by React. These two things help to reduce the complexity a lot. More on moving to Flux + React in a blog post to follow.<br /></li><li>The build process was moved to Webpack and was simplified a lot. Webpack loaders also allowed us to have <code>.hlsl</code> files in the codebase for the first time - so we no longer had to rely on workarounds to include the vertex and fragment shaders that Data Lasso relies on for utilizing GPU.<br /></li></ul><p>It won&rsquo;t be a major version bump, of course, if it did not contain backwards incompatible changes. With a move to Flux, the event bus was deprecated. So if you are using Data Lasso inside your app and rely on events for interacting with it, you will have to switch to using Store and Dispatcher instead. It is good in the long term - as it provides so much more clarity into what&rsquo;s going on inside Data Lasso.</p>\n\n<p>That should be it! Overall, 2.0 is a solid release that adds new fundamental functionality, while allowing for future work to go smoother. As usual, if you encounter a problem - open an issue on the <a href=\"https://github.com/tumblr/data-lasso\" target=\"_blank\">repository</a>.</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"photo","blog_name":"javascript","id":143583264647,"post_url":"https://javascript.tumblr.com/post/143583264647/here-at-tumblr-we-use-a-js-bundler-to-compile-our","slug":"here-at-tumblr-we-use-a-js-bundler-to-compile-our","date":"2016-04-29 14:32:19 GMT","timestamp":1461940339,"state":"published","format":"html","reblog_key":"9P1EVuer","tags":["javascript","browserify","webpack"],"short_url":"https://tmblr.co/ZAczzi25kEh_7","summary":"Here at Tumblr, we use a JS bundler to compile our client-side code. As time went by, we started to feel the very real effects...","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":90,"caption":"<p>Here at Tumblr, we use a JS bundler to compile our client-side code. As time went by, we started to feel the very real effects of <a href=\"https://en.wikipedia.org/wiki/Software_rot\" target=\"_blank\">bit rot</a> in the form increasingly slow build times and the realization that were were 9 major versions behind on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> with no straightforward way to upgrade.</p><p>We decided to take a fresh look at our process and give <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> a try. We laughed, we cried, <b>we saved a bunch of time on our builds</b>.<!-- more --></p><hr><p>About two years ago, Tumblr embarked on a journey to create and apply cohesive clientside architecture to the website. Our Product Engineers had lived without things like JS bundling, <code>npm</code> libraries, and CSS preprocessors, and a <i>lingua franca</i> for application-level functionalities to share between Product teams was a considerable step forward for our codebase.</p><p>One of the things that came out of this initiative was our use of Browserify to create JavaScript bundles that used <code>npm</code> modules as well as our own libraries. Suddenly, we had a straightforward way to share classes and utilities without polluting the global namespace! We decided on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> for building and <a href=\"http://gulpjs.com/\" target=\"_blank\">Gulp</a> as our taskrunner.</p><p>We decided early on that we wouldn&rsquo;t just start from scratch and rewrite the entire site, but rather we would pull things over piecemeal from the <b>old way</b> to the <b>new way</b>. We needed a way of splitting code between various pages on the site during this transition. Thus, &ldquo;contexts&rdquo; were born.</p><p>A <b>context bundle</b> is essentially a mini Single Page App. For example, the dashboard is a context. The search page is a different context. The help docs are a different context. Each distinct context meant a different set of JS and CSS build artifacts, which meant a Browserify build for each.</p><p>These contexts were still sharing plenty of code between them, particularly vendor libraries, which necessitated another bundle to avoid code duplication (and downloading identical code). We used a <b>vendor bundle</b> to address this. Another Browserify build! We manually maintained a list of modules that would be kept in the vendor bundle so the context bundle builds would know not to include them.</p><h2><b>The Browserify build process</b></h2><p>Fast forward a year or so and we had added the <b>header bundle</b>, which loaded above the fold, and <b>standalone bundles</b>, which are entirely self-contained and don&rsquo;t rely on the full vendor bundle. Our builds had turned into something like this (and this isn&rsquo;t even including CSS):</p><pre><code class=\"nohighlight\">Browserify\n ├─ Header *\n ├─ Vendor *\n ├─ Context\n │   ├─ Default *\n │   ├─ Dashboard *\n │   ├─ Search *\n │   ├─ Explore *\n │   └─ ...\n └─ Standalone\n     ├─ Blog Network *\n     ├─ Mobile Web *\n     ├─ Share Button *\n     ├─ Embed-A-Post *\n     └─ ...\n</code></pre><p>Each starred thing up there was a separate Browserify build, and it got slower every time there was a new context or standalone bundle. Furthermore, the version of Browserify we were using was falling further out of date, because newer versions were even slower in our case. One engineer created a system to parallelize <code>gulp</code> tasks using the <a href=\"https://nodejs.org/api/cluster.html\" target=\"_blank\"><code>cluster</code></a>, which sped things up and had the added benefit of turning our boxes into loud, fan-spinning space heaters.</p><h2><b>Rethinking the build</b></h2><p>Luckily, we <i>did</i> have an idea why things were so slow. Many modules were shared across contexts, but not in the vendor bundle, and our builds parsed them repeatedly. Browserify couldn&rsquo;t share cached information about these modules across build processes. We could have fixed that by passing multiple entry points into Browserify, but that required <b>rewriting our JS build scripts entirely</b>, which was way too scary.</p><p>In the meantime while we were furrowing our brows at the situation we were in, <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> was emerging as a popular new solution to bundling. It had some neat features that weren&rsquo;t in Browserify, or not as easy to configure. We were particularly interested in automatic bundle splitting, async loading, and hot reloading. One engineer had looked into it early on, but some of the magic in our Browserify configuration didn&rsquo;t translate over easily. We shelved it.</p><h2><b>From Browserify to Webpack</b></h2><p>At this point, our backs were against the wall. Our build process was so fucked up that we really had nothing to lose by trying something completely different except time.</p><p>&ldquo;Okay, fine. Where do I sign up?&rdquo;</p><h2>Baby steps</h2><p>The first step was trying to get something building in Webpack. Since we were still committed to using Gulp, we opted for <a href=\"https://www.npmjs.com/package/webpack-stream\" target=\"_blank\"><code>webpack-stream</code></a>. I tossed together a basic Webpack configuration and tried it.</p><p>We encountered problems immediately. Each of our context bundles used a &ldquo;bootloader&rdquo; to kick off the bundled JS with some bootstrapped data generated by the server. Being able to do <code>require('context')</code> and pass in the bootstrap data in an inline <code>&lt;script&gt;</code> tag seemed like a convenient way to share code, but we ended up with a circular <code>require</code> and this little slice of evil in our Browserify configuration:</p><pre><code class=\"javascript\">{\n  expose: 'context',\n  // ...\n  requireOpts: {expose: 'context'},\n}\n</code></pre><p>It seemed like a good idea at first, but it had to go, so it went. We refactored our contexts so that the entry points ran the bootloader immediately rather than exposing it as a static method on the class exported by the context.</p><h2>Loaders</h2><p>The next obstacle was that we overloaded <code>require</code> to include non-JS files and had been relying on Browserify transforms for <a href=\"https://www.npmjs.com/package/jstify\" target=\"_blank\">templates</a> and <a href=\"https://www.npmjs.com/package/sassr\" target=\"_blank\">styles</a>. We needed to handle these using Loaders, the Webpack equivalent to transforms. Fortunately, the Webpack community had already created loaders to handle these cases.</p><p>For styles, we went from using <a href=\"https://www.npmjs.com/package/sassr\" target=\"_blank\"><code>sassr</code></a> to <a href=\"https://www.npmjs.com/package/postcss\" target=\"_blank\"><code>postcss</code></a> and <a href=\"https://www.npmjs.com/package/autoprefixer\" target=\"_blank\"><code>autoprefixer</code></a> to <a href=\"https://npmjs.com/package/style-loader\" target=\"_blank\"><code>style-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/css-loader\" target=\"_blank\"><code>css-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/postcss-loader\" target=\"_blank\"><code>postcss-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/sass-loader\" target=\"_blank\"><code>sass-loader</code></a>.</p><p>For HTML templates, we went from using <a href=\"https://www.npmjs.com/package/jstify\" target=\"_blank\"><code>jstify</code></a> to <a href=\"https://www.npmjs.com/package/underscore-template-loader\" target=\"_blank\"><code>underscore-template-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/html-minfiier-loader\" target=\"_blank\"><code>html-minifier-loader</code></a>.</p><p>Whereas our Browserify transforms did several things at once (loading the file, postprocessing, converting to a JS module), Webpack Loaders tend to be chainable single-purpose steps that allow the same end result.</p><h2>Bundling and splitting</h2><p>We used bundle splitting in Browserify, but <b>it was a manual process</b> that required separate per-bundle build scripts and a list of modules.</p><p>This isn&rsquo;t the exact code we used, but in was essentially something like this:</p><p><b>Header bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar requires = ['some-config'];\nvar externals = [];\nvar bundleOptions = {};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.require('header/index.js');\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p><b>Vendor bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar externals = ['lodash', 'backbone', 'jquery', '...']; // list of vendor dependencies\nvar externals = ['some-config']; // Grab this from the header bundle\nvar bundleOptions = {exposeAll: true};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.require('vendor/index.js');\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p>The <code>exposeAll</code> option <a href=\"https://github.com/substack/node-browserify/issues/1296\" target=\"_blank\">isn&rsquo;t even documented</a>. I couldn&rsquo;t tell you how we discovered it.</p><p><b>Context bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar requires = [];\nvar externals = ['lodash', 'backbone', 'jquery', '...']; // same list of vendor dependencies\nvar bundleOptions = {};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.add('context/*/index.js'); // add instead of require since it's the entry point\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p>Our Browserify build was abstracted into a common class and each of the bundles extended it, so for each bundle, we were effectively listing internal things and external things, tweaking some config options, and then giving the whole thing to gulp to deal with.</p><p><b>Webpack bundle splitting</b></p><p>Automatic bundle splitting was one of the Webpack features we were most excited about. Webpack has a reputation for requiring a lot of configuration, but using the <a href=\"https://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin\" target=\"_blank\"><code>CommonsChunkPlugin</code></a>, we were able to remove a lot of the manual configuration we had been using to maintain the header/vendor/context separation in Browserify.</p><p>Our context bundles were smaller as the automatic code splitting pulled many shared modules into the new <b>global bundle</b>. <i>This would never have been feasible in our Browserify build process.</i> Here&rsquo;s what our configuration started to look like:</p><pre><code class=\"javascript\">{\n  // ...\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      names: [\n        'global',\n        'vendor',\n        'header',\n      ],\n    }),\n  ],\n  entry: _.extend({\n    'global': [],\n    'vendor': [\n        'vendor', // entry point\n        'lodash',\n        'backbone',\n        'jquery',\n        // etc...\n    ],\n    'app/header': [\n        'header', // entry point\n        'some-config',\n    ],\n  }, createEntryPoints('context/*/index.js')),\n  // ...\n}\n</code></pre><p>That <code>createEntryPoints</code> function expanded the glob and created a full mapping of of our context entry points. <code>CommonsChunkPlugin</code> decided if a module was &ldquo;global enough&rdquo; and pulled it into the global bundle. In early tests without the global bundle, we found that a lot of those modules were automatically dropped into the vendor bundle.</p><p>The other interesting thing we found was that the order of modules in the <code>CommonsChunkPlugin</code> options mattered. The last entry was assumed to be the first script loaded on the page. This is important it defines <code>webpackJsonp</code>, which subsequent bundles rely on to communicate with each other.</p><h2>Putting it all together</h2><p>With all of these changes implemented, our builds looked like this:</p><pre><code class=\"nohighlight\">Webpack\n ├─ Context *\n │   ├─ Header\n │   ├─ Vendor\n │   ├─ Global\n │   ├─ Default\n │   ├─ Dashboard\n │   ├─ Search\n │   ├─ Explore\n │   └─ ...\n └─ Standalone *\n     ├─ Blog Network\n     ├─ Mobile Web\n     ├─ Share Button\n     ├─ Embed-A-Post\n     └─ ...\n</code></pre><p>We were down to two build processes, each using multiple entry points, so each process benefitted from sharing parsed modules between those entry points.</p><h2><b>How much faster did it get?</b></h2><p><b>A lot faster.</b> Dev builds took less than a third of the time to run. Production build times were cut in half. Incremental builds using the Webpack watcher were almost instant.</p><p>These build times are a bottleneck in the development process, and by saving hundreds (estimated) of developer-hours, we&rsquo;re freeing up time to work on more features, ship faster, and <a href=\"http://franny.dog\" target=\"_blank\">spend more time with our families</a>.</p><h2><b>So did we need to ditch Browserify to speed things up?</b></h2><p>Maybe, maybe not. The process of migrating our Browserify configuration to Webpack exposed several foolish things we were doing that we could have fixed without switching bundlers. On the other hand, our build scripts are easier to read now because we&rsquo;re using core Webpack features that we accomplished with clever (in the bad way) tricks in Browserify.</p><p>Either way, you can pry chainable loaders out of my cold, dead hands.</p><p>Overall, it&rsquo;s always a good exercise to make sure you still understand the code you&rsquo;re responsible for maintaining. Learning a new tool is fun, but when it improves your development flow as much as it did for us, the proof is, as they say, in the pudding.</p><p>— <a href=\"https://tmblr.co/mYNRRD7c5Zo8ohAJjueduRw\" target=\"_blank\">@keithmcknight</a></p>","caption_abstract":"\n<p>Here at Tumblr, we use a JS bundler to compile our client-side code. As time went by, we started to feel the very real effects of <a href=\"https://en.wikipedia.org/wiki/Software_rot\" target=\"_blank\">bit rot</a> in the form increasingly slow build times and the realization that were were 9 major versions behind on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> with no straightforward way to upgrade.</p>\n<p>We decided to take a fresh look at our process and give <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> a try. We laughed, we cried, <b>we saved a bunch of time on our builds</b>.</p>\n","reblog":{"comment":"<p>Here at Tumblr, we use a JS bundler to compile our client-side code. As time went by, we started to feel the very real effects of <a href=\"https://en.wikipedia.org/wiki/Software_rot\" target=\"_blank\">bit rot</a> in the form increasingly slow build times and the realization that were were 9 major versions behind on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> with no straightforward way to upgrade.</p><p>We decided to take a fresh look at our process and give <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> a try. We laughed, we cried, <b>we saved a bunch of time on our builds</b>.[[MORE]]</p><hr><p>About two years ago, Tumblr embarked on a journey to create and apply cohesive clientside architecture to the website. Our Product Engineers had lived without things like JS bundling, <code>npm</code> libraries, and CSS preprocessors, and a <i>lingua franca</i> for application-level functionalities to share between Product teams was a considerable step forward for our codebase.</p><p>One of the things that came out of this initiative was our use of Browserify to create JavaScript bundles that used <code>npm</code> modules as well as our own libraries. Suddenly, we had a straightforward way to share classes and utilities without polluting the global namespace! We decided on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> for building and <a href=\"http://gulpjs.com/\" target=\"_blank\">Gulp</a> as our taskrunner.</p><p>We decided early on that we wouldn’t just start from scratch and rewrite the entire site, but rather we would pull things over piecemeal from the <b>old way</b> to the <b>new way</b>. We needed a way of splitting code between various pages on the site during this transition. Thus, “contexts” were born.</p><p>A <b>context bundle</b> is essentially a mini Single Page App. For example, the dashboard is a context. The search page is a different context. The help docs are a different context. Each distinct context meant a different set of JS and CSS build artifacts, which meant a Browserify build for each.</p><p>These contexts were still sharing plenty of code between them, particularly vendor libraries, which necessitated another bundle to avoid code duplication (and downloading identical code). We used a <b>vendor bundle</b> to address this. Another Browserify build! We manually maintained a list of modules that would be kept in the vendor bundle so the context bundle builds would know not to include them.</p><h2><b>The Browserify build process</b></h2><p>Fast forward a year or so and we had added the <b>header bundle</b>, which loaded above the fold, and <b>standalone bundles</b>, which are entirely self-contained and don’t rely on the full vendor bundle. Our builds had turned into something like this (and this isn’t even including CSS):</p><pre><code class=\"nohighlight\">Browserify\n ├─ Header *\n ├─ Vendor *\n ├─ Context\n │   ├─ Default *\n │   ├─ Dashboard *\n │   ├─ Search *\n │   ├─ Explore *\n │   └─ ...\n └─ Standalone\n     ├─ Blog Network *\n     ├─ Mobile Web *\n     ├─ Share Button *\n     ├─ Embed-A-Post *\n     └─ ...\n</code></pre><p>Each starred thing up there was a separate Browserify build, and it got slower every time there was a new context or standalone bundle. Furthermore, the version of Browserify we were using was falling further out of date, because newer versions were even slower in our case. One engineer created a system to parallelize <code>gulp</code> tasks using the <a href=\"https://nodejs.org/api/cluster.html\" target=\"_blank\"><code>cluster</code></a>, which sped things up and had the added benefit of turning our boxes into loud, fan-spinning space heaters.</p><h2><b>Rethinking the build</b></h2><p>Luckily, we <i>did</i> have an idea why things were so slow. Many modules were shared across contexts, but not in the vendor bundle, and our builds parsed them repeatedly. Browserify couldn’t share cached information about these modules across build processes. We could have fixed that by passing multiple entry points into Browserify, but that required <b>rewriting our JS build scripts entirely</b>, which was way too scary.</p><p>In the meantime while we were furrowing our brows at the situation we were in, <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> was emerging as a popular new solution to bundling. It had some neat features that weren’t in Browserify, or not as easy to configure. We were particularly interested in automatic bundle splitting, async loading, and hot reloading. One engineer had looked into it early on, but some of the magic in our Browserify configuration didn’t translate over easily. We shelved it.</p><h2><b>From Browserify to Webpack</b></h2><p>At this point, our backs were against the wall. Our build process was so fucked up that we really had nothing to lose by trying something completely different except time.</p><p>“Okay, fine. Where do I sign up?”</p><h2>Baby steps</h2><p>The first step was trying to get something building in Webpack. Since we were still committed to using Gulp, we opted for <a href=\"https://www.npmjs.com/package/webpack-stream\" target=\"_blank\"><code>webpack-stream</code></a>. I tossed together a basic Webpack configuration and tried it.</p><p>We encountered problems immediately. Each of our context bundles used a “bootloader” to kick off the bundled JS with some bootstrapped data generated by the server. Being able to do <code>require('context')</code> and pass in the bootstrap data in an inline <code>&lt;script&gt;</code> tag seemed like a convenient way to share code, but we ended up with a circular <code>require</code> and this little slice of evil in our Browserify configuration:</p><pre><code class=\"javascript\">{\n  expose: 'context',\n  // ...\n  requireOpts: {expose: 'context'},\n}\n</code></pre><p>It seemed like a good idea at first, but it had to go, so it went. We refactored our contexts so that the entry points ran the bootloader immediately rather than exposing it as a static method on the class exported by the context.</p><h2>Loaders</h2><p>The next obstacle was that we overloaded <code>require</code> to include non-JS files and had been relying on Browserify transforms for <a href=\"https://www.npmjs.com/package/jstify\" target=\"_blank\">templates</a> and <a href=\"https://www.npmjs.com/package/sassr\" target=\"_blank\">styles</a>. We needed to handle these using Loaders, the Webpack equivalent to transforms. Fortunately, the Webpack community had already created loaders to handle these cases.</p><p>For styles, we went from using <a href=\"https://www.npmjs.com/package/sassr\" target=\"_blank\"><code>sassr</code></a> to <a href=\"https://www.npmjs.com/package/postcss\" target=\"_blank\"><code>postcss</code></a> and <a href=\"https://www.npmjs.com/package/autoprefixer\" target=\"_blank\"><code>autoprefixer</code></a> to <a href=\"https://npmjs.com/package/style-loader\" target=\"_blank\"><code>style-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/css-loader\" target=\"_blank\"><code>css-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/postcss-loader\" target=\"_blank\"><code>postcss-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/sass-loader\" target=\"_blank\"><code>sass-loader</code></a>.</p><p>For HTML templates, we went from using <a href=\"https://www.npmjs.com/package/jstify\" target=\"_blank\"><code>jstify</code></a> to <a href=\"https://www.npmjs.com/package/underscore-template-loader\" target=\"_blank\"><code>underscore-template-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/html-minfiier-loader\" target=\"_blank\"><code>html-minifier-loader</code></a>.</p><p>Whereas our Browserify transforms did several things at once (loading the file, postprocessing, converting to a JS module), Webpack Loaders tend to be chainable single-purpose steps that allow the same end result.</p><h2>Bundling and splitting</h2><p>We used bundle splitting in Browserify, but <b>it was a manual process</b> that required separate per-bundle build scripts and a list of modules.</p><p>This isn’t the exact code we used, but in was essentially something like this:</p><p><b>Header bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar requires = ['some-config'];\nvar externals = [];\nvar bundleOptions = {};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.require('header/index.js');\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p><b>Vendor bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar externals = ['lodash', 'backbone', 'jquery', '...']; // list of vendor dependencies\nvar externals = ['some-config']; // Grab this from the header bundle\nvar bundleOptions = {exposeAll: true};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.require('vendor/index.js');\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p>The <code>exposeAll</code> option <a href=\"https://github.com/substack/node-browserify/issues/1296\" target=\"_blank\">isn’t even documented</a>. I couldn’t tell you how we discovered it.</p><p><b>Context bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar requires = [];\nvar externals = ['lodash', 'backbone', 'jquery', '...']; // same list of vendor dependencies\nvar bundleOptions = {};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.add('context/*/index.js'); // add instead of require since it's the entry point\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p>Our Browserify build was abstracted into a common class and each of the bundles extended it, so for each bundle, we were effectively listing internal things and external things, tweaking some config options, and then giving the whole thing to gulp to deal with.</p><p><b>Webpack bundle splitting</b></p><p>Automatic bundle splitting was one of the Webpack features we were most excited about. Webpack has a reputation for requiring a lot of configuration, but using the <a href=\"https://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin\" target=\"_blank\"><code>CommonsChunkPlugin</code></a>, we were able to remove a lot of the manual configuration we had been using to maintain the header/vendor/context separation in Browserify.</p><p>Our context bundles were smaller as the automatic code splitting pulled many shared modules into the new <b>global bundle</b>. <i>This would never have been feasible in our Browserify build process.</i> Here’s what our configuration started to look like:</p><pre><code class=\"javascript\">{\n  // ...\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      names: [\n        'global',\n        'vendor',\n        'header',\n      ],\n    }),\n  ],\n  entry: _.extend({\n    'global': [],\n    'vendor': [\n        'vendor', // entry point\n        'lodash',\n        'backbone',\n        'jquery',\n        // etc...\n    ],\n    'app/header': [\n        'header', // entry point\n        'some-config',\n    ],\n  }, createEntryPoints('context/*/index.js')),\n  // ...\n}\n</code></pre><p>That <code>createEntryPoints</code> function expanded the glob and created a full mapping of of our context entry points. <code>CommonsChunkPlugin</code> decided if a module was “global enough” and pulled it into the global bundle. In early tests without the global bundle, we found that a lot of those modules were automatically dropped into the vendor bundle.</p><p>The other interesting thing we found was that the order of modules in the <code>CommonsChunkPlugin</code> options mattered. The last entry was assumed to be the first script loaded on the page. This is important it defines <code>webpackJsonp</code>, which subsequent bundles rely on to communicate with each other.</p><h2>Putting it all together</h2><p>With all of these changes implemented, our builds looked like this:</p><pre><code class=\"nohighlight\">Webpack\n ├─ Context *\n │   ├─ Header\n │   ├─ Vendor\n │   ├─ Global\n │   ├─ Default\n │   ├─ Dashboard\n │   ├─ Search\n │   ├─ Explore\n │   └─ ...\n └─ Standalone *\n     ├─ Blog Network\n     ├─ Mobile Web\n     ├─ Share Button\n     ├─ Embed-A-Post\n     └─ ...\n</code></pre><p>We were down to two build processes, each using multiple entry points, so each process benefitted from sharing parsed modules between those entry points.</p><h2><b>How much faster did it get?</b></h2><p><b>A lot faster.</b> Dev builds took less than a third of the time to run. Production build times were cut in half. Incremental builds using the Webpack watcher were almost instant.</p><p>These build times are a bottleneck in the development process, and by saving hundreds (estimated) of developer-hours, we’re freeing up time to work on more features, ship faster, and <a href=\"http://franny.dog\" target=\"_blank\">spend more time with our families</a>.</p><h2><b>So did we need to ditch Browserify to speed things up?</b></h2><p>Maybe, maybe not. The process of migrating our Browserify configuration to Webpack exposed several foolish things we were doing that we could have fixed without switching bundlers. On the other hand, our build scripts are easier to read now because we’re using core Webpack features that we accomplished with clever (in the bad way) tricks in Browserify.</p><p>Either way, you can pry chainable loaders out of my cold, dead hands.</p><p>Overall, it’s always a good exercise to make sure you still understand the code you’re responsible for maintaining. Learning a new tool is fun, but when it improves your development flow as much as it did for us, the proof is, as they say, in the pudding.</p><p>— <a href=\"https://tmblr.co/mYNRRD7c5Zo8ohAJjueduRw\" target=\"_blank\">@keithmcknight</a></p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"143583264647"},"content_raw":"<p>Here at Tumblr, we use a JS bundler to compile our client-side code. As time went by, we started to feel the very real effects of <a href=\"https://en.wikipedia.org/wiki/Software_rot\" target=\"_blank\">bit rot</a> in the form increasingly slow build times and the realization that were were 9 major versions behind on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> with no straightforward way to upgrade.</p><p>We decided to take a fresh look at our process and give <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> a try. We laughed, we cried, <b>we saved a bunch of time on our builds</b>.[[MORE]]</p><hr><p>About two years ago, Tumblr embarked on a journey to create and apply cohesive clientside architecture to the website. Our Product Engineers had lived without things like JS bundling, <code>npm</code> libraries, and CSS preprocessors, and a <i>lingua franca</i> for application-level functionalities to share between Product teams was a considerable step forward for our codebase.</p><p>One of the things that came out of this initiative was our use of Browserify to create JavaScript bundles that used <code>npm</code> modules as well as our own libraries. Suddenly, we had a straightforward way to share classes and utilities without polluting the global namespace! We decided on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> for building and <a href=\"http://gulpjs.com/\" target=\"_blank\">Gulp</a> as our taskrunner.</p><p>We decided early on that we wouldn’t just start from scratch and rewrite the entire site, but rather we would pull things over piecemeal from the <b>old way</b> to the <b>new way</b>. We needed a way of splitting code between various pages on the site during this transition. Thus, “contexts” were born.</p><p>A <b>context bundle</b> is essentially a mini Single Page App. For example, the dashboard is a context. The search page is a different context. The help docs are a different context. Each distinct context meant a different set of JS and CSS build artifacts, which meant a Browserify build for each.</p><p>These contexts were still sharing plenty of code between them, particularly vendor libraries, which necessitated another bundle to avoid code duplication (and downloading identical code). We used a <b>vendor bundle</b> to address this. Another Browserify build! We manually maintained a list of modules that would be kept in the vendor bundle so the context bundle builds would know not to include them.</p><h2><b>The Browserify build process</b></h2><p>Fast forward a year or so and we had added the <b>header bundle</b>, which loaded above the fold, and <b>standalone bundles</b>, which are entirely self-contained and don’t rely on the full vendor bundle. Our builds had turned into something like this (and this isn’t even including CSS):</p><pre><code class=\"nohighlight\">Browserify\n ├─ Header *\n ├─ Vendor *\n ├─ Context\n │   ├─ Default *\n │   ├─ Dashboard *\n │   ├─ Search *\n │   ├─ Explore *\n │   └─ ...\n └─ Standalone\n     ├─ Blog Network *\n     ├─ Mobile Web *\n     ├─ Share Button *\n     ├─ Embed-A-Post *\n     └─ ...\n</code></pre><p>Each starred thing up there was a separate Browserify build, and it got slower every time there was a new context or standalone bundle. Furthermore, the version of Browserify we were using was falling further out of date, because newer versions were even slower in our case. One engineer created a system to parallelize <code>gulp</code> tasks using the <a href=\"https://nodejs.org/api/cluster.html\" target=\"_blank\"><code>cluster</code></a>, which sped things up and had the added benefit of turning our boxes into loud, fan-spinning space heaters.</p><h2><b>Rethinking the build</b></h2><p>Luckily, we <i>did</i> have an idea why things were so slow. Many modules were shared across contexts, but not in the vendor bundle, and our builds parsed them repeatedly. Browserify couldn’t share cached information about these modules across build processes. We could have fixed that by passing multiple entry points into Browserify, but that required <b>rewriting our JS build scripts entirely</b>, which was way too scary.</p><p>In the meantime while we were furrowing our brows at the situation we were in, <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> was emerging as a popular new solution to bundling. It had some neat features that weren’t in Browserify, or not as easy to configure. We were particularly interested in automatic bundle splitting, async loading, and hot reloading. One engineer had looked into it early on, but some of the magic in our Browserify configuration didn’t translate over easily. We shelved it.</p><h2><b>From Browserify to Webpack</b></h2><p>At this point, our backs were against the wall. Our build process was so fucked up that we really had nothing to lose by trying something completely different except time.</p><p>“Okay, fine. Where do I sign up?”</p><h2>Baby steps</h2><p>The first step was trying to get something building in Webpack. Since we were still committed to using Gulp, we opted for <a href=\"https://www.npmjs.com/package/webpack-stream\" target=\"_blank\"><code>webpack-stream</code></a>. I tossed together a basic Webpack configuration and tried it.</p><p>We encountered problems immediately. Each of our context bundles used a “bootloader” to kick off the bundled JS with some bootstrapped data generated by the server. Being able to do <code>require('context')</code> and pass in the bootstrap data in an inline <code>&lt;script&gt;</code> tag seemed like a convenient way to share code, but we ended up with a circular <code>require</code> and this little slice of evil in our Browserify configuration:</p><pre><code class=\"javascript\">{\n  expose: 'context',\n  // ...\n  requireOpts: {expose: 'context'},\n}\n</code></pre><p>It seemed like a good idea at first, but it had to go, so it went. We refactored our contexts so that the entry points ran the bootloader immediately rather than exposing it as a static method on the class exported by the context.</p><h2>Loaders</h2><p>The next obstacle was that we overloaded <code>require</code> to include non-JS files and had been relying on Browserify transforms for <a href=\"https://www.npmjs.com/package/jstify\" target=\"_blank\">templates</a> and <a href=\"https://www.npmjs.com/package/sassr\" target=\"_blank\">styles</a>. We needed to handle these using Loaders, the Webpack equivalent to transforms. Fortunately, the Webpack community had already created loaders to handle these cases.</p><p>For styles, we went from using <a href=\"https://www.npmjs.com/package/sassr\" target=\"_blank\"><code>sassr</code></a> to <a href=\"https://www.npmjs.com/package/postcss\" target=\"_blank\"><code>postcss</code></a> and <a href=\"https://www.npmjs.com/package/autoprefixer\" target=\"_blank\"><code>autoprefixer</code></a> to <a href=\"https://npmjs.com/package/style-loader\" target=\"_blank\"><code>style-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/css-loader\" target=\"_blank\"><code>css-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/postcss-loader\" target=\"_blank\"><code>postcss-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/sass-loader\" target=\"_blank\"><code>sass-loader</code></a>.</p><p>For HTML templates, we went from using <a href=\"https://www.npmjs.com/package/jstify\" target=\"_blank\"><code>jstify</code></a> to <a href=\"https://www.npmjs.com/package/underscore-template-loader\" target=\"_blank\"><code>underscore-template-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/html-minfiier-loader\" target=\"_blank\"><code>html-minifier-loader</code></a>.</p><p>Whereas our Browserify transforms did several things at once (loading the file, postprocessing, converting to a JS module), Webpack Loaders tend to be chainable single-purpose steps that allow the same end result.</p><h2>Bundling and splitting</h2><p>We used bundle splitting in Browserify, but <b>it was a manual process</b> that required separate per-bundle build scripts and a list of modules.</p><p>This isn’t the exact code we used, but in was essentially something like this:</p><p><b>Header bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar requires = ['some-config'];\nvar externals = [];\nvar bundleOptions = {};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.require('header/index.js');\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p><b>Vendor bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar externals = ['lodash', 'backbone', 'jquery', '...']; // list of vendor dependencies\nvar externals = ['some-config']; // Grab this from the header bundle\nvar bundleOptions = {exposeAll: true};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.require('vendor/index.js');\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p>The <code>exposeAll</code> option <a href=\"https://github.com/substack/node-browserify/issues/1296\" target=\"_blank\">isn’t even documented</a>. I couldn’t tell you how we discovered it.</p><p><b>Context bundle</b></p><pre><code class=\"javascript\">var browserifyInstance = browserify();\nvar requires = [];\nvar externals = ['lodash', 'backbone', 'jquery', '...']; // same list of vendor dependencies\nvar bundleOptions = {};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.add('context/*/index.js'); // add instead of require since it's the entry point\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p>Our Browserify build was abstracted into a common class and each of the bundles extended it, so for each bundle, we were effectively listing internal things and external things, tweaking some config options, and then giving the whole thing to gulp to deal with.</p><p><b>Webpack bundle splitting</b></p><p>Automatic bundle splitting was one of the Webpack features we were most excited about. Webpack has a reputation for requiring a lot of configuration, but using the <a href=\"https://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin\" target=\"_blank\"><code>CommonsChunkPlugin</code></a>, we were able to remove a lot of the manual configuration we had been using to maintain the header/vendor/context separation in Browserify.</p><p>Our context bundles were smaller as the automatic code splitting pulled many shared modules into the new <b>global bundle</b>. <i>This would never have been feasible in our Browserify build process.</i> Here’s what our configuration started to look like:</p><pre><code class=\"javascript\">{\n  // ...\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      names: [\n        'global',\n        'vendor',\n        'header',\n      ],\n    }),\n  ],\n  entry: _.extend({\n    'global': [],\n    'vendor': [\n        'vendor', // entry point\n        'lodash',\n        'backbone',\n        'jquery',\n        // etc...\n    ],\n    'app/header': [\n        'header', // entry point\n        'some-config',\n    ],\n  }, createEntryPoints('context/*/index.js')),\n  // ...\n}\n</code></pre><p>That <code>createEntryPoints</code> function expanded the glob and created a full mapping of of our context entry points. <code>CommonsChunkPlugin</code> decided if a module was “global enough” and pulled it into the global bundle. In early tests without the global bundle, we found that a lot of those modules were automatically dropped into the vendor bundle.</p><p>The other interesting thing we found was that the order of modules in the <code>CommonsChunkPlugin</code> options mattered. The last entry was assumed to be the first script loaded on the page. This is important it defines <code>webpackJsonp</code>, which subsequent bundles rely on to communicate with each other.</p><h2>Putting it all together</h2><p>With all of these changes implemented, our builds looked like this:</p><pre><code class=\"nohighlight\">Webpack\n ├─ Context *\n │   ├─ Header\n │   ├─ Vendor\n │   ├─ Global\n │   ├─ Default\n │   ├─ Dashboard\n │   ├─ Search\n │   ├─ Explore\n │   └─ ...\n └─ Standalone *\n     ├─ Blog Network\n     ├─ Mobile Web\n     ├─ Share Button\n     ├─ Embed-A-Post\n     └─ ...\n</code></pre><p>We were down to two build processes, each using multiple entry points, so each process benefitted from sharing parsed modules between those entry points.</p><h2><b>How much faster did it get?</b></h2><p><b>A lot faster.</b> Dev builds took less than a third of the time to run. Production build times were cut in half. Incremental builds using the Webpack watcher were almost instant.</p><p>These build times are a bottleneck in the development process, and by saving hundreds (estimated) of developer-hours, we’re freeing up time to work on more features, ship faster, and <a href=\"http://franny.dog\" target=\"_blank\">spend more time with our families</a>.</p><h2><b>So did we need to ditch Browserify to speed things up?</b></h2><p>Maybe, maybe not. The process of migrating our Browserify configuration to Webpack exposed several foolish things we were doing that we could have fixed without switching bundlers. On the other hand, our build scripts are easier to read now because we’re using core Webpack features that we accomplished with clever (in the bad way) tricks in Browserify.</p><p>Either way, you can pry chainable loaders out of my cold, dead hands.</p><p>Overall, it’s always a good exercise to make sure you still understand the code you’re responsible for maintaining. Learning a new tool is fun, but when it improves your development flow as much as it did for us, the proof is, as they say, in the pudding.</p><p>— <a href=\"https://tmblr.co/mYNRRD7c5Zo8ohAJjueduRw\" target=\"_blank\">@keithmcknight</a></p>","content":"<p>Here at Tumblr, we use a JS bundler to compile our client-side code. As time went by, we started to feel the very real effects of <a href=\"https://en.wikipedia.org/wiki/Software_rot\" target=\"_blank\">bit rot</a> in the form increasingly slow build times and the realization that were were 9 major versions behind on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> with no straightforward way to upgrade.</p><p>We decided to take a fresh look at our process and give <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> a try. We laughed, we cried, <b>we saved a bunch of time on our builds</b>.</p><hr /><p>About two years ago, Tumblr embarked on a journey to create and apply cohesive clientside architecture to the website. Our Product Engineers had lived without things like JS bundling, <code>npm</code> libraries, and CSS preprocessors, and a <i>lingua franca</i> for application-level functionalities to share between Product teams was a considerable step forward for our codebase.</p><p>One of the things that came out of this initiative was our use of Browserify to create JavaScript bundles that used <code>npm</code> modules as well as our own libraries. Suddenly, we had a straightforward way to share classes and utilities without polluting the global namespace! We decided on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> for building and <a href=\"http://gulpjs.com/\" target=\"_blank\">Gulp</a> as our taskrunner.</p><p>We decided early on that we wouldn&rsquo;t just start from scratch and rewrite the entire site, but rather we would pull things over piecemeal from the <b>old way</b> to the <b>new way</b>. We needed a way of splitting code between various pages on the site during this transition. Thus, &ldquo;contexts&rdquo; were born.</p><p>A <b>context bundle</b> is essentially a mini Single Page App. For example, the dashboard is a context. The search page is a different context. The help docs are a different context. Each distinct context meant a different set of JS and CSS build artifacts, which meant a Browserify build for each.</p><p>These contexts were still sharing plenty of code between them, particularly vendor libraries, which necessitated another bundle to avoid code duplication (and downloading identical code). We used a <b>vendor bundle</b> to address this. Another Browserify build! We manually maintained a list of modules that would be kept in the vendor bundle so the context bundle builds would know not to include them.</p><h2><b>The Browserify build process</b></h2><p>Fast forward a year or so and we had added the <b>header bundle</b>, which loaded above the fold, and <b>standalone bundles</b>, which are entirely self-contained and don&rsquo;t rely on the full vendor bundle. Our builds had turned into something like this (and this isn&rsquo;t even including CSS):</p><pre><code>Browserify\n &#9500;&#9472; Header *\n &#9500;&#9472; Vendor *\n &#9500;&#9472; Context\n &#9474;   &#9500;&#9472; Default *\n &#9474;   &#9500;&#9472; Dashboard *\n &#9474;   &#9500;&#9472; Search *\n &#9474;   &#9500;&#9472; Explore *\n &#9474;   &#9492;&#9472; ...\n &#9492;&#9472; Standalone\n     &#9500;&#9472; Blog Network *\n     &#9500;&#9472; Mobile Web *\n     &#9500;&#9472; Share Button *\n     &#9500;&#9472; Embed-A-Post *\n     &#9492;&#9472; ...\n</code></pre><p>Each starred thing up there was a separate Browserify build, and it got slower every time there was a new context or standalone bundle. Furthermore, the version of Browserify we were using was falling further out of date, because newer versions were even slower in our case. One engineer created a system to parallelize <code>gulp</code> tasks using the <a href=\"https://nodejs.org/api/cluster.html\" target=\"_blank\"><code>cluster</code></a>, which sped things up and had the added benefit of turning our boxes into loud, fan-spinning space heaters.</p><h2><b>Rethinking the build</b></h2><p>Luckily, we <i>did</i> have an idea why things were so slow. Many modules were shared across contexts, but not in the vendor bundle, and our builds parsed them repeatedly. Browserify couldn&rsquo;t share cached information about these modules across build processes. We could have fixed that by passing multiple entry points into Browserify, but that required <b>rewriting our JS build scripts entirely</b>, which was way too scary.</p><p>In the meantime while we were furrowing our brows at the situation we were in, <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> was emerging as a popular new solution to bundling. It had some neat features that weren&rsquo;t in Browserify, or not as easy to configure. We were particularly interested in automatic bundle splitting, async loading, and hot reloading. One engineer had looked into it early on, but some of the magic in our Browserify configuration didn&rsquo;t translate over easily. We shelved it.</p><h2><b>From Browserify to Webpack</b></h2><p>At this point, our backs were against the wall. Our build process was so fucked up that we really had nothing to lose by trying something completely different except time.</p><p>&ldquo;Okay, fine. Where do I sign up?&rdquo;</p><h2>Baby steps</h2><p>The first step was trying to get something building in Webpack. Since we were still committed to using Gulp, we opted for <a href=\"https://www.npmjs.com/package/webpack-stream\" target=\"_blank\"><code>webpack-stream</code></a>. I tossed together a basic Webpack configuration and tried it.</p><p>We encountered problems immediately. Each of our context bundles used a &ldquo;bootloader&rdquo; to kick off the bundled JS with some bootstrapped data generated by the server. Being able to do <code>require('context')</code> and pass in the bootstrap data in an inline <code>&lt;script&gt;</code> tag seemed like a convenient way to share code, but we ended up with a circular <code>require</code> and this little slice of evil in our Browserify configuration:</p><pre><code>{\n  expose: 'context',\n  // ...\n  requireOpts: {expose: 'context'},\n}\n</code></pre><p>It seemed like a good idea at first, but it had to go, so it went. We refactored our contexts so that the entry points ran the bootloader immediately rather than exposing it as a static method on the class exported by the context.</p><h2>Loaders</h2><p>The next obstacle was that we overloaded <code>require</code> to include non-JS files and had been relying on Browserify transforms for <a href=\"https://www.npmjs.com/package/jstify\" target=\"_blank\">templates</a> and <a href=\"https://www.npmjs.com/package/sassr\" target=\"_blank\">styles</a>. We needed to handle these using Loaders, the Webpack equivalent to transforms. Fortunately, the Webpack community had already created loaders to handle these cases.</p><p>For styles, we went from using <a href=\"https://www.npmjs.com/package/sassr\" target=\"_blank\"><code>sassr</code></a> to <a href=\"https://www.npmjs.com/package/postcss\" target=\"_blank\"><code>postcss</code></a> and <a href=\"https://www.npmjs.com/package/autoprefixer\" target=\"_blank\"><code>autoprefixer</code></a> to <a href=\"https://npmjs.com/package/style-loader\" target=\"_blank\"><code>style-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/css-loader\" target=\"_blank\"><code>css-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/postcss-loader\" target=\"_blank\"><code>postcss-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/sass-loader\" target=\"_blank\"><code>sass-loader</code></a>.</p><p>For HTML templates, we went from using <a href=\"https://www.npmjs.com/package/jstify\" target=\"_blank\"><code>jstify</code></a> to <a href=\"https://www.npmjs.com/package/underscore-template-loader\" target=\"_blank\"><code>underscore-template-loader</code></a><code>!</code><a href=\"https://www.npmjs.com/package/html-minfiier-loader\" target=\"_blank\"><code>html-minifier-loader</code></a>.</p><p>Whereas our Browserify transforms did several things at once (loading the file, postprocessing, converting to a JS module), Webpack Loaders tend to be chainable single-purpose steps that allow the same end result.</p><h2>Bundling and splitting</h2><p>We used bundle splitting in Browserify, but <b>it was a manual process</b> that required separate per-bundle build scripts and a list of modules.</p><p>This isn&rsquo;t the exact code we used, but in was essentially something like this:</p><p><b>Header bundle</b></p><pre><code>var browserifyInstance = browserify();\nvar requires = ['some-config'];\nvar externals = [];\nvar bundleOptions = {};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.require('header/index.js');\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p><b>Vendor bundle</b></p><pre><code>var browserifyInstance = browserify();\nvar externals = ['lodash', 'backbone', 'jquery', '...']; // list of vendor dependencies\nvar externals = ['some-config']; // Grab this from the header bundle\nvar bundleOptions = {exposeAll: true};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.require('vendor/index.js');\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p>The <code>exposeAll</code> option <a href=\"https://github.com/substack/node-browserify/issues/1296\" target=\"_blank\">isn&rsquo;t even documented</a>. I couldn&rsquo;t tell you how we discovered it.</p><p><b>Context bundle</b></p><pre><code>var browserifyInstance = browserify();\nvar requires = [];\nvar externals = ['lodash', 'backbone', 'jquery', '...']; // same list of vendor dependencies\nvar bundleOptions = {};\nrequires.forEach(function(requireModule) {\n  browserifyInstance.require(requireModule);\n});\nexternals.forEach(function(externalModule) {\n  browserifyInstance.require(externalModule);\n});\nbrowserifyInstance.add('context/*/index.js'); // add instead of require since it's the entry point\nbrowserifyInstance.bundle(bundleOptions);\n</code></pre><p>Our Browserify build was abstracted into a common class and each of the bundles extended it, so for each bundle, we were effectively listing internal things and external things, tweaking some config options, and then giving the whole thing to gulp to deal with.</p><p><b>Webpack bundle splitting</b></p><p>Automatic bundle splitting was one of the Webpack features we were most excited about. Webpack has a reputation for requiring a lot of configuration, but using the <a href=\"https://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin\" target=\"_blank\"><code>CommonsChunkPlugin</code></a>, we were able to remove a lot of the manual configuration we had been using to maintain the header/vendor/context separation in Browserify.</p><p>Our context bundles were smaller as the automatic code splitting pulled many shared modules into the new <b>global bundle</b>. <i>This would never have been feasible in our Browserify build process.</i> Here&rsquo;s what our configuration started to look like:</p><pre><code>{\n  // ...\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      names: [\n        'global',\n        'vendor',\n        'header',\n      ],\n    }),\n  ],\n  entry: _.extend({\n    'global': [],\n    'vendor': [\n        'vendor', // entry point\n        'lodash',\n        'backbone',\n        'jquery',\n        // etc...\n    ],\n    'app/header': [\n        'header', // entry point\n        'some-config',\n    ],\n  }, createEntryPoints('context/*/index.js')),\n  // ...\n}\n</code></pre><p>That <code>createEntryPoints</code> function expanded the glob and created a full mapping of of our context entry points. <code>CommonsChunkPlugin</code> decided if a module was &ldquo;global enough&rdquo; and pulled it into the global bundle. In early tests without the global bundle, we found that a lot of those modules were automatically dropped into the vendor bundle.</p><p>The other interesting thing we found was that the order of modules in the <code>CommonsChunkPlugin</code> options mattered. The last entry was assumed to be the first script loaded on the page. This is important it defines <code>webpackJsonp</code>, which subsequent bundles rely on to communicate with each other.</p><h2>Putting it all together</h2><p>With all of these changes implemented, our builds looked like this:</p><pre><code>Webpack\n &#9500;&#9472; Context *\n &#9474;   &#9500;&#9472; Header\n &#9474;   &#9500;&#9472; Vendor\n &#9474;   &#9500;&#9472; Global\n &#9474;   &#9500;&#9472; Default\n &#9474;   &#9500;&#9472; Dashboard\n &#9474;   &#9500;&#9472; Search\n &#9474;   &#9500;&#9472; Explore\n &#9474;   &#9492;&#9472; ...\n &#9492;&#9472; Standalone *\n     &#9500;&#9472; Blog Network\n     &#9500;&#9472; Mobile Web\n     &#9500;&#9472; Share Button\n     &#9500;&#9472; Embed-A-Post\n     &#9492;&#9472; ...\n</code></pre><p>We were down to two build processes, each using multiple entry points, so each process benefitted from sharing parsed modules between those entry points.</p><h2><b>How much faster did it get?</b></h2><p><b>A lot faster.</b> Dev builds took less than a third of the time to run. Production build times were cut in half. Incremental builds using the Webpack watcher were almost instant.</p><p>These build times are a bottleneck in the development process, and by saving hundreds (estimated) of developer-hours, we&rsquo;re freeing up time to work on more features, ship faster, and <a href=\"http://franny.dog\" target=\"_blank\">spend more time with our families</a>.</p><h2><b>So did we need to ditch Browserify to speed things up?</b></h2><p>Maybe, maybe not. The process of migrating our Browserify configuration to Webpack exposed several foolish things we were doing that we could have fixed without switching bundlers. On the other hand, our build scripts are easier to read now because we&rsquo;re using core Webpack features that we accomplished with clever (in the bad way) tricks in Browserify.</p><p>Either way, you can pry chainable loaders out of my cold, dead hands.</p><p>Overall, it&rsquo;s always a good exercise to make sure you still understand the code you&rsquo;re responsible for maintaining. Learning a new tool is fun, but when it improves your development flow as much as it did for us, the proof is, as they say, in the pudding.</p><p>&mdash; <a href=\"https://tmblr.co/mYNRRD7c5Zo8ohAJjueduRw\" target=\"_blank\">@keithmcknight</a></p>","content_abstract":"<p>\n<p>Here at Tumblr, we use a JS bundler to compile our client-side code. As time went by, we started to feel the very real effects of <a href=\"https://en.wikipedia.org/wiki/Software_rot\" target=\"_blank\">bit rot</a> in the form increasingly slow build times and the realization that were were 9 major versions behind on <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> with no straightforward way to upgrade.</p>\n<p>We decided to take a fresh look at our process and give <a href=\"https://webpack.github.io/\" target=\"_blank\">Webpack</a> a try. We laughed, we cried, <b>we saved a bunch of time on our builds</b>.</p>\n</p>","is_current_item":true,"is_root_item":true}],"image_permalink":"https://javascript.tumblr.com/image/143583264647","photos":[{"caption":"","original_size":{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_1280.png","width":1280,"height":880},"alt_sizes":[{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_1280.png","width":1280,"height":880},{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_640.png","width":640,"height":440},{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_540.png","width":540,"height":371},{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_500.png","width":500,"height":344},{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_400.png","width":400,"height":275},{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_250.png","width":250,"height":172},{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_100.png","width":100,"height":69},{"url":"https://78.media.tumblr.com/92a60a5987e7139cd136be2be95019b9/tumblr_o6d3ls1xAF1ul6kzno1_75sq.png","width":75,"height":75}]}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"photo","blog_name":"javascript","id":142760860437,"post_url":"https://javascript.tumblr.com/post/142760860437/classicprogrammerpaintings-frontend-developers","slug":"classicprogrammerpaintings-frontend-developers","date":"2016-04-13 22:37:29 GMT","timestamp":1460587049,"state":"published","format":"html","reblog_key":"HLhYwHW6","tags":[],"short_url":"https://tmblr.co/ZAczzi24zDTiL","summary":"“Frontend developers approach newly released JS framework” - Michele Cammarano, 1871, oil on canvas\n (collaboration from...","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":194,"caption":"<p><a href=\"http://classicprogrammerpaintings.tumblr.com/post/142631064154/frontend-developers-approach-newly-released-js\" class=\"tumblr_blog\" target=\"_blank\">classicprogrammerpaintings</a>:</p>\n\n<blockquote><p>“Frontend developers approach newly released JS framework” - Michele Cammarano, 1871, oil on canvas</p><p>(collaboration from <a class=\"tumblelog\" href=\"https://tmblr.co/mIRu-p3QZ3qE6pRdRx_IgLA\" target=\"_blank\">@riffraff</a> ) </p></blockquote>","reblog":{"comment":"","tree_html":"<p><a href=\"http://classicprogrammerpaintings.tumblr.com/post/142631064154/frontend-developers-approach-newly-released-js\" class=\"tumblr_blog\" target=\"_blank\">classicprogrammerpaintings</a>:</p><blockquote>\n<p>“Frontend developers approach newly released JS framework” - Michele Cammarano, 1871, oil on canvas</p>\n<p>(collaboration from <a class=\"tumblelog\" href=\"https://tmblr.co/mIRu-p3QZ3qE6pRdRx_IgLA\" target=\"_blank\">@riffraff</a> ) </p>\n</blockquote>"},"trail":[{"blog":{"name":"classicprogrammerpaintings","active":true,"theme":{"avatar_shape":"square","background_color":"#FAFAFA","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://assets.tumblr.com/images/default_header/optica_pattern_07.png?_v=c52eb3e7fd4be5c98b8970b4c330d172","header_image_focused":"https://assets.tumblr.com/images/default_header/optica_pattern_07.png?_v=c52eb3e7fd4be5c98b8970b4c330d172","header_image_scaled":"https://assets.tumblr.com/images/default_header/optica_pattern_07.png?_v=c52eb3e7fd4be5c98b8970b4c330d172","header_stretch":true,"link_color":"#529ECC","show_avatar":true,"show_description":true,"show_header_image":true,"show_title":true,"title_color":"#444444","title_font":"Gibson","title_font_weight":"bold"},"share_likes":true,"share_following":false,"can_be_followed":true},"post":{"id":"142631064154"},"content_raw":"<p>“Frontend developers approach newly released JS framework” - Michele Cammarano, 1871, oil on canvas</p>\n<p>(collaboration from <a class=\"tumblelog\" href=\"https://tmblr.co/mIRu-p3QZ3qE6pRdRx_IgLA\" target=\"_blank\">@riffraff</a> ) </p>","content":"<p>&ldquo;Frontend developers approach newly released JS framework&rdquo; - Michele Cammarano, 1871, oil on canvas</p>\n<p>(collaboration from <a href=\"https://tmblr.co/mIRu-p3QZ3qE6pRdRx_IgLA\" target=\"_blank\">@riffraff</a> )&nbsp;</p>","is_root_item":true}],"image_permalink":"https://javascript.tumblr.com/image/142760860437","photos":[{"caption":"","original_size":{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_1280.jpg","width":1280,"height":880},"alt_sizes":[{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_1280.jpg","width":1280,"height":880},{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_640.jpg","width":640,"height":440},{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_540.jpg","width":540,"height":371},{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_500.jpg","width":500,"height":344},{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_400.jpg","width":400,"height":275},{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_250.jpg","width":250,"height":172},{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_100.jpg","width":100,"height":69},{"url":"https://78.media.tumblr.com/0f1f33b1608703a50464dd9cd7b2a25c/tumblr_o5h45iBgCA1ugyavxo1_75sq.jpg","width":75,"height":75}]}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":140452545132,"post_url":"https://javascript.tumblr.com/post/140452545132/gulp-css-hashes","slug":"gulp-css-hashes","date":"2016-03-04 16:52:55 GMT","timestamp":1457110375,"state":"published","format":"html","reblog_key":"dCnVZSUG","tags":["npm","css","gulp","it's cold here in new york i though it's supposed to be spring"],"short_url":"https://tmblr.co/ZAczzi22pdy9i","summary":"gulp-css-hashes","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":59,"title":"gulp-css-hashes","body":"<p>Believe it or not, but since ancient times engineers at Tumblr have had to manually take care of busting caches for assets referenced in CSS. Do you have to change that png you used as a background in CSS? Bump that awkward &hellip;?57 to be &hellip;?58 so your asset will get properly busted out of the cache and replaced with a new version. How antiquated! How manual!  </p><p>There are a number of options we could have used to automate this process, but we wouldn’t be able to call ourselves <a href=\"http://nodejsreactions.tumblr.com/\" target=\"_blank\">true Web Engineers</a> if we didn’t write our own approach to solve the problem.  (But really, sassiness aside, we did our own thing because nothing existed that worked in quite the robust and simple way that we wanted.)</p><p>So, <a href=\"https://github.com/tumblr/gulp-css-hashes\" target=\"_blank\">gulp-css-hashes</a> was born! (We thought a lot about the name.)</p><p>It’s a simple gulp plugin that you can add into your gulp flow that will go over all url() instances in your CSS and will append hashes to those urls based on md5 of that local file. It’s nicely documented, straightforward in how it works, and configurable enough to fit many use cases. Check it out <a href=\"https://www.npmjs.com/package/gulp-css-hashes\" target=\"_blank\">here</a>!</p>","reblog":{"comment":"<p>Believe it or not, but since ancient times engineers at Tumblr have had to manually take care of busting caches for assets referenced in CSS. Do you have to change that png you used as a background in CSS? Bump that awkward …?57 to be …?58 so your asset will get properly busted out of the cache and replaced with a new version. How antiquated! How manual!  </p><p>There are a number of options we could have used to automate this process, but we wouldn’t be able to call ourselves <a href=\"http://nodejsreactions.tumblr.com/\" target=\"_blank\">true Web Engineers</a> if we didn’t write our own approach to solve the problem.  (But really, sassiness aside, we did our own thing because nothing existed that worked in quite the robust and simple way that we wanted.)</p><p>So, <a href=\"https://github.com/tumblr/gulp-css-hashes\" target=\"_blank\">gulp-css-hashes</a> was born! (We thought a lot about the name.)</p><p>It’s a simple gulp plugin that you can add into your gulp flow that will go over all url() instances in your CSS and will append hashes to those urls based on md5 of that local file. It’s nicely documented, straightforward in how it works, and configurable enough to fit many use cases. Check it out <a href=\"https://www.npmjs.com/package/gulp-css-hashes\" target=\"_blank\">here</a>!</p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"140452545132"},"content_raw":"<p>Believe it or not, but since ancient times engineers at Tumblr have had to manually take care of busting caches for assets referenced in CSS. Do you have to change that png you used as a background in CSS? Bump that awkward …?57 to be …?58 so your asset will get properly busted out of the cache and replaced with a new version. How antiquated! How manual!  </p><p>There are a number of options we could have used to automate this process, but we wouldn’t be able to call ourselves <a href=\"http://nodejsreactions.tumblr.com/\" target=\"_blank\">true Web Engineers</a> if we didn’t write our own approach to solve the problem.  (But really, sassiness aside, we did our own thing because nothing existed that worked in quite the robust and simple way that we wanted.)</p><p>So, <a href=\"https://github.com/tumblr/gulp-css-hashes\" target=\"_blank\">gulp-css-hashes</a> was born! (We thought a lot about the name.)</p><p>It’s a simple gulp plugin that you can add into your gulp flow that will go over all url() instances in your CSS and will append hashes to those urls based on md5 of that local file. It’s nicely documented, straightforward in how it works, and configurable enough to fit many use cases. Check it out <a href=\"https://www.npmjs.com/package/gulp-css-hashes\" target=\"_blank\">here</a>!</p>","content":"<p>Believe it or not, but since ancient times engineers at Tumblr have had to manually take care of busting caches for assets referenced in CSS. Do you have to change that png you used as a background in CSS? Bump that awkward &hellip;?57 to be &hellip;?58 so your asset will get properly busted out of the cache and replaced with a new version. How antiquated! How manual! &nbsp;</p><p>There are a number of options we could have used to automate this process, but we wouldn&rsquo;t be able to call ourselves <a href=\"http://nodejsreactions.tumblr.com/\" target=\"_blank\">true Web Engineers</a> if we didn&rsquo;t write our own approach to solve the problem. &nbsp;(But really, sassiness aside, we did our own thing because nothing existed that worked in quite the robust and simple way that we wanted.)</p><p>So, <a href=\"https://github.com/tumblr/gulp-css-hashes\" target=\"_blank\">gulp-css-hashes</a> was born! (We thought a lot about the name.)</p><p>It&rsquo;s a simple gulp plugin that you can add into your gulp flow that will go over all url() instances in your CSS and will append hashes to those urls based on md5 of that local file. It&rsquo;s nicely documented, straightforward in how it works, and configurable enough to fit many use cases. Check it out&nbsp;<a href=\"https://www.npmjs.com/package/gulp-css-hashes\" target=\"_blank\">here</a>!</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":139610473242,"post_url":"https://javascript.tumblr.com/post/139610473242/moving-things-out-of-critical-rendering-path","slug":"moving-things-out-of-critical-rendering-path","date":"2016-02-19 18:06:47 GMT","timestamp":1455905207,"state":"published","format":"html","reblog_key":"510rucJM","tags":["javascript","tumblr","web","performance"],"short_url":"https://tmblr.co/ZAczzi221RiCQ","summary":"Moving things out of critical rendering path","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":74,"title":"Moving things out of critical rendering path","body":"<h2>Tumblr’s web pages are heavy.</h2><p>Naturally, the heaviest strain on the network comes from the content - filled with heavy gifs and other content. However, we also load embarrassingly large amounts of JavaScript. There is one particularly heavy JavaScript file that contains our vendor libraries (e.g., jQuery, Backbone, etc), which we call the vendor bundle.</p><p>It was loaded right on the top of the page, significantly adding to the <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\" target=\"_blank\">critical rendering path</a>. But we don’t need it there, being one of the first things user loads. Moving the vendor bundle down the page might result in performance gains and a more responsive page load time - all are great goals that Tumblr’s Core Web team is set on accomplishing.</p><p>After a few months of patching ancient, legacy inline scripts, and running performance tests, the script is finally moved to the bottom of the page! Even more, with this effort we decided to really dig into performance - we conducted A/B testing of that move (establishing performance split testing framework along the way) to see what exactly what effect the move would have on our site’s performance.</p><h2>Results</h2><p>Starry eyed and excited to see improvements across the board (that file exists on nearly every page of tumblr, after all) we jumped head on into the data to find ourselves amused and slightly disappointed.</p><p>Turns out, the performance gains that we expected to see from moving a heavy file out of a critical rendering path were not there. The 75th percentile of page load times across the board <i>remained the same</i>. We suspected that analyzing on a more granular would reveal performance gains on certain pages or even certain browsers - but results were pretty uniform. See for yourself - below are boxplots for performance on the dashboard:</p><figure data-orig-width=\"540\" data-orig-height=\"424\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/db2bc2b3b10f12b1708f63701f2bcb94/tumblr_inline_o2t3ivcZpW1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"540\" data-orig-height=\"424\"/></figure><p>Was our approach to taking measurements incorrect? We revisited numbers again and again. We looked into finer detail at various pages. We excluded IE9 after hypothesizing that it might skewing our results. We measured across several metrics that we had at our disposal (we sample actual navigation timings from actual users). Results remained the same.</p><h2>Outcome</h2><p>As much as we were disappointed, we were also glad that we ended up knowing precisely what effect we had on the performance. Oftentimes we take blind faith that best practices will lead to best results, and fail to realize that myriads of factors weigh in on actual outcomes.</p><p>If anything - we learned a lot from this experience. We gained better insight into our codebase and established an approach to measuring performance in future experiments!</p>","reblog":{"comment":"<p><h2>Tumblr’s web pages are heavy.</h2><p>Naturally, the heaviest strain on the network comes from the content - filled with heavy gifs and other content. However, we also load embarrassingly large amounts of JavaScript. There is one particularly heavy JavaScript file that contains our vendor libraries (e.g., jQuery, Backbone, etc), which we call the vendor bundle.</p><p>It was loaded right on the top of the page, significantly adding to the <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\" target=\"_blank\">critical rendering path</a>. But we don’t need it there, being one of the first things user loads. Moving the vendor bundle down the page might result in performance gains and a more responsive page load time - all are great goals that Tumblr’s Core Web team is set on accomplishing.</p><p>After a few months of patching ancient, legacy inline scripts, and running performance tests, the script is finally moved to the bottom of the page! Even more, with this effort we decided to really dig into performance - we conducted A/B testing of that move (establishing performance split testing framework along the way) to see what exactly what effect the move would have on our site’s performance.</p><h2>Results</h2><p>Starry eyed and excited to see improvements across the board (that file exists on nearly every page of tumblr, after all) we jumped head on into the data to find ourselves amused and slightly disappointed.</p><p>Turns out, the performance gains that we expected to see from moving a heavy file out of a critical rendering path were not there. The 75th percentile of page load times across the board <i>remained the same</i>. We suspected that analyzing on a more granular would reveal performance gains on certain pages or even certain browsers - but results were pretty uniform. See for yourself - below are boxplots for performance on the dashboard:</p><figure data-orig-width=\"540\" data-orig-height=\"424\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/db2bc2b3b10f12b1708f63701f2bcb94/tumblr_inline_o2t3ivcZpW1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"540\" data-orig-height=\"424\"></figure><p>Was our approach to taking measurements incorrect? We revisited numbers again and again. We looked into finer detail at various pages. We excluded IE9 after hypothesizing that it might skewing our results. We measured across several metrics that we had at our disposal (we sample actual navigation timings from actual users). Results remained the same.</p><h2>Outcome</h2><p>As much as we were disappointed, we were also glad that we ended up knowing precisely what effect we had on the performance. Oftentimes we take blind faith that best practices will lead to best results, and fail to realize that myriads of factors weigh in on actual outcomes.</p><p>If anything - we learned a lot from this experience. We gained better insight into our codebase and established an approach to measuring performance in future experiments!</p></p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"139610473242"},"content_raw":"<p><h2>Tumblr’s web pages are heavy.</h2><p>Naturally, the heaviest strain on the network comes from the content - filled with heavy gifs and other content. However, we also load embarrassingly large amounts of JavaScript. There is one particularly heavy JavaScript file that contains our vendor libraries (e.g., jQuery, Backbone, etc), which we call the vendor bundle.</p><p>It was loaded right on the top of the page, significantly adding to the <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\" target=\"_blank\">critical rendering path</a>. But we don’t need it there, being one of the first things user loads. Moving the vendor bundle down the page might result in performance gains and a more responsive page load time - all are great goals that Tumblr’s Core Web team is set on accomplishing.</p><p>After a few months of patching ancient, legacy inline scripts, and running performance tests, the script is finally moved to the bottom of the page! Even more, with this effort we decided to really dig into performance - we conducted A/B testing of that move (establishing performance split testing framework along the way) to see what exactly what effect the move would have on our site’s performance.</p><h2>Results</h2><p>Starry eyed and excited to see improvements across the board (that file exists on nearly every page of tumblr, after all) we jumped head on into the data to find ourselves amused and slightly disappointed.</p><p>Turns out, the performance gains that we expected to see from moving a heavy file out of a critical rendering path were not there. The 75th percentile of page load times across the board <i>remained the same</i>. We suspected that analyzing on a more granular would reveal performance gains on certain pages or even certain browsers - but results were pretty uniform. See for yourself - below are boxplots for performance on the dashboard:</p><figure data-orig-width=\"540\" data-orig-height=\"424\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/db2bc2b3b10f12b1708f63701f2bcb94/tumblr_inline_o2t3ivcZpW1rnmbe6_540.png\" alt=\"image\" data-orig-width=\"540\" data-orig-height=\"424\"></figure><p>Was our approach to taking measurements incorrect? We revisited numbers again and again. We looked into finer detail at various pages. We excluded IE9 after hypothesizing that it might skewing our results. We measured across several metrics that we had at our disposal (we sample actual navigation timings from actual users). Results remained the same.</p><h2>Outcome</h2><p>As much as we were disappointed, we were also glad that we ended up knowing precisely what effect we had on the performance. Oftentimes we take blind faith that best practices will lead to best results, and fail to realize that myriads of factors weigh in on actual outcomes.</p><p>If anything - we learned a lot from this experience. We gained better insight into our codebase and established an approach to measuring performance in future experiments!</p></p>","content":"<p><h2>Tumblr&rsquo;s web pages are heavy.</h2><p>Naturally, the heaviest strain on the network comes from the content - filled with heavy gifs and other content. However, we also load embarrassingly large amounts of JavaScript. There is one particularly heavy JavaScript file that contains our vendor libraries (e.g., jQuery, Backbone, etc), which we call the vendor bundle.</p><p>It was loaded right on the top of the page, significantly adding to the <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\" target=\"_blank\">critical rendering path</a>. But we don&rsquo;t need it there, being one of the first things user loads. Moving the vendor bundle down the page might result in performance gains and a more responsive page load time - all are great goals that Tumblr&rsquo;s Core Web team is set on accomplishing.</p><p>After a few months of patching ancient, legacy inline scripts, and running performance tests, the script is finally moved to the bottom of the page! Even more, with this effort we decided to really dig into performance - we conducted A/B testing of that move (establishing performance split testing framework along the way) to see what exactly what effect the move would have on our site&rsquo;s performance.</p><h2>Results</h2><p>Starry eyed and excited to see improvements across the board (that file exists on nearly every page of tumblr, after all) we jumped head on into the data to find ourselves amused and slightly disappointed.</p><p>Turns out, the performance gains that we expected to see from moving a heavy file out of a critical rendering path were not there. The 75th percentile of page load times across the board <i>remained the same</i>. We suspected that analyzing on a more granular would reveal performance gains on certain pages or even certain browsers - but results were pretty uniform. See for yourself - below are boxplots for performance on the dashboard:</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/db2bc2b3b10f12b1708f63701f2bcb94/tumblr_inline_o2t3ivcZpW1rnmbe6_540.png\" class=\"\"/></figure><p>Was our approach to taking measurements incorrect? We revisited numbers again and again. We looked into finer detail at various pages. We excluded IE9 after hypothesizing that it might skewing our results. We measured across several metrics that we had at our disposal (we sample actual navigation timings from actual users). Results remained the same.</p><h2>Outcome</h2><p>As much as we were disappointed, we were also glad that we ended up knowing precisely what effect we had on the performance. Oftentimes we take blind faith that best practices will lead to best results, and fail to realize that myriads of factors weigh in on actual outcomes.</p><p>If anything - we learned a lot from this experience. We gained better insight into our codebase and established an approach to measuring performance in future experiments!</p></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"javascript","id":133868436747,"post_url":"https://javascript.tumblr.com/post/133868436747/data-lasso","slug":"data-lasso","date":"2015-11-24 16:32:49 GMT","timestamp":1448382769,"state":"published","format":"html","reblog_key":"fs9nZ9Iu","tags":["data visualization","javascript","tumblr"],"short_url":"https://tmblr.co/ZAczzi1yhBZqB","summary":"Data Lasso","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":160,"title":"Data Lasso","body":"<p>There I was. Stranded. Alone with my hive query export of many thousands of records, earned by a tireless series of painfully refined select statements, needing to identify what the outliers were in this madness of data.</p><p><i>&ldquo;I have data. Now what…Crap.&rdquo;</i> I mumbled to myself, realizing that I am limited to a few unpromising options.</p><p>Flexing my brain muscle, I tried to recollect bits and pieces I knew on mighty R. <i>“What was the name of the library? ggdraw? ggchart? Dammit it’s ggplot.”</i> Prospect of trying to remember cryptic R work was dooming, weighing heavily on a tired engineer who had enough of suffering for the day.</p><p>Then a shameful thought passed through my mind: <i>“Just open it in MS Excel. No one has to know.”</i> Countless minutes passed as I was still looking at a beach ball of death, spinning as the naive program tried to open my data set and obviously failing.</p><p>Desperation fell on a lonely engineer. There’s got to be a better way. A way to easily visualize the data set as a whole and not needing to write code for it. Just plug in the data set and specify what to show from it. A scalable solution. Firmly deciding that no one should have to be stranded in that situation, a determination came to write a tool that will solve that gap. So was born the Data Lasso.</p><h2><b>Data Lasso</b></h2><p><a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">Data Lasso</a> is a visualization tool that allows exploration of arbitrary set of data in 3D. It is built to be agnostic to the structure and formatting of data.</p><p>There is no setup. You don&rsquo;t need to prepare your data, <code>.csv</code>, <code>.tsv</code> or <code>.json</code> will do. It can easily visualize half a million entries. All of that in a three dimensional space, so you can have complete freedom of looking at your data.</p><figure data-orig-width=\"1106\" data-orig-height=\"702\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a51d1e1bce1a86a79a7b06fd91ac6240/tumblr_inline_nybtuw45DF1rnmbe6_540.gif\" alt=\"image\" data-orig-width=\"1106\" data-orig-height=\"702\"/></figure><p>Data Lasso can help answer such fundamental questions as:</p><ul><li>What are the outliers in this multi-dimensional data set?</li>\n<li>How one dimension of data correlates to another one? Another two?</li>\n<li>How do you find signal in what is, otherwise, simply noise?</li>\n</ul><h2><b>Under the hood</b></h2><h2>Future</h2><p>WebGL. The future is upon us, and <a href=\"http://caniuse.com/#search=webgl\" target=\"_blank\">3D in a browser is a reality</a>. Using <a href=\"http://threejs.org/\" target=\"_blank\">three.js</a> to help wrangle WebGL, Data Lasso benefits from that extra dimension a lot. Rotating, moving and zooming in 3D space gives additional freedom to look at your data closely.</p><p>Data Lasso can visualize around half a million entries - all thanks to shaders that allow to take rendering off the CPU and pass it on to the GPU. Shaders alone might have been the single most important breakthrough for Data Lasso, enabling those smooth 60fps even with large data sets.</p><h2>Goes well with your stack</h2><p>At it’s core, It is built to be extensible by means of modules, that can hook right into Data Lasso event bus. That allows you to set up data flow out of Data Lasso that is customized for your needs, or add a UI on top of the Data Lasso to be specific to your data.</p><p>Data Lasso can be used standalone, but it was not made into an npm module for no reason - add it to your stack and serve it up from your systems.</p><p>Data Lasso was used inside Tumblr for several months, and shown itself to be an extremely useful visualization tool, filling a big gap in a workflow of working with data.</p><p>Now it’s open sourced. <a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">Go check it out</a>.</p>","reblog":{"comment":"<p>There I was. Stranded. Alone with my hive query export of many thousands of records, earned by a tireless series of painfully refined select statements, needing to identify what the outliers were in this madness of data.</p><p><i>“I have data. Now what…Crap.”</i> I mumbled to myself, realizing that I am limited to a few unpromising options.</p><p>Flexing my brain muscle, I tried to recollect bits and pieces I knew on mighty R. <i>“What was the name of the library? ggdraw? ggchart? Dammit it’s ggplot.”</i> Prospect of trying to remember cryptic R work was dooming, weighing heavily on a tired engineer who had enough of suffering for the day.</p><p>Then a shameful thought passed through my mind: <i>“Just open it in MS Excel. No one has to know.”</i> Countless minutes passed as I was still looking at a beach ball of death, spinning as the naive program tried to open my data set and obviously failing.</p><p>Desperation fell on a lonely engineer. There’s got to be a better way. A way to easily visualize the data set as a whole and not needing to write code for it. Just plug in the data set and specify what to show from it. A scalable solution. Firmly deciding that no one should have to be stranded in that situation, a determination came to write a tool that will solve that gap. So was born the Data Lasso.</p><h2><b>Data Lasso</b></h2><p><a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">Data Lasso</a> is a visualization tool that allows exploration of arbitrary set of data in 3D. It is built to be agnostic to the structure and formatting of data.</p><p>There is no setup. You don’t need to prepare your data, <code>.csv</code>, <code>.tsv</code> or <code>.json</code> will do. It can easily visualize half a million entries. All of that in a three dimensional space, so you can have complete freedom of looking at your data.</p><figure data-orig-width=\"1106\" data-orig-height=\"702\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a51d1e1bce1a86a79a7b06fd91ac6240/tumblr_inline_nybtuw45DF1rnmbe6_540.gif\" alt=\"image\" data-orig-width=\"1106\" data-orig-height=\"702\"></figure><p>Data Lasso can help answer such fundamental questions as:</p><ul><li>What are the outliers in this multi-dimensional data set?</li>\n<li>How one dimension of data correlates to another one? Another two?</li>\n<li>How do you find signal in what is, otherwise, simply noise?</li>\n</ul><h2><b>Under the hood</b></h2><h2>Future</h2><p>WebGL. The future is upon us, and <a href=\"http://caniuse.com/#search=webgl\" target=\"_blank\">3D in a browser is a reality</a>. Using <a href=\"http://threejs.org/\" target=\"_blank\">three.js</a> to help wrangle WebGL, Data Lasso benefits from that extra dimension a lot. Rotating, moving and zooming in 3D space gives additional freedom to look at your data closely.</p><p>Data Lasso can visualize around half a million entries - all thanks to shaders that allow to take rendering off the CPU and pass it on to the GPU. Shaders alone might have been the single most important breakthrough for Data Lasso, enabling those smooth 60fps even with large data sets.</p><h2>Goes well with your stack</h2><p>At it’s core, It is built to be extensible by means of modules, that can hook right into Data Lasso event bus. That allows you to set up data flow out of Data Lasso that is customized for your needs, or add a UI on top of the Data Lasso to be specific to your data.</p><p>Data Lasso can be used standalone, but it was not made into an npm module for no reason - add it to your stack and serve it up from your systems.</p><p>Data Lasso was used inside Tumblr for several months, and shown itself to be an extremely useful visualization tool, filling a big gap in a workflow of working with data.</p><p>Now it’s open sourced. <a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">Go check it out</a>.</p>","tree_html":""},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"133868436747"},"content_raw":"<p>There I was. Stranded. Alone with my hive query export of many thousands of records, earned by a tireless series of painfully refined select statements, needing to identify what the outliers were in this madness of data.</p><p><i>“I have data. Now what…Crap.”</i> I mumbled to myself, realizing that I am limited to a few unpromising options.</p><p>Flexing my brain muscle, I tried to recollect bits and pieces I knew on mighty R. <i>“What was the name of the library? ggdraw? ggchart? Dammit it’s ggplot.”</i> Prospect of trying to remember cryptic R work was dooming, weighing heavily on a tired engineer who had enough of suffering for the day.</p><p>Then a shameful thought passed through my mind: <i>“Just open it in MS Excel. No one has to know.”</i> Countless minutes passed as I was still looking at a beach ball of death, spinning as the naive program tried to open my data set and obviously failing.</p><p>Desperation fell on a lonely engineer. There’s got to be a better way. A way to easily visualize the data set as a whole and not needing to write code for it. Just plug in the data set and specify what to show from it. A scalable solution. Firmly deciding that no one should have to be stranded in that situation, a determination came to write a tool that will solve that gap. So was born the Data Lasso.</p><h2><b>Data Lasso</b></h2><p><a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">Data Lasso</a> is a visualization tool that allows exploration of arbitrary set of data in 3D. It is built to be agnostic to the structure and formatting of data.</p><p>There is no setup. You don’t need to prepare your data, <code>.csv</code>, <code>.tsv</code> or <code>.json</code> will do. It can easily visualize half a million entries. All of that in a three dimensional space, so you can have complete freedom of looking at your data.</p><figure data-orig-width=\"1106\" data-orig-height=\"702\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a51d1e1bce1a86a79a7b06fd91ac6240/tumblr_inline_nybtuw45DF1rnmbe6_540.gif\" alt=\"image\" data-orig-width=\"1106\" data-orig-height=\"702\"></figure><p>Data Lasso can help answer such fundamental questions as:</p><ul><li>What are the outliers in this multi-dimensional data set?</li>\n<li>How one dimension of data correlates to another one? Another two?</li>\n<li>How do you find signal in what is, otherwise, simply noise?</li>\n</ul><h2><b>Under the hood</b></h2><h2>Future</h2><p>WebGL. The future is upon us, and <a href=\"http://caniuse.com/#search=webgl\" target=\"_blank\">3D in a browser is a reality</a>. Using <a href=\"http://threejs.org/\" target=\"_blank\">three.js</a> to help wrangle WebGL, Data Lasso benefits from that extra dimension a lot. Rotating, moving and zooming in 3D space gives additional freedom to look at your data closely.</p><p>Data Lasso can visualize around half a million entries - all thanks to shaders that allow to take rendering off the CPU and pass it on to the GPU. Shaders alone might have been the single most important breakthrough for Data Lasso, enabling those smooth 60fps even with large data sets.</p><h2>Goes well with your stack</h2><p>At it’s core, It is built to be extensible by means of modules, that can hook right into Data Lasso event bus. That allows you to set up data flow out of Data Lasso that is customized for your needs, or add a UI on top of the Data Lasso to be specific to your data.</p><p>Data Lasso can be used standalone, but it was not made into an npm module for no reason - add it to your stack and serve it up from your systems.</p><p>Data Lasso was used inside Tumblr for several months, and shown itself to be an extremely useful visualization tool, filling a big gap in a workflow of working with data.</p><p>Now it’s open sourced. <a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">Go check it out</a>.</p>","content":"<p>There I was. Stranded. Alone with my hive query export of many thousands of records, earned by a tireless series of painfully refined select statements, needing to identify what the outliers were in this madness of data.</p><p><i>&ldquo;I have data. Now what&hellip;Crap.&rdquo;</i> I mumbled to myself, realizing that I am limited to a few unpromising options.</p><p>Flexing my brain muscle, I tried to recollect bits and pieces I knew on mighty R. <i>&ldquo;What was the name of the library? ggdraw? ggchart? Dammit it&rsquo;s ggplot.&rdquo;</i> Prospect of trying to remember cryptic R work was dooming, weighing heavily on a tired engineer who had enough of suffering for the day.</p><p>Then a shameful thought passed through my mind: <i>&ldquo;Just open it in MS Excel. No one has to know.&rdquo;</i> Countless minutes passed as I was still looking at a beach ball of death, spinning as the naive program tried to open my data set and obviously failing.</p><p>Desperation fell on a lonely engineer. There&rsquo;s got to be a better way. A way to easily visualize the data set as a whole and not needing to write code for it. Just plug in the data set and specify what to show from it. A scalable solution. Firmly deciding that no one should have to be stranded in that situation, a determination came to write a tool that will solve that gap. So was born the Data Lasso.</p><h2><b>Data Lasso</b></h2><p><a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">Data Lasso</a> is a visualization tool that allows exploration of arbitrary set of data in 3D. It is built to be agnostic to the structure and formatting of data.</p><p>There is no setup. You don&rsquo;t need to prepare your data, <code>.csv</code>, <code>.tsv</code> or <code>.json</code> will do. It can easily visualize half a million entries. All of that in a three dimensional space, so you can have complete freedom of looking at your data.</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a51d1e1bce1a86a79a7b06fd91ac6240/tumblr_inline_nybtuw45DF1rnmbe6_540.gif\" class=\"\"/></figure><p>Data Lasso can help answer such fundamental questions as:</p><ul><li>What are the outliers in this multi-dimensional data set?</li>\n<li>How one dimension of data correlates to another one? Another two?</li>\n<li>How do you find signal in what is, otherwise, simply noise?</li>\n</ul><h2><b>Under the hood</b></h2><h2>Future</h2><p>WebGL. The future is upon us, and <a href=\"http://caniuse.com/#search=webgl\" target=\"_blank\">3D in a browser is a reality</a>. Using <a href=\"http://threejs.org/\" target=\"_blank\">three.js</a> to help wrangle WebGL, Data Lasso benefits from that extra dimension a lot. Rotating, moving and zooming in 3D space gives additional freedom to look at your data closely.</p><p>Data Lasso can visualize around half a million entries - all thanks to shaders that allow to take rendering off the CPU and pass it on to the GPU. Shaders alone might have been the single most important breakthrough for Data Lasso, enabling those smooth 60fps even with large data sets.</p><h2>Goes well with your stack</h2><p>At it&rsquo;s core, It is built to be extensible by means of modules, that can hook right into Data Lasso event bus. That allows you to set up data flow out of Data Lasso that is customized for your needs, or add a UI on top of the Data Lasso to be specific to your data.</p><p>Data Lasso can be used standalone, but it was not made into an npm module for no reason - add it to your stack and serve it up from your systems.</p><p>Data Lasso was used inside Tumblr for several months, and shown itself to be an extremely useful visualization tool, filling a big gap in a workflow of working with data.</p><p>Now it&rsquo;s open sourced. <a href=\"http://tumblr.github.io/data-lasso/\" target=\"_blank\">Go check it out</a>.</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true}],"total_posts":14}}