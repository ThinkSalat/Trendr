{"meta":{"status":200,"msg":"OK"},"response":{"blog":{"ask":false,"ask_anon":false,"ask_page_title":"Ask us anything","can_subscribe":false,"description":"Dispatches from the intrepid tinkerers behind technology at Tumblr.","is_adult":false,"is_nsfw":false,"name":"engineering","posts":167,"reply_conditions":"3","share_likes":false,"subscribed":false,"title":"Tumblr Engineering","total_posts":167,"updated":1527778806,"url":"https://engineering.tumblr.com/","is_optout_ads":false},"posts":[{"type":"text","blog_name":"engineering","id":174436492466,"post_url":"https://engineering.tumblr.com/post/174436492466/come-join-us","slug":"come-join-us","date":"2018-05-31 15:00:06 GMT","timestamp":1527778806,"state":"published","format":"html","reblog_key":"AvilTAow","tags":["job openings","working at tumblr","meanwhile at nuhq","engineering"],"short_url":"https://tmblr.co/ZI3nWx2YTEQIo","summary":"Come join us!","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":49,"title":"Come join us!","body":"<p><a href=\"https://javascript.tumblr.com/post/174409902617/come-join-us\" class=\"tumblr_blog\">javascript</a>:</p><blockquote>\n<p>If you’ve been following this Tumblr, you’ll likely know that we, the Core Web team, have recently started <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">rewriting and modernizing the Tumblr web platform</a>. This undertaking presents some incredibly exciting opportunities to innovate with lots of fun technologies. We’re working on improving every aspect of the web; the dashboard, the archive, the blog network, you name it.  </p>\n<p><b>Are you a senior JavaScript engineer and wanna be a part of this adventure? </b>Come join Core Web!<b> </b>You’ll help create the building blocks with which a brand new modern Tumblr will be built. Your work will directly impact and define the user experience for millions of users and the development tools for a large number of product engineers across several teams at Tumblr!</p>\n<figure data-orig-width=\"480\" data-orig-height=\"362\" data-tumblr-attribution=\"successfulantfarmer:p5fpf_4le0NKcT7CA2dqnA:Zt53De2QlpAuR\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/734e0f04a52aa6312c6b152a1b988276/tumblr_oxh5z2q6sw1w9f539o1_250.gifv\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"362\"/></figure><h2>What you’ll do</h2>\n<p>We’re looking for an extraordinary senior JavaScript engineer who wants to take on the following challenges:</p>\n<ul><li>Keep making our <b>build and deployment</b> more delightful and futuristic<br/></li>\n<li>Help establish <b>norms and standards</b> for how this new web client should be architected, including setting JavaScript, CSS, performance and other best-practices, and introducing/creating the tools to achieve them<br/></li>\n<li>Internally and externally <b>raising awareness</b> around the work the team is doing by being active in the Open-source and engineering community <br/></li>\n<li>Whatever else you think will help us create the <b>highest quality web platform</b> and development experience!<br/></li>\n</ul><h2>Who we’re looking for</h2>\n<p>An ideal team member is someone with:</p>\n<ul><li>Strong <b>JavaScript and CSS</b> fundamentals<br/></li>\n<li>Experience setting up <b>Continuous Integration / Continuous Deploys</b><br/></li>\n<li>Expertise in <b>build tools</b> like Webpack, Parcel (or similar)<br/></li>\n<li>\n<b>Pragmatism</b> and the ability to decide what’s “good enough” (while planning ahead and knowing when to iterate)<br/></li>\n<li>An ability to <b>independently drive projects</b><br/></li>\n<li>A desire to <b>innovate</b> and bring <b>new things</b> into the world<br/></li>\n<li>An understanding of <b>code quality</b>, unit test coverage, and performance<br/></li>\n<li>\n<a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\"><b>Empathy</b> and the desire to elevate those around them</a><br/></li>\n<li>The belief that work is just as much about the journey as the destination<br/></li>\n</ul><h2>Our current toolkit</h2>\n<ul><li>Webpack<br/></li>\n<li>ES6<br/></li>\n<li>React and React Router<br/></li>\n<li>CSS Modules<br/></li>\n<li>\n<a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">TypeScript</a><br/></li>\n<li>Jenkins and Jenkins pipelines<br/></li>\n<li>Docker<br/></li>\n<li>Node and Express<br/></li>\n<li>Kubernetes<br/></li>\n</ul><p>If you’re interested, but your background does not include all of the above, please don’t let that hold you back. Let’s talk! To apply, <a href=\"https://oath.wd5.myworkdayjobs.com/careers/job/US---New-York-Broadway-770/Tumblr--Senior-JavaScript-Engineer--Core-Web_JR0004101\"><b>follow the instructions at the bottom of our official job listings page</b></a>! </p>\n<figure data-orig-width=\"500\" data-orig-height=\"320\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NRac01\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/0847a65cdf7883544022907ea0ef5195/tumblr_oskvvlkexW1tr6ni8o1_500.gifv\" alt=\"image\" data-orig-width=\"500\" data-orig-height=\"320\"/></figure><p>We can’t wait to hear from you!<br/></p>\n</blockquote>\n<p><b><i>Come work with the amazing Tumblr Core Web team!!</i></b></p>","reblog":{"comment":"<p><b><i>Come work with the amazing Tumblr Core Web team!!</i></b></p>","tree_html":"<p><a href=\"https://javascript.tumblr.com/post/174409902617/come-join-us\" class=\"tumblr_blog\">javascript</a>:</p>\n<blockquote>\n<p>If you’ve been following this Tumblr, you’ll likely know that we, the Core Web team, have recently started <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">rewriting and modernizing the Tumblr web platform</a>. This undertaking presents some incredibly exciting opportunities to innovate with lots of fun technologies. We’re working on improving every aspect of the web; the dashboard, the archive, the blog network, you name it.  </p>\n<p><b>Are you a senior JavaScript engineer and wanna be a part of this adventure? </b>Come join Core Web!<b> </b>You’ll help create the building blocks with which a brand new modern Tumblr will be built. Your work will directly impact and define the user experience for millions of users and the development tools for a large number of product engineers across several teams at Tumblr!</p>\n<figure data-orig-width=\"480\" data-orig-height=\"362\" data-tumblr-attribution=\"successfulantfarmer:p5fpf_4le0NKcT7CA2dqnA:Zt53De2QlpAuR\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/734e0f04a52aa6312c6b152a1b988276/tumblr_oxh5z2q6sw1w9f539o1_250.gifv\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"362\"></figure><h2>What you’ll do</h2>\n<p>We’re looking for an extraordinary senior JavaScript engineer who wants to take on the following challenges:</p>\n<ul>\n<li>Keep making our <b>build and deployment</b> more delightful and futuristic<br>\n</li>\n<li>Help establish <b>norms and standards</b> for how this new web client should be architected, including setting JavaScript, CSS, performance and other best-practices, and introducing/creating the tools to achieve them<br>\n</li>\n<li>Internally and externally <b>raising awareness</b> around the work the team is doing by being active in the Open-source and engineering community <br>\n</li>\n<li>Whatever else you think will help us create the <b>highest quality web platform</b> and development experience!<br>\n</li>\n</ul>\n<h2>Who we’re looking for</h2>\n<p>An ideal team member is someone with:</p>\n<ul>\n<li>Strong <b>JavaScript and CSS</b> fundamentals<br>\n</li>\n<li>Experience setting up <b>Continuous Integration / Continuous Deploys</b><br>\n</li>\n<li>Expertise in <b>build tools</b> like Webpack, Parcel (or similar)<br>\n</li>\n<li>\n<b>Pragmatism</b> and the ability to decide what’s “good enough” (while planning ahead and knowing when to iterate)<br>\n</li>\n<li>An ability to <b>independently drive projects</b><br>\n</li>\n<li>A desire to <b>innovate</b> and bring <b>new things</b> into the world<br>\n</li>\n<li>An understanding of <b>code quality</b>, unit test coverage, and performance<br>\n</li>\n<li>\n<a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\"><b>Empathy</b> and the desire to elevate those around them</a><br>\n</li>\n<li>The belief that work is just as much about the journey as the destination<br>\n</li>\n</ul>\n<h2>Our current toolkit</h2>\n<ul>\n<li>Webpack<br>\n</li>\n<li>ES6<br>\n</li>\n<li>React and React Router<br>\n</li>\n<li>CSS Modules<br>\n</li>\n<li>\n<a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">TypeScript</a><br>\n</li>\n<li>Jenkins and Jenkins pipelines<br>\n</li>\n<li>Docker<br>\n</li>\n<li>Node and Express<br>\n</li>\n<li>Kubernetes<br>\n</li>\n</ul>\n<p>If you’re interested, but your background does not include all of the above, please don’t let that hold you back. Let’s talk! To apply, <a href=\"https://oath.wd5.myworkdayjobs.com/careers/job/US---New-York-Broadway-770/Tumblr--Senior-JavaScript-Engineer--Core-Web_JR0004101\"><b>follow the instructions at the bottom of our official job listings page</b></a>! </p>\n<figure data-orig-width=\"500\" data-orig-height=\"320\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NRac01\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/0847a65cdf7883544022907ea0ef5195/tumblr_oskvvlkexW1tr6ni8o1_500.gifv\" alt=\"image\" data-orig-width=\"500\" data-orig-height=\"320\"></figure><p>We can’t wait to hear from you!<br></p>\n</blockquote>"},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"174409902617"},"content_raw":"<p>If you’ve been following this Tumblr, you’ll likely know that we, the Core Web team, have recently started <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">rewriting and modernizing the Tumblr web platform</a>. This undertaking presents some incredibly exciting opportunities to innovate with lots of fun technologies. We’re working on improving every aspect of the web; the dashboard, the archive, the blog network, you name it.  </p>\n<p><b>Are you a senior JavaScript engineer and wanna be a part of this adventure? </b>Come join Core Web!<b> </b>You’ll help create the building blocks with which a brand new modern Tumblr will be built. Your work will directly impact and define the user experience for millions of users and the development tools for a large number of product engineers across several teams at Tumblr!</p>\n<figure data-orig-width=\"480\" data-orig-height=\"362\" data-tumblr-attribution=\"successfulantfarmer:p5fpf_4le0NKcT7CA2dqnA:Zt53De2QlpAuR\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/734e0f04a52aa6312c6b152a1b988276/tumblr_oxh5z2q6sw1w9f539o1_250.gifv\" alt=\"image\" data-orig-width=\"480\" data-orig-height=\"362\"></figure><h2>What you’ll do</h2>\n<p>We’re looking for an extraordinary senior JavaScript engineer who wants to take on the following challenges:</p>\n<ul><li>Keep making our <b>build and deployment</b> more delightful and futuristic<br></li>\n<li>Help establish <b>norms and standards</b> for how this new web client should be architected, including setting JavaScript, CSS, performance and other best-practices, and introducing/creating the tools to achieve them<br></li>\n<li>Internally and externally <b>raising awareness</b> around the work the team is doing by being active in the Open-source and engineering community <br></li>\n<li>Whatever else you think will help us create the <b>highest quality web platform</b> and development experience!<br></li>\n</ul><h2>Who we’re looking for</h2>\n<p>An ideal team member is someone with:</p>\n<ul><li>Strong <b>JavaScript and CSS</b> fundamentals<br></li>\n<li>Experience setting up <b>Continuous Integration / Continuous Deploys</b><br></li>\n<li>Expertise in <b>build tools</b> like Webpack, Parcel (or similar)<br></li>\n<li>\n<b>Pragmatism</b> and the ability to decide what’s “good enough” (while planning ahead and knowing when to iterate)<br></li>\n<li>An ability to <b>independently drive projects</b><br></li>\n<li>A desire to <b>innovate</b> and bring <b>new things</b> into the world<br></li>\n<li>An understanding of <b>code quality</b>, unit test coverage, and performance<br></li>\n<li>\n<a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\"><b>Empathy</b> and the desire to elevate those around them</a><br></li>\n<li>The belief that work is just as much about the journey as the destination<br></li>\n</ul><h2>Our current toolkit</h2>\n<ul><li>Webpack<br></li>\n<li>ES6<br></li>\n<li>React and React Router<br></li>\n<li>CSS Modules<br></li>\n<li>\n<a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">TypeScript</a><br></li>\n<li>Jenkins and Jenkins pipelines<br></li>\n<li>Docker<br></li>\n<li>Node and Express<br></li>\n<li>Kubernetes<br></li>\n</ul><p>If you’re interested, but your background does not include all of the above, please don’t let that hold you back. Let’s talk! To apply, <a href=\"https://oath.wd5.myworkdayjobs.com/careers/job/US---New-York-Broadway-770/Tumblr--Senior-JavaScript-Engineer--Core-Web_JR0004101\"><b>follow the instructions at the bottom of our official job listings page</b></a>! </p>\n<figure data-orig-width=\"500\" data-orig-height=\"320\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NRac01\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/0847a65cdf7883544022907ea0ef5195/tumblr_oskvvlkexW1tr6ni8o1_500.gifv\" alt=\"image\" data-orig-width=\"500\" data-orig-height=\"320\"></figure><p>We can’t wait to hear from you!<br></p>","content":"<p>If you&rsquo;ve been following this Tumblr, you&rsquo;ll likely know that we, the Core Web team, have recently started <a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\">rewriting and modernizing the Tumblr web platform</a>. This undertaking presents some incredibly exciting opportunities to innovate with lots of fun technologies. We&rsquo;re working on improving every aspect of the web; the dashboard, the archive, the blog network, you name it.&nbsp;&nbsp;</p>\n<p><b>Are you a senior JavaScript engineer and wanna be a part of this adventure? </b>Come join Core Web!<b>&nbsp;</b>You&rsquo;ll help create the building blocks with which a brand new modern Tumblr will be built.&nbsp;Your work will directly impact and define the user experience for millions of users and the development tools for a large number of product engineers across several teams at Tumblr!</p>\n<figure data-tumblr-media-id=\"0\" class=\"tmblr-full\"></figure><h2>What you&rsquo;ll do</h2>\n<p>We&rsquo;re looking for an extraordinary senior JavaScript engineer who wants to take on the following challenges:</p>\n<ul><li>Keep making our <b>build and deployment</b>&nbsp;more delightful and futuristic<br /></li>\n<li>Help establish <b>norms and standards</b> for how this new web client should be architected, including setting JavaScript, CSS, performance and other best-practices, and introducing/creating the tools to achieve them<br /></li>\n<li>Internally and externally <b>raising awareness</b> around the work the team is doing by being active in the Open-source and engineering community&nbsp;<br /></li>\n<li>Whatever else you think will help us create the <b>highest quality web platform</b> and development experience!<br /></li>\n</ul><h2>Who we&rsquo;re looking for</h2>\n<p>An ideal team member is someone with:</p>\n<ul><li>Strong <b>JavaScript and CSS</b> fundamentals<br /></li>\n<li>Experience setting up&nbsp;<b>Continuous Integration / Continuous Deploys</b><br /></li>\n<li>Expertise in <b>build tools</b> like Webpack, Parcel (or similar)<br /></li>\n<li>\n<b>Pragmatism</b> and the ability to decide what&rsquo;s &ldquo;good enough&rdquo; (while planning ahead and knowing when to iterate)<br /></li>\n<li>An ability to <b>independently drive projects</b><br /></li>\n<li>A desire to <b>innovate</b> and bring <b>new things</b> into the world<br /></li>\n<li>An understanding of <b>code quality</b>, unit test coverage, and performance<br /></li>\n<li>\n<a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\"><b>Empathy</b> and the desire to elevate those around them</a><br /></li>\n<li>The belief that work is just as much about the journey as the destination<br /></li>\n</ul><h2>Our current toolkit</h2>\n<ul><li>Webpack<br /></li>\n<li>ES6<br /></li>\n<li>React and React Router<br /></li>\n<li>CSS Modules<br /></li>\n<li>\n<a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">TypeScript</a><br /></li>\n<li>Jenkins and Jenkins pipelines<br /></li>\n<li>Docker<br /></li>\n<li>Node and Express<br /></li>\n<li>Kubernetes<br /></li>\n</ul><p>If you&rsquo;re interested, but your background does not include all of the above, please don&rsquo;t let that hold you back. Let&rsquo;s talk!&nbsp;To apply, <a href=\"https://oath.wd5.myworkdayjobs.com/careers/job/US---New-York-Broadway-770/Tumblr--Senior-JavaScript-Engineer--Core-Web_JR0004101\"><b>follow the instructions at the bottom of our official job listings page</b></a>!&nbsp;</p>\n<figure data-tumblr-media-id=\"1\" class=\"tmblr-full\"></figure><p>We can&rsquo;t wait to hear from you!<br /></p>","is_root_item":true},{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"174436492466"},"content_raw":"<p><b><i>Come work with the amazing Tumblr Core Web team!!</i></b></p>","content":"<p><b><i>Come work with the amazing Tumblr Core Web team!!</i></b></p>","is_current_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":174182523664,"post_url":"https://engineering.tumblr.com/post/174182523664/nyc-php-meetup-may-30th","slug":"nyc-php-meetup-may-30th","date":"2018-05-23 16:52:41 GMT","timestamp":1527094361,"state":"published","format":"html","reblog_key":"zlJZeww3","tags":["meetup","php"],"short_url":"https://tmblr.co/ZI3nWx2YE5cCG","summary":"NYC PHP Meetup May 30th","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":15,"title":"NYC PHP Meetup May 30th","body":"<figure class=\"tmblr-full\" data-orig-height=\"1080\" data-orig-width=\"1920\"><img src=\"https://78.media.tumblr.com/5d007ba8877d32a116fde54384ff8a27/tumblr_inline_p96xg37u9E1qzyw0r_540.png\" data-orig-height=\"1080\" data-orig-width=\"1920\"/></figure><p><b>tl;dr:</b> Come and join us for the New York PHP Meetup on May 30th with Mohannad Ali, the VP of Engineering Berlin @ HelloFresh on &ldquo;Lessons in Engineering Leadership: Harnessing the power of narrative&rdquo;, Rohit Sodhia on &ldquo;JSON Web Tokens - Auth Made Easy(er)&rdquo; and Michael Butler on &ldquo;Speeding up PHPUnit with Paratest&rdquo;</p><h2>When</h2><p>May 30th 2018, 7:00pm - 9pm - Doors open 6:30pm</p><h2>Where</h2><p><a href=\"https://www.google.com/maps/dir//770%20broadway,new%20york\">6th Floor, 770 Broadway (9th st. btw Broadway and University place), New York, NY 10003</a></p><figure class=\"tmblr-full\" data-orig-height=\"250\" data-orig-width=\"501\"><img src=\"https://78.media.tumblr.com/6317646354dbde58da54ab6665f2b884/tumblr_inline_p96xfuFwO51qzyw0r_540.png\" data-orig-height=\"250\" data-orig-width=\"501\"/></figure><h2>Details</h2><p>Our featured talk this month is presented by Mohannad Ali, the VP of Engineering Berlin @ HelloFresh (<a href=\"https://www.hellofresh.com/\">https://www.hellofresh.com/</a>) titled &ldquo;Lessons in Engineering Leadership: Harnessing the power of narrative&rdquo;.</p><p>Summary: How I learned the importance of narrative at the workplace, and how it could become the most powerful tool to drive motivation, innovation, and purpose.</p><p>Check out the HelloFresh <a href=\"https://engineering.hellofresh.com\">engineering blog</a>.</p><p>HelloFresh will also kindly be providing some great giveaways for you to feast over, so don&rsquo;t miss out!</p><h2>Lightning talks</h2><p>We also have 2 excellent lightening talks:</p><p>Rohit Sodhia on &ldquo;JSON Web Tokens - Auth Made Easy(er)&rdquo; and Michael Butler on &ldquo;Speeding up PHPUnit with Paratest&rdquo;.</p><h2>Schedule</h2><p>6:30pm - Doors open </p><p>7:00 - 7:10pm - Intro &amp; welcome to New York PHP + refreshments </p><p>7:15 - 7:30pm - JSON Web Tokens - Auth Made Easy(er) - Rohit Sodhia </p><p>7:35 - 7:50pm - Speeding up PHPUnit with Paratest - Michael Butler </p><p>8:00 - 8:45pm - Lessons in Engineering Leadership: Harnessing the power of narrative - Mohannad Ali </p><p>8:45pm - 9pm - Questions &amp; closing </p><p>After - Come and join us for a drink and chat at a local bar</p><h2>What to bring</h2><ul><li>A great attitude about all things PHP.</li>\n<li>Laptops are not necessary but we will have wifi capabilities if you want to hack along.</li>\n<li>Tumblr is generously providing pizza 🍕 and 🍺 beer/drinks.</li>\n</ul><h2>How to RSVP</h2><p>Please use <a href=\"https://www.meetup.com/new-york-php/events/250587847/\">Meetup</a> to RSVP.</p>","reblog":{"comment":"<p><figure class=\"tmblr-full\" data-orig-height=\"1080\" data-orig-width=\"1920\"><img src=\"https://78.media.tumblr.com/5d007ba8877d32a116fde54384ff8a27/tumblr_inline_p96xg37u9E1qzyw0r_540.png\" data-orig-height=\"1080\" data-orig-width=\"1920\"></figure><p><b>tl;dr:</b> Come and join us for the New York PHP Meetup on May 30th with Mohannad Ali, the VP of Engineering Berlin @ HelloFresh on “Lessons in Engineering Leadership: Harnessing the power of narrative”, Rohit Sodhia on “JSON Web Tokens - Auth Made Easy(er)” and Michael Butler on “Speeding up PHPUnit with Paratest”</p><h2>When</h2><p>May 30th 2018, 7:00pm - 9pm - Doors open 6:30pm</p><h2>Where</h2><p><a href=\"https://www.google.com/maps/dir//770%20broadway,new%20york\">6th Floor, 770 Broadway (9th st. btw Broadway and University place), New York, NY 10003</a></p><figure class=\"tmblr-full\" data-orig-height=\"250\" data-orig-width=\"501\"><img src=\"https://78.media.tumblr.com/6317646354dbde58da54ab6665f2b884/tumblr_inline_p96xfuFwO51qzyw0r_540.png\" data-orig-height=\"250\" data-orig-width=\"501\"></figure><h2>Details</h2><p>Our featured talk this month is presented by Mohannad Ali, the VP of Engineering Berlin @ HelloFresh (<a href=\"https://www.hellofresh.com/\">https://www.hellofresh.com/</a>) titled “Lessons in Engineering Leadership: Harnessing the power of narrative”.</p><p>Summary: How I learned the importance of narrative at the workplace, and how it could become the most powerful tool to drive motivation, innovation, and purpose.</p><p>Check out the HelloFresh <a href=\"https://engineering.hellofresh.com\">engineering blog</a>.</p><p>HelloFresh will also kindly be providing some great giveaways for you to feast over, so don’t miss out!</p><h2>Lightning talks</h2><p>We also have 2 excellent lightening talks:</p><p>Rohit Sodhia on “JSON Web Tokens - Auth Made Easy(er)” and Michael Butler on “Speeding up PHPUnit with Paratest”.</p><h2>Schedule</h2><p>6:30pm - Doors open </p><p>7:00 - 7:10pm - Intro &amp; welcome to New York PHP + refreshments </p><p>7:15 - 7:30pm - JSON Web Tokens - Auth Made Easy(er) - Rohit Sodhia </p><p>7:35 - 7:50pm - Speeding up PHPUnit with Paratest - Michael Butler </p><p>8:00 - 8:45pm - Lessons in Engineering Leadership: Harnessing the power of narrative - Mohannad Ali </p><p>8:45pm - 9pm - Questions &amp; closing </p><p>After - Come and join us for a drink and chat at a local bar</p><h2>What to bring</h2><ul><li>A great attitude about all things PHP.</li>\n<li>Laptops are not necessary but we will have wifi capabilities if you want to hack along.</li>\n<li>Tumblr is generously providing pizza 🍕 and 🍺 beer/drinks.</li>\n</ul><h2>How to RSVP</h2><p>Please use <a href=\"https://www.meetup.com/new-york-php/events/250587847/\">Meetup</a> to RSVP.</p></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"174182523664"},"content_raw":"<p><figure class=\"tmblr-full\" data-orig-height=\"1080\" data-orig-width=\"1920\"><img src=\"https://78.media.tumblr.com/5d007ba8877d32a116fde54384ff8a27/tumblr_inline_p96xg37u9E1qzyw0r_540.png\" data-orig-height=\"1080\" data-orig-width=\"1920\"></figure><p><b>tl;dr:</b> Come and join us for the New York PHP Meetup on May 30th with Mohannad Ali, the VP of Engineering Berlin @ HelloFresh on “Lessons in Engineering Leadership: Harnessing the power of narrative”, Rohit Sodhia on “JSON Web Tokens - Auth Made Easy(er)” and Michael Butler on “Speeding up PHPUnit with Paratest”</p><h2>When</h2><p>May 30th 2018, 7:00pm - 9pm - Doors open 6:30pm</p><h2>Where</h2><p><a href=\"https://www.google.com/maps/dir//770%20broadway,new%20york\">6th Floor, 770 Broadway (9th st. btw Broadway and University place), New York, NY 10003</a></p><figure class=\"tmblr-full\" data-orig-height=\"250\" data-orig-width=\"501\"><img src=\"https://78.media.tumblr.com/6317646354dbde58da54ab6665f2b884/tumblr_inline_p96xfuFwO51qzyw0r_540.png\" data-orig-height=\"250\" data-orig-width=\"501\"></figure><h2>Details</h2><p>Our featured talk this month is presented by Mohannad Ali, the VP of Engineering Berlin @ HelloFresh (<a href=\"https://www.hellofresh.com/\">https://www.hellofresh.com/</a>) titled “Lessons in Engineering Leadership: Harnessing the power of narrative”.</p><p>Summary: How I learned the importance of narrative at the workplace, and how it could become the most powerful tool to drive motivation, innovation, and purpose.</p><p>Check out the HelloFresh <a href=\"https://engineering.hellofresh.com\">engineering blog</a>.</p><p>HelloFresh will also kindly be providing some great giveaways for you to feast over, so don’t miss out!</p><h2>Lightning talks</h2><p>We also have 2 excellent lightening talks:</p><p>Rohit Sodhia on “JSON Web Tokens - Auth Made Easy(er)” and Michael Butler on “Speeding up PHPUnit with Paratest”.</p><h2>Schedule</h2><p>6:30pm - Doors open </p><p>7:00 - 7:10pm - Intro &amp; welcome to New York PHP + refreshments </p><p>7:15 - 7:30pm - JSON Web Tokens - Auth Made Easy(er) - Rohit Sodhia </p><p>7:35 - 7:50pm - Speeding up PHPUnit with Paratest - Michael Butler </p><p>8:00 - 8:45pm - Lessons in Engineering Leadership: Harnessing the power of narrative - Mohannad Ali </p><p>8:45pm - 9pm - Questions &amp; closing </p><p>After - Come and join us for a drink and chat at a local bar</p><h2>What to bring</h2><ul><li>A great attitude about all things PHP.</li>\n<li>Laptops are not necessary but we will have wifi capabilities if you want to hack along.</li>\n<li>Tumblr is generously providing pizza 🍕 and 🍺 beer/drinks.</li>\n</ul><h2>How to RSVP</h2><p>Please use <a href=\"https://www.meetup.com/new-york-php/events/250587847/\">Meetup</a> to RSVP.</p></p>","content":"<p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5d007ba8877d32a116fde54384ff8a27/tumblr_inline_p96xg37u9E1qzyw0r_540.png\" class=\"\"/></figure><p><b>tl;dr:</b> Come and join us for the New York PHP Meetup on May 30th with Mohannad Ali, the VP of Engineering Berlin @ HelloFresh on &ldquo;Lessons in Engineering Leadership: Harnessing the power of narrative&rdquo;, Rohit Sodhia on &ldquo;JSON Web Tokens - Auth Made Easy(er)&rdquo; and Michael Butler on &ldquo;Speeding up PHPUnit with Paratest&rdquo;</p><h2>When</h2><p>May 30th 2018, 7:00pm - 9pm - Doors open 6:30pm</p><h2>Where</h2><p><a href=\"https://www.google.com/maps/dir//770%20broadway,new%20york\">6th Floor, 770 Broadway (9th st. btw Broadway and University place), New York, NY 10003</a></p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/6317646354dbde58da54ab6665f2b884/tumblr_inline_p96xfuFwO51qzyw0r_540.png\" class=\"\"/></figure><h2>Details</h2><p>Our featured talk this month is presented by Mohannad Ali, the VP of Engineering Berlin @ HelloFresh (<a href=\"https://www.hellofresh.com/\">https://www.hellofresh.com/</a>) titled &ldquo;Lessons in Engineering Leadership: Harnessing the power of narrative&rdquo;.</p><p>Summary: How I learned the importance of narrative at the workplace, and how it could become the most powerful tool to drive motivation, innovation, and purpose.</p><p>Check out the HelloFresh <a href=\"https://engineering.hellofresh.com\">engineering blog</a>.</p><p>HelloFresh will also kindly be providing some great giveaways for you to feast over, so don&rsquo;t miss out!</p><h2>Lightning talks</h2><p>We also have 2 excellent lightening talks:</p><p>Rohit Sodhia on &ldquo;JSON Web Tokens - Auth Made Easy(er)&rdquo; and Michael Butler on &ldquo;Speeding up PHPUnit with Paratest&rdquo;.</p><h2>Schedule</h2><p>6:30pm - Doors open&nbsp;</p><p>7:00 - 7:10pm - Intro &amp; welcome to New York PHP + refreshments&nbsp;</p><p>7:15 - 7:30pm - JSON Web Tokens - Auth Made Easy(er) - Rohit Sodhia&nbsp;</p><p>7:35 - 7:50pm - Speeding up PHPUnit with Paratest - Michael Butler&nbsp;</p><p>8:00 - 8:45pm - Lessons in Engineering Leadership: Harnessing the power of narrative - Mohannad Ali&nbsp;</p><p>8:45pm - 9pm - Questions &amp; closing&nbsp;</p><p>After - Come and join us for a drink and chat at a local bar</p><h2>What to bring</h2><ul><li>A great attitude about all things PHP.</li>\n<li>Laptops are not necessary but we will have wifi capabilities if you want to hack along.</li>\n<li>Tumblr is generously providing pizza &#127829; and &#127866; beer/drinks.</li>\n</ul><h2>How to RSVP</h2><p>Please use <a href=\"https://www.meetup.com/new-york-php/events/250587847/\">Meetup</a> to RSVP.</p></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":172794619972,"post_url":"https://engineering.tumblr.com/post/172794619972/a-big-new-beautiful-future-for-the-web-at-tumblr","slug":"a-big-new-beautiful-future-for-the-web-at-tumblr","date":"2018-04-10 15:01:19 GMT","timestamp":1523372479,"state":"published","format":"html","reblog_key":"LHmsrMB0","tags":["dr phil m&m","computer","javascript","js","engineering","react","lol"],"short_url":"https://tmblr.co/ZI3nWx2WxNAX4","summary":"A Big New Beautiful Future for the Web at Tumblr","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":146,"title":"A Big New Beautiful Future for the Web at Tumblr","body":"<p><a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\" class=\"tumblr_blog\">javascript</a>:</p><blockquote>\n<p>In the ten years that Tumblr’s been around, a lot has changed in web technology. We’ve kept up, of course, but it’s always been a process of addition, layering one new technology on top of another. And what we were working with—a custom framework built on top of <a href=\"http://backbonejs.org\">Backbone</a>, messily entangled with a PHP backend and its associated templates—was becoming unmanageable. Our piecemeal conversions to new technologies meant we had thousands of ways posts were rendered (only a moderate exaggeration). And each of those had to be updated individually to support new features or design changes.</p>\n\n<p>It was time to step back, survey the world of web technology, and clean house in a big way. That we could finally test some of the new tech we’ve been itching to use was just a little bonus.</p>\n\n<p>We started by laying out our goals:</p>\n\n<ul><li>A web client codebase fully separated from the PHP codebase that gets its data from <a href=\"https://www.tumblr.com/docs/en/api/v2\">the API</a> in the same way our mobile apps do</li>\n<li>A development environment that’s as painless as possible</li>\n<li>Dramatically improved performance</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Isomorphic_JavaScript\">Isomorphic rendering</a></li>\n<li>Robust testing tools</li>\n<li>Built on a framework with a healthy and active community, with some critical mass of adoption</li>\n</ul><p>With those goals in mind, we spent the beginning of the year on research - figuring out what kinds of things people were building web apps with these days, tooling around with them ourselves, and trying to assess if they would be right for Tumblr. We landed, eventually, on <a href=\"https://reactjs.org\">React</a>, with a Node server (running <a href=\"https://expressjs.com\">Express</a>) to make isomorphism as easy as possible. On top of that, we’re using <a href=\"https://github.com/react-cosmos/react-cosmos\">Cosmos</a> for developing components, <a href=\"https://github.com/ReactTraining/react-router\">React Router</a> for routing, and <a href=\"https://www.typescriptlang.org\">TypeScript</a> to make our lives better in general. (My colleague Paul already wrote about what went into our decision to use TypeScript <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">here</a>.)</p>\n\n<p>As if writing an entirely new stack wasn’t enough, we realized along the way that this was our perfect chance to start deploying containerized applications with <a href=\"https://kubernetes.io\">Kubernetes</a>, a first for Tumblr. We had never previously deployed a node application to production here, and didn’t have the infrastructure for it, so it was a perfect green field on which to build another new and exciting thing. There’ll be more to come later on Kubernetes.</p>\n\n<p>So where are we now? Well, we’ve launched one page powered by this new app - <a href=\"https://idiot.tumblr.com/image/161468715911\">image pages, like this</a> - with more to come very soon. </p>\n<figure data-orig-width=\"1282\" data-orig-height=\"1264\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/8681ef3cfe07d9c162d61686d162c1de/tumblr_inline_p6px0kkOnp1qc01bx_540.png\" alt=\"image\" data-orig-width=\"1282\" data-orig-height=\"1264\"/></figure><p>Though it may seem simple, there’s a whole new technological world between you clicking that link and seeing that page. There’s a ton more exciting stuff happening now and still to happen in the future, and we’re looking forward to sharing it here. Wanna get in on the action yourself? Come work with us: <a href=\"https://www.tumblr.com/jobs\">https://www.tumblr.com/jobs</a>.</p>\n\n<p>- Robbie Dawson / <a class=\"tumblelog\" href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\">@idiot</a></p>\n</blockquote>","reblog":{"comment":"","tree_html":"<p><a href=\"https://javascript.tumblr.com/post/172624931022/a-big-new-beautiful-future-for-the-web-at-tumblr\" class=\"tumblr_blog\">javascript</a>:</p>\n<blockquote>\n<p>In the ten years that Tumblr’s been around, a lot has changed in web technology. We’ve kept up, of course, but it’s always been a process of addition, layering one new technology on top of another. And what we were working with—a custom framework built on top of <a href=\"http://backbonejs.org\">Backbone</a>, messily entangled with a PHP backend and its associated templates—was becoming unmanageable. Our piecemeal conversions to new technologies meant we had thousands of ways posts were rendered (only a moderate exaggeration). And each of those had to be updated individually to support new features or design changes.</p>\n\n<p>It was time to step back, survey the world of web technology, and clean house in a big way. That we could finally test some of the new tech we’ve been itching to use was just a little bonus.</p>\n\n<p>We started by laying out our goals:</p>\n\n<ul>\n<li>A web client codebase fully separated from the PHP codebase that gets its data from <a href=\"https://www.tumblr.com/docs/en/api/v2\">the API</a> in the same way our mobile apps do</li>\n<li>A development environment that’s as painless as possible</li>\n<li>Dramatically improved performance</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Isomorphic_JavaScript\">Isomorphic rendering</a></li>\n<li>Robust testing tools</li>\n<li>Built on a framework with a healthy and active community, with some critical mass of adoption</li>\n</ul>\n<p>With those goals in mind, we spent the beginning of the year on research - figuring out what kinds of things people were building web apps with these days, tooling around with them ourselves, and trying to assess if they would be right for Tumblr. We landed, eventually, on <a href=\"https://reactjs.org\">React</a>, with a Node server (running <a href=\"https://expressjs.com\">Express</a>) to make isomorphism as easy as possible. On top of that, we’re using <a href=\"https://github.com/react-cosmos/react-cosmos\">Cosmos</a> for developing components, <a href=\"https://github.com/ReactTraining/react-router\">React Router</a> for routing, and <a href=\"https://www.typescriptlang.org\">TypeScript</a> to make our lives better in general. (My colleague Paul already wrote about what went into our decision to use TypeScript <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">here</a>.)</p>\n\n<p>As if writing an entirely new stack wasn’t enough, we realized along the way that this was our perfect chance to start deploying containerized applications with <a href=\"https://kubernetes.io\">Kubernetes</a>, a first for Tumblr. We had never previously deployed a node application to production here, and didn’t have the infrastructure for it, so it was a perfect green field on which to build another new and exciting thing. There’ll be more to come later on Kubernetes.</p>\n\n<p>So where are we now? Well, we’ve launched one page powered by this new app - <a href=\"https://idiot.tumblr.com/image/161468715911\">image pages, like this</a> - with more to come very soon. </p>\n<figure data-orig-width=\"1282\" data-orig-height=\"1264\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/8681ef3cfe07d9c162d61686d162c1de/tumblr_inline_p6px0kkOnp1qc01bx_540.png\" alt=\"image\" data-orig-width=\"1282\" data-orig-height=\"1264\"></figure><p>Though it may seem simple, there’s a whole new technological world between you clicking that link and seeing that page. There’s a ton more exciting stuff happening now and still to happen in the future, and we’re looking forward to sharing it here. Wanna get in on the action yourself? Come work with us: <a href=\"https://www.tumblr.com/jobs\">https://www.tumblr.com/jobs</a>.</p>\n\n<p>- Robbie Dawson / <a class=\"tumblelog\" href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\">@idiot</a></p>\n</blockquote>"},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"172624931022"},"content_raw":"<p>In the ten years that Tumblr’s been around, a lot has changed in web technology. We’ve kept up, of course, but it’s always been a process of addition, layering one new technology on top of another. And what we were working with—a custom framework built on top of <a href=\"http://backbonejs.org\">Backbone</a>, messily entangled with a PHP backend and its associated templates—was becoming unmanageable. Our piecemeal conversions to new technologies meant we had thousands of ways posts were rendered (only a moderate exaggeration). And each of those had to be updated individually to support new features or design changes.</p>\n\n<p>It was time to step back, survey the world of web technology, and clean house in a big way. That we could finally test some of the new tech we’ve been itching to use was just a little bonus.</p>\n\n<p>We started by laying out our goals:</p>\n\n<ul><li>A web client codebase fully separated from the PHP codebase that gets its data from <a href=\"https://www.tumblr.com/docs/en/api/v2\">the API</a> in the same way our mobile apps do</li>\n<li>A development environment that’s as painless as possible</li>\n<li>Dramatically improved performance</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Isomorphic_JavaScript\">Isomorphic rendering</a></li>\n<li>Robust testing tools</li>\n<li>Built on a framework with a healthy and active community, with some critical mass of adoption</li>\n</ul><p>With those goals in mind, we spent the beginning of the year on research - figuring out what kinds of things people were building web apps with these days, tooling around with them ourselves, and trying to assess if they would be right for Tumblr. We landed, eventually, on <a href=\"https://reactjs.org\">React</a>, with a Node server (running <a href=\"https://expressjs.com\">Express</a>) to make isomorphism as easy as possible. On top of that, we’re using <a href=\"https://github.com/react-cosmos/react-cosmos\">Cosmos</a> for developing components, <a href=\"https://github.com/ReactTraining/react-router\">React Router</a> for routing, and <a href=\"https://www.typescriptlang.org\">TypeScript</a> to make our lives better in general. (My colleague Paul already wrote about what went into our decision to use TypeScript <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">here</a>.)</p>\n\n<p>As if writing an entirely new stack wasn’t enough, we realized along the way that this was our perfect chance to start deploying containerized applications with <a href=\"https://kubernetes.io\">Kubernetes</a>, a first for Tumblr. We had never previously deployed a node application to production here, and didn’t have the infrastructure for it, so it was a perfect green field on which to build another new and exciting thing. There’ll be more to come later on Kubernetes.</p>\n\n<p>So where are we now? Well, we’ve launched one page powered by this new app - <a href=\"https://idiot.tumblr.com/image/161468715911\">image pages, like this</a> - with more to come very soon. </p>\n<figure data-orig-width=\"1282\" data-orig-height=\"1264\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/8681ef3cfe07d9c162d61686d162c1de/tumblr_inline_p6px0kkOnp1qc01bx_540.png\" alt=\"image\" data-orig-width=\"1282\" data-orig-height=\"1264\"></figure><p>Though it may seem simple, there’s a whole new technological world between you clicking that link and seeing that page. There’s a ton more exciting stuff happening now and still to happen in the future, and we’re looking forward to sharing it here. Wanna get in on the action yourself? Come work with us: <a href=\"https://www.tumblr.com/jobs\">https://www.tumblr.com/jobs</a>.</p>\n\n<p>- Robbie Dawson / <a class=\"tumblelog\" href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\">@idiot</a></p>","content":"<p>In the ten years that Tumblr&rsquo;s been around, a lot has changed in web technology. We&rsquo;ve kept up, of course, but it&rsquo;s always been a process of addition, layering one new technology on top of another. And what we were working with&mdash;a custom framework built on top of <a href=\"http://backbonejs.org\">Backbone</a>, messily entangled with a PHP backend and its associated templates&mdash;was becoming unmanageable. Our piecemeal conversions to new technologies meant we had thousands of ways posts were rendered (only a moderate exaggeration). And each of those had to be updated individually to support new features or design changes.</p>\n\n<p>It was time to step back, survey the world of web technology, and clean house in a big way. That we could finally test some of the new tech we&rsquo;ve been itching to use was just a little bonus.</p>\n\n<p>We started by laying out our goals:</p>\n\n<ul><li>A web client codebase fully separated from the PHP codebase that gets its data from <a href=\"https://www.tumblr.com/docs/en/api/v2\">the API</a> in the same way our mobile apps do</li>\n<li>A development environment that&rsquo;s as painless as possible</li>\n<li>Dramatically improved performance</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Isomorphic_JavaScript\">Isomorphic rendering</a></li>\n<li>Robust testing tools</li>\n<li>Built on a framework with a healthy and active community, with some critical mass of adoption</li>\n</ul><p>With those goals in mind, we spent the beginning of the year on research - figuring out what kinds of things people were building web apps with these days, tooling around with them ourselves, and trying to assess if they would be right for Tumblr. We landed, eventually, on <a href=\"https://reactjs.org\">React</a>, with a Node server (running <a href=\"https://expressjs.com\">Express</a>) to make isomorphism as easy as possible. On top of that, we&rsquo;re using <a href=\"https://github.com/react-cosmos/react-cosmos\">Cosmos</a> for developing components, <a href=\"https://github.com/ReactTraining/react-router\">React Router</a> for routing, and <a href=\"https://www.typescriptlang.org\">TypeScript</a> to make our lives better in general. (My colleague Paul already wrote about what went into our decision to use TypeScript <a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\">here</a>.)</p>\n\n<p>As if writing an entirely new stack wasn&rsquo;t enough, we realized along the way that this was our perfect chance to start deploying containerized applications with <a href=\"https://kubernetes.io\">Kubernetes</a>, a first for Tumblr. We had never previously deployed a node application to production here, and didn&rsquo;t have the infrastructure for it, so it was a perfect green field on which to build another new and exciting thing. There&rsquo;ll be more to come later on Kubernetes.</p>\n\n<p>So where are we now? Well, we&rsquo;ve launched one page powered by this new app - <a href=\"https://idiot.tumblr.com/image/161468715911\">image pages, like this</a> - with more to come very soon.&nbsp;</p>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/8681ef3cfe07d9c162d61686d162c1de/tumblr_inline_p6px0kkOnp1qc01bx_540.png\" class=\"\"/></figure><p>Though it may seem simple, there&rsquo;s a whole new technological world between you clicking that link and seeing that page. There&rsquo;s a ton more exciting stuff happening now and still to happen in the future, and we&rsquo;re looking forward to sharing it here. Wanna get in on the action yourself? Come work with us: <a href=\"https://www.tumblr.com/jobs\">https://www.tumblr.com/jobs</a>.</p>\n\n<p>- Robbie Dawson / <a href=\"https://tmblr.co/m7-mz7MAygA9Hv2PKLlnDDA\">@idiot</a></p>","is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":171593053597,"post_url":"https://engineering.tumblr.com/post/171593053597/using-srcset-and-sizes-to-make-responsive-html5","slug":"using-srcset-and-sizes-to-make-responsive-html5","date":"2018-03-06 16:00:21 GMT","timestamp":1520352021,"state":"published","format":"html","reblog_key":"v2mKjc91","tags":["javascript","react"],"short_url":"https://tmblr.co/ZI3nWx2VplZMT","summary":"Using srcset and sizes to make responsive HTML5 images","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":74,"title":"Using srcset and sizes to make responsive HTML5 images","body":"<p><a href=\"https://javascript.tumblr.com/post/171557569007/responsive-images\" class=\"tumblr_blog\">javascript</a>:</p><blockquote>\n<p>If you’ve tried to implement responsive\n  <a href=\"https://en.wikipedia.org/wiki/Retina_Display\">retina</a> images on the web, you’ve probably come across one of the <a href=\"http://brianflove.com/2014/08/07/retina-display-images/\">many</a> <a href=\"https://www.keycdn.com/blog/responsive-images/\">informative</a> <a href=\"http://woutervanderzee.nl/artikelen/responsive-images-srcset-sizes/\">articles</a> on the subject. Many of the posts I found about it are really great, but they downplay or overlook a point\n  that I think is really important:</p>\n<blockquote>\n  <p class=\"npf_quote\" data-npf='{\"subtype\":\"quote\"}'>\n    <i>If you set up srcset and sizes, your browser will automatically download higher density images on retina devices, if\n      they are available.</i>\n  </p>\n</blockquote>\n<p>Let’s investigate how to do that.</p>\n<h2>What is srcset?</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset\">\n    <code>srcset</code>\n  </a> is a list of image URLs with a descriptor. The descriptor can either be the image width (in the form of\n  <code>[width in pixels]w</code>), or the screen pixel density that is best for the image (ex.\n  <code>2x</code>,\n  <code>3x</code>, etc). Here’s an example that uses image widths:\n  <code>srcset=\"image_20.jpg 20w, image_40.jpg 40w</code>. Here is an example that uses screen pixel density:\n  <code>srcset=\"image_20.jpg 1x, image_40.jpg 2x</code>.</p>\n<h2>Don’t be fooled by pixel density</h2>\n<p>To my surprise, you can’t combine image width and pixel density descriptors in the\n  <code>srcset</code> list. In other words, something like this is invalid and your browser will silently fall back to the\n  <code>src</code> url:\n  <code>srcset=\"image_20.jpg 20w 1x, image_40.jpg 40w 2x\"</code>. So, how do you get images that are responsive based on image width\n  <i>and</i> screen density?</p>\n<p>When you use an image width descriptor, the image size is chosen based on the viewport width. What if you need to display\n  your image in a smaller size than the entire width of the viewport?\n  <code>sizes</code> can help.</p>\n<h2>Sizes</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-sizes\">\n    <code>sizes</code>\n  </a> is a list of optional queries and sizes that correspond to the width of the image on screen. For example,\n  <code>sizes=\"(max-width: 540px) 100vw, 540px\"</code> means that the image will be displayed at 100% of the viewport width for screens up to 540px wide, and at 540px for screens\n  541px and wider.</p>\n<h2>Retina images, automatically</h2>\n<p>The ✨🎩 magic 🎩✨ part of all of this is when your browser chooses the image from\n  <code>srcset</code> to fit the size at which it will be displayed, it\n  <b>automatically factors in screen density</b>. So if your screen density is 1x, on a device with a viewport that is larger\n  than 540px wide, you will get the size greater than or equal to 540w. But if your screen density is 2x, on a device with\n  a viewport that is larger than 540px wide, you will get the size greater than or equal to 1080w.</p>\n<p>You can see it in action in\n  <a href=\"https://codepen.io/paulrehkugler/pen/PQxvJR\">this Codepen</a>. To test\n  <code>srcset</code> and\n  <code>sizes</code>, you need to request the page with a new incognito window each time, so that you don’t load images from your browser cache.\n  Try it with:</p>\n<ul><li>a wide viewport with 1x pixel density (Apple Thunderbolt Display, most random external monitors) to get the 540w image</li>\n  <li>a wide viewport with 2x pixel density (MacBook Pro display) to get the 1280w image</li>\n  <li>a narrow viewport with 1x pixel density to get the 500w or 250w image (depending on how small your viewport is)</li>\n</ul><h2>How we use this at Tumblr</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"><img src=\"https://78.media.tumblr.com/62a4a9e4b8459fb404f1bb0bc843442f/tumblr_inline_p6m7hq0PgB1qzyw0r_540.png\" alt=\"screenshot of a demo photoset built with srcset and sizes\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"/></figure><p>Once you have a good base of\n  <code>srcset</code> and\n  <code>sizes</code>, it’s pretty simple to modify\n  <code>sizes</code> for different layouts. Consider Tumblr photosets: some rows may have 1 image, some rows may have 3 images. We can simply\n  scale down the values in\n  <code>sizes</code> by the number of images per row, and the browser will automatically figure out which image is the correct size. Here is\n  an example\n  <a href=\"https://codepen.io/paulrehkugler/pen/zRMVvZ\">on Codepen</a>.</p>\n<p>An example row in a photoset might look like this:</p>\n<pre><code>\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image1_540.gif\"\n      srcset=\"image1_250.gif 250w, image1_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image2_540.gif\"\n      srcset=\"image2_250.gif 250w, image2_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>With simple markup like this, your browser can figure out which image size will be best to display in the photoset row, based\n  on the viewport width and display pixel density. It just goes to show that if you set up\n  <code>srcset</code> and\n  <code>sizes</code> correctly, the browser will take care of retina images automatically.</p>\n<p>\n  – Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@pr</a>)</p>\n</blockquote>\n<figure class=\"tmblr-full\" data-orig-height=\"349\" data-orig-width=\"500\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NmYcOb\"><img src=\"https://78.media.tumblr.com/d2914fee38a857eb8827accde35c8d5b/tumblr_ot1nsw8njN1tr6ni8o1_500.gif\" data-orig-height=\"349\" data-orig-width=\"500\"/></figure><p>Look at this amazing work!</p>","reblog":{"comment":"<p><figure class=\"tmblr-full\" data-orig-height=\"349\" data-orig-width=\"500\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NmYcOb\"><img src=\"https://78.media.tumblr.com/d2914fee38a857eb8827accde35c8d5b/tumblr_ot1nsw8njN1tr6ni8o1_500.gif\" data-orig-height=\"349\" data-orig-width=\"500\"></figure><p>Look at this amazing work!</p></p>","tree_html":"<p><a href=\"https://javascript.tumblr.com/post/171557569007/responsive-images\" class=\"tumblr_blog\">javascript</a>:</p>\n<blockquote>\n<p>If you’ve tried to implement responsive\n  <a href=\"https://en.wikipedia.org/wiki/Retina_Display\">retina</a> images on the web, you’ve probably come across one of the <a href=\"http://brianflove.com/2014/08/07/retina-display-images/\">many</a> <a href=\"https://www.keycdn.com/blog/responsive-images/\">informative</a> <a href=\"http://woutervanderzee.nl/artikelen/responsive-images-srcset-sizes/\">articles</a> on the subject. Many of the posts I found about it are really great, but they downplay or overlook a point\n  that I think is really important:</p>\n<blockquote>\n  <p class=\"npf_quote\" data-npf='{\"subtype\":\"quote\"}'>\n    <i>If you set up srcset and sizes, your browser will automatically download higher density images on retina devices, if\n      they are available.</i>\n  </p>\n</blockquote>\n<p>Let’s investigate how to do that.</p>\n<h2>What is srcset?</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset\">\n    <code>srcset</code>\n  </a> is a list of image URLs with a descriptor. The descriptor can either be the image width (in the form of\n  <code>[width in pixels]w</code>), or the screen pixel density that is best for the image (ex.\n  <code>2x</code>,\n  <code>3x</code>, etc). Here’s an example that uses image widths:\n  <code>srcset=\"image_20.jpg 20w, image_40.jpg 40w</code>. Here is an example that uses screen pixel density:\n  <code>srcset=\"image_20.jpg 1x, image_40.jpg 2x</code>.</p>\n<h2>Don’t be fooled by pixel density</h2>\n<p>To my surprise, you can’t combine image width and pixel density descriptors in the\n  <code>srcset</code> list. In other words, something like this is invalid and your browser will silently fall back to the\n  <code>src</code> url:\n  <code>srcset=\"image_20.jpg 20w 1x, image_40.jpg 40w 2x\"</code>. So, how do you get images that are responsive based on image width\n  <i>and</i> screen density?</p>\n<p>When you use an image width descriptor, the image size is chosen based on the viewport width. What if you need to display\n  your image in a smaller size than the entire width of the viewport?\n  <code>sizes</code> can help.</p>\n<h2>Sizes</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-sizes\">\n    <code>sizes</code>\n  </a> is a list of optional queries and sizes that correspond to the width of the image on screen. For example,\n  <code>sizes=\"(max-width: 540px) 100vw, 540px\"</code> means that the image will be displayed at 100% of the viewport width for screens up to 540px wide, and at 540px for screens\n  541px and wider.</p>\n<h2>Retina images, automatically</h2>\n<p>The ✨🎩 magic 🎩✨ part of all of this is when your browser chooses the image from\n  <code>srcset</code> to fit the size at which it will be displayed, it\n  <b>automatically factors in screen density</b>. So if your screen density is 1x, on a device with a viewport that is larger\n  than 540px wide, you will get the size greater than or equal to 540w. But if your screen density is 2x, on a device with\n  a viewport that is larger than 540px wide, you will get the size greater than or equal to 1080w.</p>\n<p>You can see it in action in\n  <a href=\"https://codepen.io/paulrehkugler/pen/PQxvJR\">this Codepen</a>. To test\n  <code>srcset</code> and\n  <code>sizes</code>, you need to request the page with a new incognito window each time, so that you don’t load images from your browser cache.\n  Try it with:</p>\n<ul>\n<li>a wide viewport with 1x pixel density (Apple Thunderbolt Display, most random external monitors) to get the 540w image</li>\n  <li>a wide viewport with 2x pixel density (MacBook Pro display) to get the 1280w image</li>\n  <li>a narrow viewport with 1x pixel density to get the 500w or 250w image (depending on how small your viewport is)</li>\n</ul>\n<h2>How we use this at Tumblr</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"><img src=\"https://78.media.tumblr.com/62a4a9e4b8459fb404f1bb0bc843442f/tumblr_inline_p6m7hq0PgB1qzyw0r_540.png\" alt=\"screenshot of a demo photoset built with srcset and sizes\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"></figure><p>Once you have a good base of\n  <code>srcset</code> and\n  <code>sizes</code>, it’s pretty simple to modify\n  <code>sizes</code> for different layouts. Consider Tumblr photosets: some rows may have 1 image, some rows may have 3 images. We can simply\n  scale down the values in\n  <code>sizes</code> by the number of images per row, and the browser will automatically figure out which image is the correct size. Here is\n  an example\n  <a href=\"https://codepen.io/paulrehkugler/pen/zRMVvZ\">on Codepen</a>.</p>\n<p>An example row in a photoset might look like this:</p>\n<pre><code>\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image1_540.gif\"\n      srcset=\"image1_250.gif 250w, image1_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image2_540.gif\"\n      srcset=\"image2_250.gif 250w, image2_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>With simple markup like this, your browser can figure out which image size will be best to display in the photoset row, based\n  on the viewport width and display pixel density. It just goes to show that if you set up\n  <code>srcset</code> and\n  <code>sizes</code> correctly, the browser will take care of retina images automatically.</p>\n<p>\n  – Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@pr</a>)</p>\n</blockquote>"},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"171557569007"},"content_raw":"<p>If you’ve tried to implement responsive\n  <a href=\"https://en.wikipedia.org/wiki/Retina_Display\">retina</a> images on the web, you’ve probably come across one of the <a href=\"http://brianflove.com/2014/08/07/retina-display-images/\">many</a> <a href=\"https://www.keycdn.com/blog/responsive-images/\">informative</a> <a href=\"http://woutervanderzee.nl/artikelen/responsive-images-srcset-sizes/\">articles</a> on the subject. Many of the posts I found about it are really great, but they downplay or overlook a point\n  that I think is really important:</p>\n<blockquote>\n  <p class=\"npf_quote\" data-npf='{\"subtype\":\"quote\"}'>\n    <i>If you set up srcset and sizes, your browser will automatically download higher density images on retina devices, if\n      they are available.</i>\n  </p>\n</blockquote>\n<p>Let’s investigate how to do that.</p>\n<h2>What is srcset?</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset\">\n    <code>srcset</code>\n  </a> is a list of image URLs with a descriptor. The descriptor can either be the image width (in the form of\n  <code>[width in pixels]w</code>), or the screen pixel density that is best for the image (ex.\n  <code>2x</code>,\n  <code>3x</code>, etc). Here’s an example that uses image widths:\n  <code>srcset=\"image_20.jpg 20w, image_40.jpg 40w</code>. Here is an example that uses screen pixel density:\n  <code>srcset=\"image_20.jpg 1x, image_40.jpg 2x</code>.</p>\n<h2>Don’t be fooled by pixel density</h2>\n<p>To my surprise, you can’t combine image width and pixel density descriptors in the\n  <code>srcset</code> list. In other words, something like this is invalid and your browser will silently fall back to the\n  <code>src</code> url:\n  <code>srcset=\"image_20.jpg 20w 1x, image_40.jpg 40w 2x\"</code>. So, how do you get images that are responsive based on image width\n  <i>and</i> screen density?</p>\n<p>When you use an image width descriptor, the image size is chosen based on the viewport width. What if you need to display\n  your image in a smaller size than the entire width of the viewport?\n  <code>sizes</code> can help.</p>\n<h2>Sizes</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-sizes\">\n    <code>sizes</code>\n  </a> is a list of optional queries and sizes that correspond to the width of the image on screen. For example,\n  <code>sizes=\"(max-width: 540px) 100vw, 540px\"</code> means that the image will be displayed at 100% of the viewport width for screens up to 540px wide, and at 540px for screens\n  541px and wider.</p>\n<h2>Retina images, automatically</h2>\n<p>The ✨🎩 magic 🎩✨ part of all of this is when your browser chooses the image from\n  <code>srcset</code> to fit the size at which it will be displayed, it\n  <b>automatically factors in screen density</b>. So if your screen density is 1x, on a device with a viewport that is larger\n  than 540px wide, you will get the size greater than or equal to 540w. But if your screen density is 2x, on a device with\n  a viewport that is larger than 540px wide, you will get the size greater than or equal to 1080w.</p>\n<p>You can see it in action in\n  <a href=\"https://codepen.io/paulrehkugler/pen/PQxvJR\">this Codepen</a>. To test\n  <code>srcset</code> and\n  <code>sizes</code>, you need to request the page with a new incognito window each time, so that you don’t load images from your browser cache.\n  Try it with:</p>\n<ul><li>a wide viewport with 1x pixel density (Apple Thunderbolt Display, most random external monitors) to get the 540w image</li>\n  <li>a wide viewport with 2x pixel density (MacBook Pro display) to get the 1280w image</li>\n  <li>a narrow viewport with 1x pixel density to get the 500w or 250w image (depending on how small your viewport is)</li>\n</ul><h2>How we use this at Tumblr</h2>\n<figure class=\"tmblr-full\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"><img src=\"https://78.media.tumblr.com/62a4a9e4b8459fb404f1bb0bc843442f/tumblr_inline_p6m7hq0PgB1qzyw0r_540.png\" alt=\"screenshot of a demo photoset built with srcset and sizes\" data-orig-height=\"810\" data-orig-width=\"416\" data-orig-src=\"https://78.media.tumblr.com/60cf5e90ef3da160cca9ae30835c2686/tumblr_inline_p4z3htcQlA1qzfx03_540.png\"></figure><p>Once you have a good base of\n  <code>srcset</code> and\n  <code>sizes</code>, it’s pretty simple to modify\n  <code>sizes</code> for different layouts. Consider Tumblr photosets: some rows may have 1 image, some rows may have 3 images. We can simply\n  scale down the values in\n  <code>sizes</code> by the number of images per row, and the browser will automatically figure out which image is the correct size. Here is\n  an example\n  <a href=\"https://codepen.io/paulrehkugler/pen/zRMVvZ\">on Codepen</a>.</p>\n<p>An example row in a photoset might look like this:</p>\n<pre><code>\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image1_540.gif\"\n      srcset=\"image1_250.gif 250w, image1_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image2_540.gif\"\n      srcset=\"image2_250.gif 250w, image2_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>With simple markup like this, your browser can figure out which image size will be best to display in the photoset row, based\n  on the viewport width and display pixel density. It just goes to show that if you set up\n  <code>srcset</code> and\n  <code>sizes</code> correctly, the browser will take care of retina images automatically.</p>\n<p>\n  – Paul Rehkugler (<a class=\"tumblelog\" href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@pr</a>)</p>","content":"<p>If you&rsquo;ve tried to implement responsive\n  <a href=\"https://en.wikipedia.org/wiki/Retina_Display\">retina</a> images on the web, you&rsquo;ve probably come across one of the <a href=\"http://brianflove.com/2014/08/07/retina-display-images/\">many</a> <a href=\"https://www.keycdn.com/blog/responsive-images/\">informative</a> <a href=\"http://woutervanderzee.nl/artikelen/responsive-images-srcset-sizes/\">articles</a> on the subject. Many of the posts I found about it are really great, but they downplay or overlook a point\n  that I think is really important:</p>\n<blockquote>\n  <p class=\"npf_quote\" data-npf=\"{&quot;subtype&quot;:&quot;quote&quot;}\">\n    <i>If you set up srcset and sizes, your browser will automatically download higher density images on retina devices, if\n      they are available.</i>\n  </p>\n</blockquote>\n<p>Let&rsquo;s investigate how to do that.</p>\n<h2>What is srcset?</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset\">\n    <code>srcset</code>\n  </a> is a list of image URLs with a descriptor. The descriptor can either be the image width (in the form of\n  <code>[width in pixels]w</code>), or the screen pixel density that is best for the image (ex.\n  <code>2x</code>,\n  <code>3x</code>, etc). Here&rsquo;s an example that uses image widths:\n  <code>srcset=\"image_20.jpg 20w, image_40.jpg 40w</code>. Here is an example that uses screen pixel density:\n  <code>srcset=\"image_20.jpg 1x, image_40.jpg 2x</code>.</p>\n<h2>Don&rsquo;t be fooled by pixel density</h2>\n<p>To my surprise, you can&rsquo;t combine image width and pixel density descriptors in the\n  <code>srcset</code> list. In other words, something like this is invalid and your browser will silently fall back to the\n  <code>src</code> url:\n  <code>srcset=\"image_20.jpg 20w 1x, image_40.jpg 40w 2x\"</code>. So, how do you get images that are responsive based on image width\n  <i>and</i> screen density?</p>\n<p>When you use an image width descriptor, the image size is chosen based on the viewport width. What if you need to display\n  your image in a smaller size than the entire width of the viewport?\n  <code>sizes</code> can help.</p>\n<h2>Sizes</h2>\n<p>\n  <a href=\"http://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-sizes\">\n    <code>sizes</code>\n  </a> is a list of optional queries and sizes that correspond to the width of the image on screen. For example,\n  <code>sizes=\"(max-width: 540px) 100vw, 540px\"</code> means that the image will be displayed at 100% of the viewport width for screens up to 540px wide, and at 540px for screens\n  541px and wider.</p>\n<h2>Retina images, automatically</h2>\n<p>The &#10024;&#127913; magic &#127913;&#10024; part of all of this is when your browser chooses the image from\n  <code>srcset</code> to fit the size at which it will be displayed, it\n  <b>automatically factors in screen density</b>. So if your screen density is 1x, on a device with a viewport that is larger\n  than 540px wide, you will get the size greater than or equal to 540w. But if your screen density is 2x, on a device with\n  a viewport that is larger than 540px wide, you will get the size greater than or equal to 1080w.</p>\n<p>You can see it in action in\n  <a href=\"https://codepen.io/paulrehkugler/pen/PQxvJR\">this Codepen</a>. To test\n  <code>srcset</code> and\n  <code>sizes</code>, you need to request the page with a new incognito window each time, so that you don&rsquo;t load images from your browser cache.\n  Try it with:</p>\n<ul><li>a wide viewport with 1x pixel density (Apple Thunderbolt Display, most random external monitors) to get the 540w image</li>\n  <li>a wide viewport with 2x pixel density (MacBook Pro display) to get the 1280w image</li>\n  <li>a narrow viewport with 1x pixel density to get the 500w or 250w image (depending on how small your viewport is)</li>\n</ul><h2>How we use this at Tumblr</h2>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/62a4a9e4b8459fb404f1bb0bc843442f/tumblr_inline_p6m7hq0PgB1qzyw0r_540.png\" class=\"\"/></figure><p>Once you have a good base of\n  <code>srcset</code> and\n  <code>sizes</code>, it&rsquo;s pretty simple to modify\n  <code>sizes</code> for different layouts. Consider Tumblr photosets: some rows may have 1 image, some rows may have 3 images. We can simply\n  scale down the values in\n  <code>sizes</code> by the number of images per row, and the browser will automatically figure out which image is the correct size. Here is\n  an example\n  <a href=\"https://codepen.io/paulrehkugler/pen/zRMVvZ\">on Codepen</a>.</p>\n<p>An example row in a photoset might look like this:</p>\n<pre><code>\n&lt;div class=\"row\"&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image1_540.gif\"\n      srcset=\"image1_250.gif 250w, image1_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n  &lt;div class=\"item\"&gt;\n    &lt;img\n      src=\"image2_540.gif\"\n      srcset=\"image2_250.gif 250w, image2_540.gif 540w\"\n      sizes=\"(max-width: 818px) 50vw, 270px\" /&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>With simple markup like this, your browser can figure out which image size will be best to display in the photoset row, based\n  on the viewport width and display pixel density. It just goes to show that if you set up\n  <code>srcset</code> and\n  <code>sizes</code> correctly, the browser will take care of retina images automatically.</p>\n<p>\n  &ndash; Paul Rehkugler (<a href=\"https://tmblr.co/mebQDhJsLeVhqb42xUuFt-A\">@pr</a>)</p>","is_root_item":true},{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"171593053597"},"content_raw":"<p><figure class=\"tmblr-full\" data-orig-height=\"349\" data-orig-width=\"500\" data-tumblr-attribution=\"strangememories:FGdFXYH0tf_SKDZvTZkRBw:ZuIuao2NmYcOb\"><img src=\"https://78.media.tumblr.com/d2914fee38a857eb8827accde35c8d5b/tumblr_ot1nsw8njN1tr6ni8o1_500.gif\" data-orig-height=\"349\" data-orig-width=\"500\"></figure><p>Look at this amazing work!</p></p>","content":"<p><figure data-tumblr-media-id=\"0\" class=\"tmblr-full\"></figure><p>Look at this amazing work!</p></p>","is_current_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":170684624684,"post_url":"https://engineering.tumblr.com/post/170684624684/nyc-php-reboot-first-up-getting-specific-about","slug":"nyc-php-reboot-first-up-getting-specific-about","date":"2018-02-09 15:00:29 GMT","timestamp":1518188429,"state":"published","format":"html","reblog_key":"6YkMar3n","tags":["meetup","php"],"short_url":"https://tmblr.co/ZI3nWx2UzcAyi","summary":"NYC PHP Reboot - First up \"Getting Specific About APIs\" with Phil Sturgeon","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":28,"title":"NYC PHP Reboot - First up \"Getting Specific About APIs\" with Phil Sturgeon","body":"<figure class=\"tmblr-full\" data-orig-height=\"474\" data-orig-width=\"716\"><img src=\"https://78.media.tumblr.com/d38e5cd228d679d1d8ab8da9595e7901/tumblr_inline_p3ug1teUCh1qzyw0r_540.jpg\" data-orig-height=\"474\" data-orig-width=\"716\"/></figure><p><b>tl;dr</b> Come and join us for the <a href=\"https://www.meetup.com/new-york-php/\">NYC PHP meetup @ Tumblr on March 1st 2018</a>.</p><h2>When</h2><p>March 1st 2018, 7pm - 9pm</p><h2>Where</h2><p><a href=\"https://www.google.com/maps/dir//tumblr+nyc/\">35 East 21st Street (21st &amp; Broadway), New York, 10010</a></p><figure class=\"tmblr-full\" data-orig-height=\"300\" data-orig-width=\"600\"><img src=\"https://78.media.tumblr.com/672d0e7f715c9502e794940a43c10945/tumblr_inline_p3ug24SxQx1qzyw0r_540.png\" data-orig-height=\"300\" data-orig-width=\"600\"/></figure><h2>Details</h2><p>The monthly NYC PHP Meetup is getting rebooted in 2018! The first meetup will be hosted at Tumblr HQ in New York City, with Phil Sturgeon as headline speaker and two or three lightning talks.</p><h2>About Phil Sturgeon</h2><p>When he&rsquo;s not talking about falling off bikes Phil Sturgeon is passionate about building great APIs. Sometimes scientists forget to label their units and they crash satellites into planets. Phil&rsquo;s science teacher always told him to label his units and JSON Schema is how you do that in a HTTP API, even AMQP too! Come and learn about the future of APIs and other PHP topics.</p><h2>We want you - for lightning talks</h2><p>We are looking for 2-3 lightning (10-15 min) talks about anything PHP related. If you&rsquo;re interested, please get in touch with <a href=\"https://secure.meetup.com/messages/?new_convo=true&amp;member_id=39865122&amp;name=Oli\">Oli Griffiths</a> via Meetup, or <a href=\"https://twitter.com/oligriffiths\">@oligriffiths</a> on Twitter. This is a great way to get into the speaking community, and to test out material you might like to submit to conferences.</p><h2>What to bring</h2><ul><li>A great attitude to all things PHP.</li>\n<li>Laptops are not necessary but we will have wifi capabilities if you want to hack along.</li>\n<li>Tumblr is generously providing pizza 🍕 and 🍺 beer/drinks.</li>\n</ul><h2>How to RSVP</h2><p>Please use <a href=\"https://www.meetup.com/new-york-php/\">Meetup</a> to RSVP. Feel free to bring a guest if they&rsquo;re not using Meetup, or encourage them to join so they can stay up-to-date.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mBWgO3jg4lxBdIkQDX2pSSg\">@oli</a></p>","reblog":{"comment":"<p><figure class=\"tmblr-full\" data-orig-height=\"474\" data-orig-width=\"716\"><img src=\"https://78.media.tumblr.com/d38e5cd228d679d1d8ab8da9595e7901/tumblr_inline_p3ug1teUCh1qzyw0r_540.jpg\" data-orig-height=\"474\" data-orig-width=\"716\"></figure><p><b>tl;dr</b> Come and join us for the <a href=\"https://www.meetup.com/new-york-php/\">NYC PHP meetup @ Tumblr on March 1st 2018</a>.</p><h2>When</h2><p>March 1st 2018, 7pm - 9pm</p><h2>Where</h2><p><a href=\"https://www.google.com/maps/dir//tumblr+nyc/\">35 East 21st Street (21st &amp; Broadway), New York, 10010</a></p><figure class=\"tmblr-full\" data-orig-height=\"300\" data-orig-width=\"600\"><img src=\"https://78.media.tumblr.com/672d0e7f715c9502e794940a43c10945/tumblr_inline_p3ug24SxQx1qzyw0r_540.png\" data-orig-height=\"300\" data-orig-width=\"600\"></figure><h2>Details</h2><p>The monthly NYC PHP Meetup is getting rebooted in 2018! The first meetup will be hosted at Tumblr HQ in New York City, with Phil Sturgeon as headline speaker and two or three lightning talks.</p><h2>About Phil Sturgeon</h2><p>When he’s not talking about falling off bikes Phil Sturgeon is passionate about building great APIs. Sometimes scientists forget to label their units and they crash satellites into planets. Phil’s science teacher always told him to label his units and JSON Schema is how you do that in a HTTP API, even AMQP too! Come and learn about the future of APIs and other PHP topics.</p><h2>We want you - for lightning talks</h2><p>We are looking for 2-3 lightning (10-15 min) talks about anything PHP related. If you’re interested, please get in touch with <a href=\"https://secure.meetup.com/messages/?new_convo=true&amp;member_id=39865122&amp;name=Oli\">Oli Griffiths</a> via Meetup, or <a href=\"https://twitter.com/oligriffiths\">@oligriffiths</a> on Twitter. This is a great way to get into the speaking community, and to test out material you might like to submit to conferences.</p><h2>What to bring</h2><ul><li>A great attitude to all things PHP.</li>\n<li>Laptops are not necessary but we will have wifi capabilities if you want to hack along.</li>\n<li>Tumblr is generously providing pizza 🍕 and 🍺 beer/drinks.</li>\n</ul><h2>How to RSVP</h2><p>Please use <a href=\"https://www.meetup.com/new-york-php/\">Meetup</a> to RSVP. Feel free to bring a guest if they’re not using Meetup, or encourage them to join so they can stay up-to-date.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mBWgO3jg4lxBdIkQDX2pSSg\">@oli</a></p></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"170684624684"},"content_raw":"<p><figure class=\"tmblr-full\" data-orig-height=\"474\" data-orig-width=\"716\"><img src=\"https://78.media.tumblr.com/d38e5cd228d679d1d8ab8da9595e7901/tumblr_inline_p3ug1teUCh1qzyw0r_540.jpg\" data-orig-height=\"474\" data-orig-width=\"716\"></figure><p><b>tl;dr</b> Come and join us for the <a href=\"https://www.meetup.com/new-york-php/\">NYC PHP meetup @ Tumblr on March 1st 2018</a>.</p><h2>When</h2><p>March 1st 2018, 7pm - 9pm</p><h2>Where</h2><p><a href=\"https://www.google.com/maps/dir//tumblr+nyc/\">35 East 21st Street (21st &amp; Broadway), New York, 10010</a></p><figure class=\"tmblr-full\" data-orig-height=\"300\" data-orig-width=\"600\"><img src=\"https://78.media.tumblr.com/672d0e7f715c9502e794940a43c10945/tumblr_inline_p3ug24SxQx1qzyw0r_540.png\" data-orig-height=\"300\" data-orig-width=\"600\"></figure><h2>Details</h2><p>The monthly NYC PHP Meetup is getting rebooted in 2018! The first meetup will be hosted at Tumblr HQ in New York City, with Phil Sturgeon as headline speaker and two or three lightning talks.</p><h2>About Phil Sturgeon</h2><p>When he’s not talking about falling off bikes Phil Sturgeon is passionate about building great APIs. Sometimes scientists forget to label their units and they crash satellites into planets. Phil’s science teacher always told him to label his units and JSON Schema is how you do that in a HTTP API, even AMQP too! Come and learn about the future of APIs and other PHP topics.</p><h2>We want you - for lightning talks</h2><p>We are looking for 2-3 lightning (10-15 min) talks about anything PHP related. If you’re interested, please get in touch with <a href=\"https://secure.meetup.com/messages/?new_convo=true&amp;member_id=39865122&amp;name=Oli\">Oli Griffiths</a> via Meetup, or <a href=\"https://twitter.com/oligriffiths\">@oligriffiths</a> on Twitter. This is a great way to get into the speaking community, and to test out material you might like to submit to conferences.</p><h2>What to bring</h2><ul><li>A great attitude to all things PHP.</li>\n<li>Laptops are not necessary but we will have wifi capabilities if you want to hack along.</li>\n<li>Tumblr is generously providing pizza 🍕 and 🍺 beer/drinks.</li>\n</ul><h2>How to RSVP</h2><p>Please use <a href=\"https://www.meetup.com/new-york-php/\">Meetup</a> to RSVP. Feel free to bring a guest if they’re not using Meetup, or encourage them to join so they can stay up-to-date.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mBWgO3jg4lxBdIkQDX2pSSg\">@oli</a></p></p>","content":"<p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d38e5cd228d679d1d8ab8da9595e7901/tumblr_inline_p3ug1teUCh1qzyw0r_540.jpg\" class=\"\"/></figure><p><b>tl;dr</b> Come and join us for the <a href=\"https://www.meetup.com/new-york-php/\">NYC PHP meetup @ Tumblr on March 1st 2018</a>.</p><h2>When</h2><p>March 1st 2018, 7pm - 9pm</p><h2>Where</h2><p><a href=\"https://www.google.com/maps/dir//tumblr+nyc/\">35 East 21st Street (21st &amp; Broadway), New York, 10010</a></p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/672d0e7f715c9502e794940a43c10945/tumblr_inline_p3ug24SxQx1qzyw0r_540.png\" class=\"\"/></figure><h2>Details</h2><p>The monthly NYC PHP Meetup is getting rebooted in 2018! The first meetup will be hosted at Tumblr HQ in New York City, with Phil Sturgeon as headline speaker and two or three lightning talks.</p><h2>About Phil Sturgeon</h2><p>When he&rsquo;s not talking about falling off bikes Phil Sturgeon is passionate about building great APIs. Sometimes scientists forget to label their units and they crash satellites into planets. Phil&rsquo;s science teacher always told him to label his units and JSON Schema is how you do that in a HTTP API, even AMQP too! Come and learn about the future of APIs and other PHP topics.</p><h2>We want you - for lightning talks</h2><p>We are looking for 2-3 lightning (10-15 min) talks about anything PHP related. If you&rsquo;re interested, please get in touch with <a href=\"https://secure.meetup.com/messages/?new_convo=true&amp;member_id=39865122&amp;name=Oli\">Oli Griffiths</a> via Meetup, or <a href=\"https://twitter.com/oligriffiths\">@oligriffiths</a> on Twitter. This is a great way to get into the speaking community, and to test out material you might like to submit to conferences.</p><h2>What to bring</h2><ul><li>A great attitude to all things PHP.</li>\n<li>Laptops are not necessary but we will have wifi capabilities if you want to hack along.</li>\n<li>Tumblr is generously providing pizza &#127829; and &#127866; beer/drinks.</li>\n</ul><h2>How to RSVP</h2><p>Please use <a href=\"https://www.meetup.com/new-york-php/\">Meetup</a> to RSVP. Feel free to bring a guest if they&rsquo;re not using Meetup, or encourage them to join so they can stay up-to-date.</p><p>- <a href=\"https://tmblr.co/mBWgO3jg4lxBdIkQDX2pSSg\">@oli</a></p></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":170040992289,"post_url":"https://engineering.tumblr.com/post/170040992289/how-i-review-code","slug":"how-i-review-code","date":"2018-01-23 15:51:00 GMT","timestamp":1516722660,"state":"published","format":"html","reblog_key":"vi8Q9Ult","tags":["engineering","code review"],"short_url":"https://tmblr.co/ZI3nWx2UNEw8X","summary":"How I review code","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":215,"title":"How I review code","body":"<p><a href=\"https://cyle.tumblr.com/post/170039642535/how-i-review-code\" class=\"tumblr_blog\">cyle</a>:</p><blockquote>\n<p>Reviewing code is one of the most important parts of an engineer’s job at Tumblr, even more so than writing code. Our codebases are shared by hundreds of engineers, so it’s critical to make sure we’re not just writing the best code we can, but <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\">that the code being written can be understood by others</a>. Taking the time to review someone else’s code is the most critical opportunity to ensure all of that is happening.</p>\n<p>At Tumblr, every code change happens in <a href=\"https://help.github.com/articles/about-pull-requests/\">a Pull Request on an internal Github instance</a>. We have repositories for the PHP backend, our database schemas, our iOS (Swift/Obj-C) and Android (Java/Kotlin) mobile apps, infrastructure projects written in Go, C/C++, Lua, Ruby, Perl, and many other projects written in Scala, Node.js, Python, and more. All of our code repositories rely on authors to write Pull Requests and get approvals from their peers before merging their changes to the master branch and deploying to production where real people interact with it.</p>\n<p>How I personally review code has changed considerably over my few years at Tumblr. Before working at Tumblr, I wrote code mostly by myself and reviewed code with a very small set of people. Shifting to a huge codebase with hundreds of contributors was a big change. Thankfully I’ve had some good teachers. I went from reviewing maybe one pull request a month to currently reviewing an average of 25 pull requests a week. Here are some of the principles that help me keep my reviews timely and helpful.</p>\n<h2>Review the code with its author in mind</h2>\n<p>The first thing I ask myself after a review has been requested of me is <i>who wrote this?</i> Are they a junior or senior engineer? Are they new to this codebase or a seasoned veteran? Have I ever reviewed their code before? Am I familiar with the project this code change contributes to?</p>\n<p>When I’m reviewing the code of someone I work with closely, I probably know pretty well what their thinking was when they wrote it, and I have an idea of what experiences they’ve been through. Junior engineers sometimes need a little more hand-holding, which usually means giving them more help with code examples and references. Senior engineers sometimes need to be reminded that highly performant, abstract, or clever code is often difficult to read and understand later, which usually means asking them for more inline comments and documentation.</p>\n<p>It’s also fundamentally important to review the code as if <i>anyone</i> could read the review you’re about to submit, not just the author. There are two main reasons for this. First, some people learn by reading the reviews that other engineers write; as a more junior engineer that’s exactly how I found out the most about the intricacies of Tumblr’s codebase. Also, in six months’ time it’s very likely you may be looking at this code again to figure out how it works. Having a helpful code review of it around can give some insight into the decisions that went into <i>why</i> it works the way it does.</p>\n<h2>Review the code with everyone else in mind, too</h2>\n<p>The core of my review, no matter who is writing the code change, centers around being able to understand the code itself and the motivations and context around it. To me, ideally anyone should be able to pop into a pull request and expect enough context to understand the code change and why it was done the way it was done and how it works the way it works. This is especially important in an old, shared codebase, where someone three years from now may be looking at your PR to figure out why you chose to do what you did. If that’s not included, or if there aren’t at least links out to the relevant context, something is wrong. More detail is always better.</p>\n<p>I don’t worry as much about code style or syntax itself, as we have automated processes to ensure that new or changed code conforms to our agreed-upon coding standards. Similarly to what I wrote about in <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\"><i>how I code now</i></a>, I look for code that is well-documented (both inline and externally), and code that is clear rather than clever. I’d rather read ten lines of verbose-but-understandable code than someone’s ninja-tastic one-liner that involves four nested ternaries. Especially if the person writing the code has been around the block a few times and been burned themselves by old, undocumented, clever code.</p>\n<p>Once I feel like I can understand the code change, I try to put myself in the shoes of someone who doesn’t deal with this area of the codebase very often (which may be the case for me at the time!) and think of how to review the code to help make it clear for <i>them</i>. I try to think of someone new being hired six months from now, looking at this code, wondering how it works.</p>\n<h2>Understand the PR’s scope</h2>\n<p>Sometimes not everything can get done in one pull request. At Tumblr we try to keep our PRs small so they can be reviewed quickly and safely, rather than bundling a ton of hard-to-review work into a 5,000-line-change PR. Because of this, sometimes the work has to be broken up into chunks, with PRs that build a foundation and lead to future PRs with finished implementations.</p>\n<p>Or, alternatively, it’s common for evergreen codepaths to have known issues or work that’s been ticketed for future sprints, so it’s become a good, common practice to leave a <code>@todo</code> in the code with the name of the ticket where that todo will get done. That way we can unblock code changes from having to be totally complete within one pull request.</p>\n<h2>Stay on top of the whole review process</h2>\n<p>The number one thing that helps me review code in a timely manner, and stay on top of updates about PRs, is email. I check every Github email I get; I make sure that <a href=\"https://help.github.com/articles/choosing-the-types-of-notifications-you-receive/\">I don’t get notified for everything that happens in the repo</a>, but I do get every email that happens relating to a PR I’m associated with. This helps me stay on top of every step in the review process, because it’s almost always a back-and-forth that ideally shouldn’t last more than a day.</p>\n<p>At Tumblr, most of our reviewers are selected by automated round-robin assignment when the PR author is ready to receive reviews. That assignment triggers an email and subscribes me to everything that happens relating to that PR. From there, it’s on me to stay on top of my email and make sure that I not only allocate time to do the review as soon as possible, but follow up on the PR if I leave a review and the author updates it in response to my review.</p>\n<h2>Remember to be a human</h2>\n<p>The most important advice for reviewing code (and, in other ways, writing code) is to remember <a href=\"https://mtlynch.io/human-code-reviews-1/\">to be a human</a>. Remember that the person who wrote the code you’re reviewing is also a human. Give them the benefit of the doubt. Be nice when you write a suggestion, or have a question, or find an edge case that they don’t seem to have covered. Even if they’re a seasoned veteran coder who has written bulletproof performant code for years, treat them like a person who makes mistakes sometimes. Even if they’re someone you work with every day and you feel comfortable cracking jokes at their expense, understand that a new person might <i>not</i> understand.</p>\n<p>Remember that shared, living codebases are often hectic and strange, especially ones that have been around for a decade. Remember that sometimes things are in a rush, so you can only do the best you can. We can’t halt everything in the name of perfect code, but we should make sure that everyone is doing the best they can, whether we’re writing or reviewing code.</p>\n</blockquote>","reblog":{"comment":"","tree_html":"<p><a href=\"https://cyle.tumblr.com/post/170039642535/how-i-review-code\" class=\"tumblr_blog\">cyle</a>:</p>\n<blockquote>\n<p>Reviewing code is one of the most important parts of an engineer’s job at Tumblr, even more so than writing code. Our codebases are shared by hundreds of engineers, so it’s critical to make sure we’re not just writing the best code we can, but <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\">that the code being written can be understood by others</a>. Taking the time to review someone else’s code is the most critical opportunity to ensure all of that is happening.</p>\n<p>At Tumblr, every code change happens in <a href=\"https://help.github.com/articles/about-pull-requests/\">a Pull Request on an internal Github instance</a>. We have repositories for the PHP backend, our database schemas, our iOS (Swift/Obj-C) and Android (Java/Kotlin) mobile apps, infrastructure projects written in Go, C/C++, Lua, Ruby, Perl, and many other projects written in Scala, Node.js, Python, and more. All of our code repositories rely on authors to write Pull Requests and get approvals from their peers before merging their changes to the master branch and deploying to production where real people interact with it.</p>\n<p>How I personally review code has changed considerably over my few years at Tumblr. Before working at Tumblr, I wrote code mostly by myself and reviewed code with a very small set of people. Shifting to a huge codebase with hundreds of contributors was a big change. Thankfully I’ve had some good teachers. I went from reviewing maybe one pull request a month to currently reviewing an average of 25 pull requests a week. Here are some of the principles that help me keep my reviews timely and helpful.</p>\n<h2>Review the code with its author in mind</h2>\n<p>The first thing I ask myself after a review has been requested of me is <i>who wrote this?</i> Are they a junior or senior engineer? Are they new to this codebase or a seasoned veteran? Have I ever reviewed their code before? Am I familiar with the project this code change contributes to?</p>\n<p>When I’m reviewing the code of someone I work with closely, I probably know pretty well what their thinking was when they wrote it, and I have an idea of what experiences they’ve been through. Junior engineers sometimes need a little more hand-holding, which usually means giving them more help with code examples and references. Senior engineers sometimes need to be reminded that highly performant, abstract, or clever code is often difficult to read and understand later, which usually means asking them for more inline comments and documentation.</p>\n<p>It’s also fundamentally important to review the code as if <i>anyone</i> could read the review you’re about to submit, not just the author. There are two main reasons for this. First, some people learn by reading the reviews that other engineers write; as a more junior engineer that’s exactly how I found out the most about the intricacies of Tumblr’s codebase. Also, in six months’ time it’s very likely you may be looking at this code again to figure out how it works. Having a helpful code review of it around can give some insight into the decisions that went into <i>why</i> it works the way it does.</p>\n<h2>Review the code with everyone else in mind, too</h2>\n<p>The core of my review, no matter who is writing the code change, centers around being able to understand the code itself and the motivations and context around it. To me, ideally anyone should be able to pop into a pull request and expect enough context to understand the code change and why it was done the way it was done and how it works the way it works. This is especially important in an old, shared codebase, where someone three years from now may be looking at your PR to figure out why you chose to do what you did. If that’s not included, or if there aren’t at least links out to the relevant context, something is wrong. More detail is always better.</p>\n<p>I don’t worry as much about code style or syntax itself, as we have automated processes to ensure that new or changed code conforms to our agreed-upon coding standards. Similarly to what I wrote about in <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\"><i>how I code now</i></a>, I look for code that is well-documented (both inline and externally), and code that is clear rather than clever. I’d rather read ten lines of verbose-but-understandable code than someone’s ninja-tastic one-liner that involves four nested ternaries. Especially if the person writing the code has been around the block a few times and been burned themselves by old, undocumented, clever code.</p>\n<p>Once I feel like I can understand the code change, I try to put myself in the shoes of someone who doesn’t deal with this area of the codebase very often (which may be the case for me at the time!) and think of how to review the code to help make it clear for <i>them</i>. I try to think of someone new being hired six months from now, looking at this code, wondering how it works.</p>\n<h2>Understand the PR’s scope</h2>\n<p>Sometimes not everything can get done in one pull request. At Tumblr we try to keep our PRs small so they can be reviewed quickly and safely, rather than bundling a ton of hard-to-review work into a 5,000-line-change PR. Because of this, sometimes the work has to be broken up into chunks, with PRs that build a foundation and lead to future PRs with finished implementations.</p>\n<p>Or, alternatively, it’s common for evergreen codepaths to have known issues or work that’s been ticketed for future sprints, so it’s become a good, common practice to leave a <code>@todo</code> in the code with the name of the ticket where that todo will get done. That way we can unblock code changes from having to be totally complete within one pull request.</p>\n<h2>Stay on top of the whole review process</h2>\n<p>The number one thing that helps me review code in a timely manner, and stay on top of updates about PRs, is email. I check every Github email I get; I make sure that <a href=\"https://help.github.com/articles/choosing-the-types-of-notifications-you-receive/\">I don’t get notified for everything that happens in the repo</a>, but I do get every email that happens relating to a PR I’m associated with. This helps me stay on top of every step in the review process, because it’s almost always a back-and-forth that ideally shouldn’t last more than a day.</p>\n<p>At Tumblr, most of our reviewers are selected by automated round-robin assignment when the PR author is ready to receive reviews. That assignment triggers an email and subscribes me to everything that happens relating to that PR. From there, it’s on me to stay on top of my email and make sure that I not only allocate time to do the review as soon as possible, but follow up on the PR if I leave a review and the author updates it in response to my review.</p>\n<h2>Remember to be a human</h2>\n<p>The most important advice for reviewing code (and, in other ways, writing code) is to remember <a href=\"https://mtlynch.io/human-code-reviews-1/\">to be a human</a>. Remember that the person who wrote the code you’re reviewing is also a human. Give them the benefit of the doubt. Be nice when you write a suggestion, or have a question, or find an edge case that they don’t seem to have covered. Even if they’re a seasoned veteran coder who has written bulletproof performant code for years, treat them like a person who makes mistakes sometimes. Even if they’re someone you work with every day and you feel comfortable cracking jokes at their expense, understand that a new person might <i>not</i> understand.</p>\n<p>Remember that shared, living codebases are often hectic and strange, especially ones that have been around for a decade. Remember that sometimes things are in a rush, so you can only do the best you can. We can’t halt everything in the name of perfect code, but we should make sure that everyone is doing the best they can, whether we’re writing or reviewing code.</p>\n</blockquote>"},"trail":[{"blog":{"name":"cyle","active":true,"theme":{"avatar_shape":"circle","background_color":"#FFFFFF","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os.png","header_image_focused":"https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os_2048_v2.png","header_image_scaled":"https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os_2048_v2.png","header_stretch":true,"link_color":"#d469cd","show_avatar":false,"show_description":false,"show_header_image":true,"show_title":false,"title_color":"#d71b2e","title_font":"Sofia Pro","title_font_weight":"regular"},"share_likes":false,"share_following":true,"can_be_followed":true},"post":{"id":"170039642535"},"content_raw":"<p>Reviewing code is one of the most important parts of an engineer’s job at Tumblr, even more so than writing code. Our codebases are shared by hundreds of engineers, so it’s critical to make sure we’re not just writing the best code we can, but <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\">that the code being written can be understood by others</a>. Taking the time to review someone else’s code is the most critical opportunity to ensure all of that is happening.</p>\n<p>At Tumblr, every code change happens in <a href=\"https://help.github.com/articles/about-pull-requests/\">a Pull Request on an internal Github instance</a>. We have repositories for the PHP backend, our database schemas, our iOS (Swift/Obj-C) and Android (Java/Kotlin) mobile apps, infrastructure projects written in Go, C/C++, Lua, Ruby, Perl, and many other projects written in Scala, Node.js, Python, and more. All of our code repositories rely on authors to write Pull Requests and get approvals from their peers before merging their changes to the master branch and deploying to production where real people interact with it.</p>\n<p>How I personally review code has changed considerably over my few years at Tumblr. Before working at Tumblr, I wrote code mostly by myself and reviewed code with a very small set of people. Shifting to a huge codebase with hundreds of contributors was a big change. Thankfully I’ve had some good teachers. I went from reviewing maybe one pull request a month to currently reviewing an average of 25 pull requests a week. Here are some of the principles that help me keep my reviews timely and helpful.</p>\n<h2>Review the code with its author in mind</h2>\n<p>The first thing I ask myself after a review has been requested of me is <i>who wrote this?</i> Are they a junior or senior engineer? Are they new to this codebase or a seasoned veteran? Have I ever reviewed their code before? Am I familiar with the project this code change contributes to?</p>\n<p>When I’m reviewing the code of someone I work with closely, I probably know pretty well what their thinking was when they wrote it, and I have an idea of what experiences they’ve been through. Junior engineers sometimes need a little more hand-holding, which usually means giving them more help with code examples and references. Senior engineers sometimes need to be reminded that highly performant, abstract, or clever code is often difficult to read and understand later, which usually means asking them for more inline comments and documentation.</p>\n<p>It’s also fundamentally important to review the code as if <i>anyone</i> could read the review you’re about to submit, not just the author. There are two main reasons for this. First, some people learn by reading the reviews that other engineers write; as a more junior engineer that’s exactly how I found out the most about the intricacies of Tumblr’s codebase. Also, in six months’ time it’s very likely you may be looking at this code again to figure out how it works. Having a helpful code review of it around can give some insight into the decisions that went into <i>why</i> it works the way it does.</p>\n<h2>Review the code with everyone else in mind, too</h2>\n<p>The core of my review, no matter who is writing the code change, centers around being able to understand the code itself and the motivations and context around it. To me, ideally anyone should be able to pop into a pull request and expect enough context to understand the code change and why it was done the way it was done and how it works the way it works. This is especially important in an old, shared codebase, where someone three years from now may be looking at your PR to figure out why you chose to do what you did. If that’s not included, or if there aren’t at least links out to the relevant context, something is wrong. More detail is always better.</p>\n<p>I don’t worry as much about code style or syntax itself, as we have automated processes to ensure that new or changed code conforms to our agreed-upon coding standards. Similarly to what I wrote about in <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\"><i>how I code now</i></a>, I look for code that is well-documented (both inline and externally), and code that is clear rather than clever. I’d rather read ten lines of verbose-but-understandable code than someone’s ninja-tastic one-liner that involves four nested ternaries. Especially if the person writing the code has been around the block a few times and been burned themselves by old, undocumented, clever code.</p>\n<p>Once I feel like I can understand the code change, I try to put myself in the shoes of someone who doesn’t deal with this area of the codebase very often (which may be the case for me at the time!) and think of how to review the code to help make it clear for <i>them</i>. I try to think of someone new being hired six months from now, looking at this code, wondering how it works.</p>\n<h2>Understand the PR’s scope</h2>\n<p>Sometimes not everything can get done in one pull request. At Tumblr we try to keep our PRs small so they can be reviewed quickly and safely, rather than bundling a ton of hard-to-review work into a 5,000-line-change PR. Because of this, sometimes the work has to be broken up into chunks, with PRs that build a foundation and lead to future PRs with finished implementations.</p>\n<p>Or, alternatively, it’s common for evergreen codepaths to have known issues or work that’s been ticketed for future sprints, so it’s become a good, common practice to leave a <code>@todo</code> in the code with the name of the ticket where that todo will get done. That way we can unblock code changes from having to be totally complete within one pull request.</p>\n<h2>Stay on top of the whole review process</h2>\n<p>The number one thing that helps me review code in a timely manner, and stay on top of updates about PRs, is email. I check every Github email I get; I make sure that <a href=\"https://help.github.com/articles/choosing-the-types-of-notifications-you-receive/\">I don’t get notified for everything that happens in the repo</a>, but I do get every email that happens relating to a PR I’m associated with. This helps me stay on top of every step in the review process, because it’s almost always a back-and-forth that ideally shouldn’t last more than a day.</p>\n<p>At Tumblr, most of our reviewers are selected by automated round-robin assignment when the PR author is ready to receive reviews. That assignment triggers an email and subscribes me to everything that happens relating to that PR. From there, it’s on me to stay on top of my email and make sure that I not only allocate time to do the review as soon as possible, but follow up on the PR if I leave a review and the author updates it in response to my review.</p>\n<h2>Remember to be a human</h2>\n<p>The most important advice for reviewing code (and, in other ways, writing code) is to remember <a href=\"https://mtlynch.io/human-code-reviews-1/\">to be a human</a>. Remember that the person who wrote the code you’re reviewing is also a human. Give them the benefit of the doubt. Be nice when you write a suggestion, or have a question, or find an edge case that they don’t seem to have covered. Even if they’re a seasoned veteran coder who has written bulletproof performant code for years, treat them like a person who makes mistakes sometimes. Even if they’re someone you work with every day and you feel comfortable cracking jokes at their expense, understand that a new person might <i>not</i> understand.</p>\n<p>Remember that shared, living codebases are often hectic and strange, especially ones that have been around for a decade. Remember that sometimes things are in a rush, so you can only do the best you can. We can’t halt everything in the name of perfect code, but we should make sure that everyone is doing the best they can, whether we’re writing or reviewing code.</p>","content":"<p>Reviewing code is one of the most important parts of an engineer&rsquo;s job at Tumblr, even more so than writing code. Our codebases are shared by hundreds of engineers, so it&rsquo;s critical to make sure we&rsquo;re not just writing the best code we can, but <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\">that the code being written can be understood by others</a>. Taking the time to review someone else&rsquo;s code is the most critical opportunity to ensure all of that is happening.</p>\n<p>At Tumblr, every code change happens in <a href=\"https://help.github.com/articles/about-pull-requests/\">a Pull Request on an internal Github instance</a>. We have repositories for the PHP backend, our database schemas, our iOS (Swift/Obj-C) and Android (Java/Kotlin) mobile apps, infrastructure projects written in Go, C/C++, Lua, Ruby, Perl, and many other projects written in Scala, Node.js, Python, and more. All of our code repositories rely on authors to write Pull Requests and get approvals from their peers before merging their changes to the master branch and deploying to production where real people interact with it.</p>\n<p>How I personally review code has changed considerably over my few years at Tumblr. Before working at Tumblr, I wrote code mostly by myself and reviewed code with a very small set of people. Shifting to a huge codebase with hundreds of contributors was a big change. Thankfully I&rsquo;ve had some good teachers. I went from reviewing maybe one pull request a month to currently reviewing an average of 25 pull requests a week. Here are some of the principles that help me keep my reviews timely and helpful.</p>\n<h2>Review the code with its author in mind</h2>\n<p>The first thing I ask myself after a review has been requested of me is <i>who wrote this?</i> Are they a junior or senior engineer? Are they new to this codebase or a seasoned veteran? Have I ever reviewed their code before? Am I familiar with the project this code change contributes to?</p>\n<p>When I&rsquo;m reviewing the code of someone I work with closely, I probably know pretty well what their thinking was when they wrote it, and I have an idea of what experiences they&rsquo;ve been through. Junior engineers sometimes need a little more hand-holding, which usually means giving them more help with code examples and references. Senior engineers sometimes need to be reminded that highly performant, abstract, or clever code is often difficult to read and understand later, which usually means asking them for more inline comments and documentation.</p>\n<p>It&rsquo;s also fundamentally important to review the code as if <i>anyone</i> could read the review you&rsquo;re about to submit, not just the author. There are two main reasons for this. First, some people learn by reading the reviews that other engineers write; as a more junior engineer that&rsquo;s exactly how I found out the most about the intricacies of Tumblr&rsquo;s codebase. Also, in six months&rsquo; time it&rsquo;s very likely you may be looking at this code again to figure out how it works. Having a helpful code review of it around can give some insight into the decisions that went into <i>why</i> it works the way it does.</p>\n<h2>Review the code with everyone else in mind, too</h2>\n<p>The core of my review, no matter who is writing the code change, centers around being able to understand the code itself and the motivations and context around it. To me, ideally anyone should be able to pop into a pull request and expect enough context to understand the code change and why it was done the way it was done and how it works the way it works. This is especially important in an old, shared codebase, where someone three years from now may be looking at your PR to figure out why you chose to do what you did. If that&rsquo;s not included, or if there aren&rsquo;t at least links out to the relevant context, something is wrong. More detail is always better.</p>\n<p>I don&rsquo;t worry as much about code style or syntax itself, as we have automated processes to ensure that new or changed code conforms to our agreed-upon coding standards. Similarly to what I wrote about in <a href=\"https://engineering.tumblr.com/post/156934724082/how-i-code-now\"><i>how I code now</i></a>, I look for code that is well-documented (both inline and externally), and code that is clear rather than clever. I&rsquo;d rather read ten lines of verbose-but-understandable code than someone&rsquo;s ninja-tastic one-liner that involves four nested ternaries. Especially if the person writing the code has been around the block a few times and been burned themselves by old, undocumented, clever code.</p>\n<p>Once I feel like I can understand the code change, I try to put myself in the shoes of someone who doesn&rsquo;t deal with this area of the codebase very often (which may be the case for me at the time!) and think of how to review the code to help make it clear for <i>them</i>. I try to think of someone new being hired six months from now, looking at this code, wondering how it works.</p>\n<h2>Understand the PR&rsquo;s scope</h2>\n<p>Sometimes not everything can get done in one pull request. At Tumblr we try to keep our PRs small so they can be reviewed quickly and safely, rather than bundling a ton of hard-to-review work into a 5,000-line-change PR. Because of this, sometimes the work has to be broken up into chunks, with PRs that build a foundation and lead to future PRs with finished implementations.</p>\n<p>Or, alternatively, it&rsquo;s common for evergreen codepaths to have known issues or work that&rsquo;s been ticketed for future sprints, so it&rsquo;s become a good, common practice to leave a <code>@todo</code> in the code with the name of the ticket where that todo will get done. That way we can unblock code changes from having to be totally complete within one pull request.</p>\n<h2>Stay on top of the whole review process</h2>\n<p>The number one thing that helps me review code in a timely manner, and stay on top of updates about PRs, is email. I check every Github email I get; I make sure that <a href=\"https://help.github.com/articles/choosing-the-types-of-notifications-you-receive/\">I don&rsquo;t get notified for everything that happens in the repo</a>, but I do get every email that happens relating to a PR I&rsquo;m associated with. This helps me stay on top of every step in the review process, because it&rsquo;s almost always a back-and-forth that ideally shouldn&rsquo;t last more than a day.</p>\n<p>At Tumblr, most of our reviewers are selected by automated round-robin assignment when the PR author is ready to receive reviews. That assignment triggers an email and subscribes me to everything that happens relating to that PR. From there, it&rsquo;s on me to stay on top of my email and make sure that I not only allocate time to do the review as soon as possible, but follow up on the PR if I leave a review and the author updates it in response to my review.</p>\n<h2>Remember to be a human</h2>\n<p>The most important advice for reviewing code (and, in other ways, writing code) is to remember <a href=\"https://mtlynch.io/human-code-reviews-1/\">to be a human</a>. Remember that the person who wrote the code you&rsquo;re reviewing is also a human. Give them the benefit of the doubt. Be nice when you write a suggestion, or have a question, or find an edge case that they don&rsquo;t seem to have covered. Even if they&rsquo;re a seasoned veteran coder who has written bulletproof performant code for years, treat them like a person who makes mistakes sometimes. Even if they&rsquo;re someone you work with every day and you feel comfortable cracking jokes at their expense, understand that a new person might <i>not</i> understand.</p>\n<p>Remember that shared, living codebases are often hectic and strange, especially ones that have been around for a decade. Remember that sometimes things are in a rush, so you can only do the best you can. We can&rsquo;t halt everything in the name of perfect code, but we should make sure that everyone is doing the best they can, whether we&rsquo;re writing or reviewing code.</p>","is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":165261504692,"post_url":"https://engineering.tumblr.com/post/165261504692/flow-and-typescript","slug":"flow-and-typescript","date":"2017-09-12 15:00:34 GMT","timestamp":1505228434,"state":"published","format":"html","reblog_key":"ezVtuUIs","tags":["javascript","tumblr engineering"],"short_url":"https://tmblr.co/ZI3nWx2PwMd2q","summary":"Flow and TypeScript","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":117,"title":"Flow and TypeScript","body":"<p><a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" class=\"tumblr_blog\">javascript</a>:</p><blockquote>\n<p>One of the Core Web team’s goals at Tumblr is to reduce the number of runtime issues that we see in our React codebase. To help move some of those issues from runtime to compile time, I evaluated the two leading type systems, <a href=\"https://flow.org/\">Flow</a> and <a href=\"https://www.typescriptlang.org/\">TypeScript</a>, to see if they could give us more type safety. I did a bit of background reading about the differences between Flow and TypeScript to see what the community had to say about them.</p>\n<h2><b>Background Reading</b></h2>\n<p><b><a href=\"https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/\">TypeScript, Flow and the Importance of Toolchains over Tools</a> by Ben Teese</b></p>\n<p>This post claims that Flow and TypeScript are similar enough that you should choose whichever of them is easier to integrate with your other tools. For Angular development, it recommends using TypeScript; for React, Flow.</p>\n<p><b><a href=\"https://blog.mariusschulz.com/2017/01/13/typescript-vs-flow\">TypeScript vs. Flow</a> by Marius Schulz</b></p>\n<p>This post claims that both TypeScript and Flow are equally good.</p>\n<p><b><a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\">Flow vs. Typescript</a> by Jan Varwig</b></p>\n<p>This post outlines the author’s experience with using Flow in a React codebase. It advocates switching from Flow to TypeScript because of Flow’s unhelpful error messages, bad tooling, and propensity to spread untyped code. It also claims that most of the type annotations are able to be shared between Flow and TypeScript with only minor changes.</p>\n<p><b><a href=\"http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html\">Type Systems for JavaScript</a> by Oliver Zeigermann</b></p>\n<p>This slideshow shows many differences around the philosophies and goals of TypeScript and Flow, and it gives detailed explanations in the differences between the two type systems. It explains IDE support and how to get access to third-party type definitions.</p>\n<p><b>Lack of Consensus</b></p>\n<p>It seems like many people have differing opinions about which type system is better for a React codebase. Because there wasn’t a broad consensus across the community, I decided to get some first-hand experience with each of these tools to see which one would be most practical and helpful for use at Tumblr.</p>\n<h2><b>Project Setup</b></h2>\n<p>I worked with a sample application to vet Flow and TypeScript. The application I used was <a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\">Microsoft’s TypeScript React Starter</a>. It uses <a href=\"https://github.com/wmonk/create-react-app-typescript_\">a custom fork of create-react-app</a> to get TypeScript set up. When testing out Flow, I used the <a href=\"https://github.com/facebookincubator/create-react-app\">standard version of create-react-app</a> and used the source code from this exercise.</p>\n<p>For the most part, Flow and TypeScript are basically interchangeable. I was able to reuse most of the source code between both projects with only minor changes. Here are some examples of changes I needed to make to get my TypeScript code working with Flow:</p>\n<ul><li>Flow requires that types are imported using import type where TypeScript re-uses import.</li>\n<li>Some generic type constraints are different in redux’s type declarations between Flow and TypeScript, so I dropped the generic constraint for Flow.</li>\n<li>Types cannot have the same name as constants, so I had to rename a few small things (see below).</li>\n</ul><h2><b>Testing</b></h2>\n<p>After I got the project prepared I set up the following situations to see which tool performed better. These are my assumptions of the most common situations in which a type checker will help when writing React code on a day-to-day basis.</p>\n<h2>Handling an Unnecessary Case in a Switch</h2>\n<p><b>TypeScript</b>\n</p>\n<figure data-orig-width=\"834\" data-orig-height=\"434\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5011f197d5c52bb539989337e4f64c9d/tumblr_inline_ovx1byaLP01qzfx03_540.png\" alt=\"Unused switch case in TypeScript\" data-orig-width=\"834\" data-orig-height=\"434\"/></figure><p>TypeScript realizes that <code>'not_real'</code> is not a possible case for the switch.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"801\" data-orig-height=\"420\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a2b1a381b5c87d6fca6a42a450d438a8/tumblr_inline_ovx1c7gVy21qzfx03_540.png\" alt=\"Unused switch case in Flow\" data-orig-width=\"801\" data-orig-height=\"420\"/></figure><p>Flow does not detect any issue.</p>\n<h2>Declaring Variables with Same Name as Type</h2>\n<p><b>TypeScript</b>\n</p>\n<figure data-orig-width=\"538\" data-orig-height=\"147\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/02301e3fc8ff70a69e2213eb43e0b632/tumblr_inline_ovx1cjTey61qzfx03_540.png\" alt=\"Overloaded name in TypeScript\" data-orig-width=\"538\" data-orig-height=\"147\"/></figure><p>TypeScript allows types to have the same name as constants, and it allows Command-clicking on the types to see their declarations.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"563\" data-orig-height=\"165\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/678a7949781a05354b7fbf63594f92af/tumblr_inline_ovx1cuQBqo1qzfx03_540.png\" alt=\"Overloaded name workaround in Flow\" data-orig-width=\"563\" data-orig-height=\"165\"/></figure><p>Flow requires types and constants to have different names. In this case, I needed to rename the type to <code>INCREMENT_ENTHUSIASM_T</code> to appease Flow’s type checker.</p>\n<h2>Returning Incorrect Type from Function</h2>\n<p><b>TypeScript</b></p>\n<pre><code>[ts]\n    Type '{ enthusiasmLevel: string; languageName: string; }' is not assignable to type 'StoreState'.\n      Types of property 'enthusiasmLevel' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n</code></pre>\n<p><b>Flow 0.52</b></p>\n<pre><code>[flow] object literal (This type is incompatible with the expected return type of object type Property `enthusiasmLevel` is incompatible:)</code></pre>\n<p><b>Flow 0.53</b></p>\n<pre><code>[flow] property `enthusiasmLevel` of StoreState (Property not found in number) [flow] property `languageName` of StoreState (Property not found in number)</code></pre>\n<h2>Missing Required Props When Instantiating a Component</h2>\n<p><b>TypeScript</b></p>\n<figure data-orig-width=\"993\" data-orig-height=\"223\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d3439ea93490295bfd2fdc84d20376ec/tumblr_inline_ovx1d9BGAH1qzfx03_540.png\" alt=\"Missing required property in TypeScript\" data-orig-width=\"993\" data-orig-height=\"223\"/></figure><p>TypeScript shows the error at the site where the properties are missing with the error:</p>\n<pre><code>[ts] Type '{}' is not assignable to type 'IntrinsicAttributes &amp; Props'. Type '{}' is not assignable to type 'Props'. Property 'name' is missing in type '{}'.\n</code></pre>\n<p><b>Flow</b></p>\n<figure data-orig-width=\"684\" data-orig-height=\"213\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a6931fde85c4e63cd529179f9eccb8f3/tumblr_inline_ovx1dnPILf1qzfx03_540.png\" alt=\"Missing required property in Flow\" data-orig-width=\"684\" data-orig-height=\"213\"/></figure><p>Flow shows the error <i>within the component where the property will be used, with no way to discover which call site is missing a property.</i> This can be very confusing in codebases that have lots of reusable components. Flow displays this error:</p>\n<pre><code>[flow] property `name` of Props (Property not found in props of React element `Hello`)\n</code></pre>\n<h2>Code Safety</h2>\n<p><b>TypeScript</b></p>\n<p>TypeScript allows enforcing full type coverage on .ts files with the <code>noImplicitAny</code> flag in the tsconfig.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"506\" data-orig-height=\"572\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/19c65f3c03bf586883f86293dc562d5e/tumblr_inline_ovx1e1ioBc1qzfx03_540.png\" alt=\"Code coverage plugin in Flow\" data-orig-width=\"506\" data-orig-height=\"572\"/></figure><p>Flow provides a code coverage plugin so that you can see which lines are implicitly not typed.<br/></p>\n<h2><b>Other Considerations</b></h2>\n<p>Flow has the most React community support and tooling, so there is much more documentation about how to get Flow and React working together. TypeScript is more popular with Angular developers. Choosing TypeScript may be breaking from community standards, so we may have more issues that don’t have a simple answer on Google.</p>\n<h2><b>Conclusion</b></h2>\n<p>I concluded that we should use TypeScript because it seems easier to work with. My experience seems to line up with <a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\">this blog post</a>. It has better error messages to debug type issues and its integration with VSCode makes coding more pleasant and transparent. If this ends up being the wrong choice later on, our codebase will be portable to Flow with some minor changes.</p>\n<p>Shortly after arriving at this conclusion, Flow 0.53 was released and <a href=\"https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627\">a blog post on Medium</a> published touting it’s “even better support for React”. However, after running through the test cases above, I only found one case where Flow had improved its error messaging. TypeScript still seems like the more reliable, easier to use solution.</p>\n<h2><b>Further Reading</b></h2>\n<p>To continue our journey with TypeScript, I will need to integrate it into our codebase and teach it to the rest of our frontend developers. <a href=\"https://javascriptplayground.com/blog/2017/04/react-typescript/\">Getting started with TypeScript and React</a> and <a href=\"http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/\">Setting up a new Typescript 1.9 and React project</a> look like they will be helpful articles when integrating TypeScript into our codebase. <a href=\"https://basarat.gitbooks.io/typescript/content/\">TypeScript Deep Dive</a> looks like a great book for JavaScript developers that aren’t familar with TypeScript.</p>\n<p>– Paul Rehkugler (<a href=\"https://blog.paulrehkugler.com/\">@pr</a>)</p>\n</blockquote>","reblog":{"comment":"","tree_html":"<p><a href=\"https://javascript.tumblr.com/post/165082071937/flow-and-typescript\" class=\"tumblr_blog\">javascript</a>:</p>\n<blockquote>\n<p>One of the Core Web team’s goals at Tumblr is to reduce the number of runtime issues that we see in our React codebase. To help move some of those issues from runtime to compile time, I evaluated the two leading type systems, <a href=\"https://flow.org/\">Flow</a> and <a href=\"https://www.typescriptlang.org/\">TypeScript</a>, to see if they could give us more type safety. I did a bit of background reading about the differences between Flow and TypeScript to see what the community had to say about them.</p>\n<h2><b>Background Reading</b></h2>\n<p><b><a href=\"https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/\">TypeScript, Flow and the Importance of Toolchains over Tools</a> by Ben Teese</b></p>\n<p>This post claims that Flow and TypeScript are similar enough that you should choose whichever of them is easier to integrate with your other tools. For Angular development, it recommends using TypeScript; for React, Flow.</p>\n<p><b><a href=\"https://blog.mariusschulz.com/2017/01/13/typescript-vs-flow\">TypeScript vs. Flow</a> by Marius Schulz</b></p>\n<p>This post claims that both TypeScript and Flow are equally good.</p>\n<p><b><a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\">Flow vs. Typescript</a> by Jan Varwig</b></p>\n<p>This post outlines the author’s experience with using Flow in a React codebase. It advocates switching from Flow to TypeScript because of Flow’s unhelpful error messages, bad tooling, and propensity to spread untyped code. It also claims that most of the type annotations are able to be shared between Flow and TypeScript with only minor changes.</p>\n<p><b><a href=\"http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html\">Type Systems for JavaScript</a> by Oliver Zeigermann</b></p>\n<p>This slideshow shows many differences around the philosophies and goals of TypeScript and Flow, and it gives detailed explanations in the differences between the two type systems. It explains IDE support and how to get access to third-party type definitions.</p>\n<p><b>Lack of Consensus</b></p>\n<p>It seems like many people have differing opinions about which type system is better for a React codebase. Because there wasn’t a broad consensus across the community, I decided to get some first-hand experience with each of these tools to see which one would be most practical and helpful for use at Tumblr.</p>\n<h2><b>Project Setup</b></h2>\n<p>I worked with a sample application to vet Flow and TypeScript. The application I used was <a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\">Microsoft’s TypeScript React Starter</a>. It uses <a href=\"https://github.com/wmonk/create-react-app-typescript_\">a custom fork of create-react-app</a> to get TypeScript set up. When testing out Flow, I used the <a href=\"https://github.com/facebookincubator/create-react-app\">standard version of create-react-app</a> and used the source code from this exercise.</p>\n<p>For the most part, Flow and TypeScript are basically interchangeable. I was able to reuse most of the source code between both projects with only minor changes. Here are some examples of changes I needed to make to get my TypeScript code working with Flow:</p>\n<ul>\n<li>Flow requires that types are imported using import type where TypeScript re-uses import.</li>\n<li>Some generic type constraints are different in redux’s type declarations between Flow and TypeScript, so I dropped the generic constraint for Flow.</li>\n<li>Types cannot have the same name as constants, so I had to rename a few small things (see below).</li>\n</ul>\n<h2><b>Testing</b></h2>\n<p>After I got the project prepared I set up the following situations to see which tool performed better. These are my assumptions of the most common situations in which a type checker will help when writing React code on a day-to-day basis.</p>\n<h2>Handling an Unnecessary Case in a Switch</h2>\n<p><b>TypeScript</b>\n</p>\n<figure data-orig-width=\"834\" data-orig-height=\"434\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5011f197d5c52bb539989337e4f64c9d/tumblr_inline_ovx1byaLP01qzfx03_540.png\" alt=\"Unused switch case in TypeScript\" data-orig-width=\"834\" data-orig-height=\"434\"></figure><p>TypeScript realizes that <code>'not_real'</code> is not a possible case for the switch.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"801\" data-orig-height=\"420\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a2b1a381b5c87d6fca6a42a450d438a8/tumblr_inline_ovx1c7gVy21qzfx03_540.png\" alt=\"Unused switch case in Flow\" data-orig-width=\"801\" data-orig-height=\"420\"></figure><p>Flow does not detect any issue.</p>\n<h2>Declaring Variables with Same Name as Type</h2>\n<p><b>TypeScript</b>\n</p>\n<figure data-orig-width=\"538\" data-orig-height=\"147\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/02301e3fc8ff70a69e2213eb43e0b632/tumblr_inline_ovx1cjTey61qzfx03_540.png\" alt=\"Overloaded name in TypeScript\" data-orig-width=\"538\" data-orig-height=\"147\"></figure><p>TypeScript allows types to have the same name as constants, and it allows Command-clicking on the types to see their declarations.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"563\" data-orig-height=\"165\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/678a7949781a05354b7fbf63594f92af/tumblr_inline_ovx1cuQBqo1qzfx03_540.png\" alt=\"Overloaded name workaround in Flow\" data-orig-width=\"563\" data-orig-height=\"165\"></figure><p>Flow requires types and constants to have different names. In this case, I needed to rename the type to <code>INCREMENT_ENTHUSIASM_T</code> to appease Flow’s type checker.</p>\n<h2>Returning Incorrect Type from Function</h2>\n<p><b>TypeScript</b></p>\n<pre><code>[ts]\n    Type '{ enthusiasmLevel: string; languageName: string; }' is not assignable to type 'StoreState'.\n      Types of property 'enthusiasmLevel' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n</code></pre>\n<p><b>Flow 0.52</b></p>\n<pre><code>[flow] object literal (This type is incompatible with the expected return type of object type Property `enthusiasmLevel` is incompatible:)</code></pre>\n<p><b>Flow 0.53</b></p>\n<pre><code>[flow] property `enthusiasmLevel` of StoreState (Property not found in number) [flow] property `languageName` of StoreState (Property not found in number)</code></pre>\n<h2>Missing Required Props When Instantiating a Component</h2>\n<p><b>TypeScript</b></p>\n<figure data-orig-width=\"993\" data-orig-height=\"223\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d3439ea93490295bfd2fdc84d20376ec/tumblr_inline_ovx1d9BGAH1qzfx03_540.png\" alt=\"Missing required property in TypeScript\" data-orig-width=\"993\" data-orig-height=\"223\"></figure><p>TypeScript shows the error at the site where the properties are missing with the error:</p>\n<pre><code>[ts] Type '{}' is not assignable to type 'IntrinsicAttributes &amp; Props'. Type '{}' is not assignable to type 'Props'. Property 'name' is missing in type '{}'.\n</code></pre>\n<p><b>Flow</b></p>\n<figure data-orig-width=\"684\" data-orig-height=\"213\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a6931fde85c4e63cd529179f9eccb8f3/tumblr_inline_ovx1dnPILf1qzfx03_540.png\" alt=\"Missing required property in Flow\" data-orig-width=\"684\" data-orig-height=\"213\"></figure><p>Flow shows the error <i>within the component where the property will be used, with no way to discover which call site is missing a property.</i> This can be very confusing in codebases that have lots of reusable components. Flow displays this error:</p>\n<pre><code>[flow] property `name` of Props (Property not found in props of React element `Hello`)\n</code></pre>\n<h2>Code Safety</h2>\n<p><b>TypeScript</b></p>\n<p>TypeScript allows enforcing full type coverage on .ts files with the <code>noImplicitAny</code> flag in the tsconfig.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"506\" data-orig-height=\"572\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/19c65f3c03bf586883f86293dc562d5e/tumblr_inline_ovx1e1ioBc1qzfx03_540.png\" alt=\"Code coverage plugin in Flow\" data-orig-width=\"506\" data-orig-height=\"572\"></figure><p>Flow provides a code coverage plugin so that you can see which lines are implicitly not typed.<br></p>\n<h2><b>Other Considerations</b></h2>\n<p>Flow has the most React community support and tooling, so there is much more documentation about how to get Flow and React working together. TypeScript is more popular with Angular developers. Choosing TypeScript may be breaking from community standards, so we may have more issues that don’t have a simple answer on Google.</p>\n<h2><b>Conclusion</b></h2>\n<p>I concluded that we should use TypeScript because it seems easier to work with. My experience seems to line up with <a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\">this blog post</a>. It has better error messages to debug type issues and its integration with VSCode makes coding more pleasant and transparent. If this ends up being the wrong choice later on, our codebase will be portable to Flow with some minor changes.</p>\n<p>Shortly after arriving at this conclusion, Flow 0.53 was released and <a href=\"https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627\">a blog post on Medium</a> published touting it’s “even better support for React”. However, after running through the test cases above, I only found one case where Flow had improved its error messaging. TypeScript still seems like the more reliable, easier to use solution.</p>\n<h2><b>Further Reading</b></h2>\n<p>To continue our journey with TypeScript, I will need to integrate it into our codebase and teach it to the rest of our frontend developers. <a href=\"https://javascriptplayground.com/blog/2017/04/react-typescript/\">Getting started with TypeScript and React</a> and <a href=\"http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/\">Setting up a new Typescript 1.9 and React project</a> look like they will be helpful articles when integrating TypeScript into our codebase. <a href=\"https://basarat.gitbooks.io/typescript/content/\">TypeScript Deep Dive</a> looks like a great book for JavaScript developers that aren’t familar with TypeScript.</p>\n<p>– Paul Rehkugler (<a href=\"https://blog.paulrehkugler.com/\">@pr</a>)</p>\n</blockquote>"},"trail":[{"blog":{"name":"javascript","active":true,"theme":{"avatar_shape":"square","background_color":"#f7df1e","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc.png","header_image_focused":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/84e64d90f019dcb95270cde757a1ec5d/ehm1tdz/lxUo6esfx/tumblr_static_ejw4lvkx17ccs0oo4o84sg4cc_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#000000","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"165082071937"},"content_raw":"<p>One of the Core Web team’s goals at Tumblr is to reduce the number of runtime issues that we see in our React codebase. To help move some of those issues from runtime to compile time, I evaluated the two leading type systems, <a href=\"https://flow.org/\">Flow</a> and <a href=\"https://www.typescriptlang.org/\">TypeScript</a>, to see if they could give us more type safety. I did a bit of background reading about the differences between Flow and TypeScript to see what the community had to say about them.</p>\n<h2><b>Background Reading</b></h2>\n<p><b><a href=\"https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/\">TypeScript, Flow and the Importance of Toolchains over Tools</a> by Ben Teese</b></p>\n<p>This post claims that Flow and TypeScript are similar enough that you should choose whichever of them is easier to integrate with your other tools. For Angular development, it recommends using TypeScript; for React, Flow.</p>\n<p><b><a href=\"https://blog.mariusschulz.com/2017/01/13/typescript-vs-flow\">TypeScript vs. Flow</a> by Marius Schulz</b></p>\n<p>This post claims that both TypeScript and Flow are equally good.</p>\n<p><b><a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\">Flow vs. Typescript</a> by Jan Varwig</b></p>\n<p>This post outlines the author’s experience with using Flow in a React codebase. It advocates switching from Flow to TypeScript because of Flow’s unhelpful error messages, bad tooling, and propensity to spread untyped code. It also claims that most of the type annotations are able to be shared between Flow and TypeScript with only minor changes.</p>\n<p><b><a href=\"http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html\">Type Systems for JavaScript</a> by Oliver Zeigermann</b></p>\n<p>This slideshow shows many differences around the philosophies and goals of TypeScript and Flow, and it gives detailed explanations in the differences between the two type systems. It explains IDE support and how to get access to third-party type definitions.</p>\n<p><b>Lack of Consensus</b></p>\n<p>It seems like many people have differing opinions about which type system is better for a React codebase. Because there wasn’t a broad consensus across the community, I decided to get some first-hand experience with each of these tools to see which one would be most practical and helpful for use at Tumblr.</p>\n<h2><b>Project Setup</b></h2>\n<p>I worked with a sample application to vet Flow and TypeScript. The application I used was <a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\">Microsoft’s TypeScript React Starter</a>. It uses <a href=\"https://github.com/wmonk/create-react-app-typescript_\">a custom fork of create-react-app</a> to get TypeScript set up. When testing out Flow, I used the <a href=\"https://github.com/facebookincubator/create-react-app\">standard version of create-react-app</a> and used the source code from this exercise.</p>\n<p>For the most part, Flow and TypeScript are basically interchangeable. I was able to reuse most of the source code between both projects with only minor changes. Here are some examples of changes I needed to make to get my TypeScript code working with Flow:</p>\n<ul><li>Flow requires that types are imported using import type where TypeScript re-uses import.</li>\n<li>Some generic type constraints are different in redux’s type declarations between Flow and TypeScript, so I dropped the generic constraint for Flow.</li>\n<li>Types cannot have the same name as constants, so I had to rename a few small things (see below).</li>\n</ul><h2><b>Testing</b></h2>\n<p>After I got the project prepared I set up the following situations to see which tool performed better. These are my assumptions of the most common situations in which a type checker will help when writing React code on a day-to-day basis.</p>\n<h2>Handling an Unnecessary Case in a Switch</h2>\n<p><b>TypeScript</b>\n</p>\n<figure data-orig-width=\"834\" data-orig-height=\"434\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5011f197d5c52bb539989337e4f64c9d/tumblr_inline_ovx1byaLP01qzfx03_540.png\" alt=\"Unused switch case in TypeScript\" data-orig-width=\"834\" data-orig-height=\"434\"></figure><p>TypeScript realizes that <code>'not_real'</code> is not a possible case for the switch.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"801\" data-orig-height=\"420\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a2b1a381b5c87d6fca6a42a450d438a8/tumblr_inline_ovx1c7gVy21qzfx03_540.png\" alt=\"Unused switch case in Flow\" data-orig-width=\"801\" data-orig-height=\"420\"></figure><p>Flow does not detect any issue.</p>\n<h2>Declaring Variables with Same Name as Type</h2>\n<p><b>TypeScript</b>\n</p>\n<figure data-orig-width=\"538\" data-orig-height=\"147\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/02301e3fc8ff70a69e2213eb43e0b632/tumblr_inline_ovx1cjTey61qzfx03_540.png\" alt=\"Overloaded name in TypeScript\" data-orig-width=\"538\" data-orig-height=\"147\"></figure><p>TypeScript allows types to have the same name as constants, and it allows Command-clicking on the types to see their declarations.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"563\" data-orig-height=\"165\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/678a7949781a05354b7fbf63594f92af/tumblr_inline_ovx1cuQBqo1qzfx03_540.png\" alt=\"Overloaded name workaround in Flow\" data-orig-width=\"563\" data-orig-height=\"165\"></figure><p>Flow requires types and constants to have different names. In this case, I needed to rename the type to <code>INCREMENT_ENTHUSIASM_T</code> to appease Flow’s type checker.</p>\n<h2>Returning Incorrect Type from Function</h2>\n<p><b>TypeScript</b></p>\n<pre><code>[ts]\n    Type '{ enthusiasmLevel: string; languageName: string; }' is not assignable to type 'StoreState'.\n      Types of property 'enthusiasmLevel' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n</code></pre>\n<p><b>Flow 0.52</b></p>\n<pre><code>[flow] object literal (This type is incompatible with the expected return type of object type Property `enthusiasmLevel` is incompatible:)</code></pre>\n<p><b>Flow 0.53</b></p>\n<pre><code>[flow] property `enthusiasmLevel` of StoreState (Property not found in number) [flow] property `languageName` of StoreState (Property not found in number)</code></pre>\n<h2>Missing Required Props When Instantiating a Component</h2>\n<p><b>TypeScript</b></p>\n<figure data-orig-width=\"993\" data-orig-height=\"223\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d3439ea93490295bfd2fdc84d20376ec/tumblr_inline_ovx1d9BGAH1qzfx03_540.png\" alt=\"Missing required property in TypeScript\" data-orig-width=\"993\" data-orig-height=\"223\"></figure><p>TypeScript shows the error at the site where the properties are missing with the error:</p>\n<pre><code>[ts] Type '{}' is not assignable to type 'IntrinsicAttributes &amp; Props'. Type '{}' is not assignable to type 'Props'. Property 'name' is missing in type '{}'.\n</code></pre>\n<p><b>Flow</b></p>\n<figure data-orig-width=\"684\" data-orig-height=\"213\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a6931fde85c4e63cd529179f9eccb8f3/tumblr_inline_ovx1dnPILf1qzfx03_540.png\" alt=\"Missing required property in Flow\" data-orig-width=\"684\" data-orig-height=\"213\"></figure><p>Flow shows the error <i>within the component where the property will be used, with no way to discover which call site is missing a property.</i> This can be very confusing in codebases that have lots of reusable components. Flow displays this error:</p>\n<pre><code>[flow] property `name` of Props (Property not found in props of React element `Hello`)\n</code></pre>\n<h2>Code Safety</h2>\n<p><b>TypeScript</b></p>\n<p>TypeScript allows enforcing full type coverage on .ts files with the <code>noImplicitAny</code> flag in the tsconfig.</p>\n<p><b>Flow</b>\n</p>\n<figure data-orig-width=\"506\" data-orig-height=\"572\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/19c65f3c03bf586883f86293dc562d5e/tumblr_inline_ovx1e1ioBc1qzfx03_540.png\" alt=\"Code coverage plugin in Flow\" data-orig-width=\"506\" data-orig-height=\"572\"></figure><p>Flow provides a code coverage plugin so that you can see which lines are implicitly not typed.<br></p>\n<h2><b>Other Considerations</b></h2>\n<p>Flow has the most React community support and tooling, so there is much more documentation about how to get Flow and React working together. TypeScript is more popular with Angular developers. Choosing TypeScript may be breaking from community standards, so we may have more issues that don’t have a simple answer on Google.</p>\n<h2><b>Conclusion</b></h2>\n<p>I concluded that we should use TypeScript because it seems easier to work with. My experience seems to line up with <a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\">this blog post</a>. It has better error messages to debug type issues and its integration with VSCode makes coding more pleasant and transparent. If this ends up being the wrong choice later on, our codebase will be portable to Flow with some minor changes.</p>\n<p>Shortly after arriving at this conclusion, Flow 0.53 was released and <a href=\"https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627\">a blog post on Medium</a> published touting it’s “even better support for React”. However, after running through the test cases above, I only found one case where Flow had improved its error messaging. TypeScript still seems like the more reliable, easier to use solution.</p>\n<h2><b>Further Reading</b></h2>\n<p>To continue our journey with TypeScript, I will need to integrate it into our codebase and teach it to the rest of our frontend developers. <a href=\"https://javascriptplayground.com/blog/2017/04/react-typescript/\">Getting started with TypeScript and React</a> and <a href=\"http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/\">Setting up a new Typescript 1.9 and React project</a> look like they will be helpful articles when integrating TypeScript into our codebase. <a href=\"https://basarat.gitbooks.io/typescript/content/\">TypeScript Deep Dive</a> looks like a great book for JavaScript developers that aren’t familar with TypeScript.</p>\n<p>– Paul Rehkugler (<a href=\"https://blog.paulrehkugler.com/\">@pr</a>)</p>","content":"<p>One of the Core Web team&rsquo;s goals at Tumblr is to reduce the number of runtime issues that we see in our React codebase. To help move some of those issues from runtime to compile time, I evaluated the two leading type systems, <a href=\"https://flow.org/\">Flow</a> and <a href=\"https://www.typescriptlang.org/\">TypeScript</a>, to see if they could give us more type safety. I did a bit of background reading about the differences between Flow and TypeScript to see what the community had to say about them.</p>\n<h2><b>Background Reading</b></h2>\n<p><b><a href=\"https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/\">TypeScript, Flow and the Importance of Toolchains over Tools</a> by Ben Teese</b></p>\n<p>This post claims that Flow and TypeScript are similar enough that you should choose whichever of them is easier to integrate with your other tools. For Angular development, it recommends using TypeScript; for React, Flow.</p>\n<p><b><a href=\"https://blog.mariusschulz.com/2017/01/13/typescript-vs-flow\">TypeScript vs. Flow</a> by Marius Schulz</b></p>\n<p>This post claims that both TypeScript and Flow are equally good.</p>\n<p><b><a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\">Flow vs. Typescript</a>&nbsp;by Jan Varwig</b></p>\n<p>This post outlines the author&rsquo;s experience with using Flow in a React codebase. It advocates switching from Flow to TypeScript because of Flow&rsquo;s unhelpful error messages, bad tooling, and propensity to spread untyped code. It also claims that most of the type annotations are able to be shared between Flow and TypeScript with only minor changes.</p>\n<p><b><a href=\"http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html\">Type Systems for JavaScript</a> by Oliver Zeigermann</b></p>\n<p>This slideshow shows many differences around the philosophies and goals of TypeScript and Flow, and it gives detailed explanations in the differences between the two type systems. It explains IDE support and how to get access to third-party type definitions.</p>\n<p><b>Lack of Consensus</b></p>\n<p>It seems like many people have differing opinions about which type system is better for a React codebase. Because there wasn&rsquo;t a broad consensus across the community, I decided to get some first-hand experience with each of these tools to see which one would be most practical and helpful for use at Tumblr.</p>\n<h2><b>Project Setup</b></h2>\n<p>I worked with a sample application to vet Flow and TypeScript. The application I used was <a href=\"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter\">Microsoft&rsquo;s TypeScript React Starter</a>. It uses <a href=\"https://github.com/wmonk/create-react-app-typescript_\">a custom fork of create-react-app</a> to get TypeScript set up. When testing out Flow, I used the <a href=\"https://github.com/facebookincubator/create-react-app\">standard version of create-react-app</a> and used the source code from this exercise.</p>\n<p>For the most part, Flow and TypeScript are basically interchangeable. I was able to reuse most of the source code between both projects with only minor changes. Here are some examples of changes I needed to make to get my TypeScript code working with Flow:</p>\n<ul><li>Flow requires that types are imported using import type where TypeScript re-uses import.</li>\n<li>Some generic type constraints are different in redux&rsquo;s type declarations between Flow and TypeScript, so I dropped the generic constraint for Flow.</li>\n<li>Types cannot have the same name as constants, so I had to rename a few small things (see below).</li>\n</ul><h2><b>Testing</b></h2>\n<p>After I got the project prepared I set up the following situations to see which tool performed better. These are my assumptions of the most common situations in which a type checker will help when writing React code on a day-to-day basis.</p>\n<h2>Handling an Unnecessary Case in a Switch</h2>\n<p><b>TypeScript</b>\n</p>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/5011f197d5c52bb539989337e4f64c9d/tumblr_inline_ovx1byaLP01qzfx03_540.png\" class=\"\"/></figure><p>TypeScript realizes that <code>'not_real'</code> is not a possible case for the switch.</p>\n<p><b>Flow</b>\n</p>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a2b1a381b5c87d6fca6a42a450d438a8/tumblr_inline_ovx1c7gVy21qzfx03_540.png\" class=\"\"/></figure><p>Flow does not detect any issue.</p>\n<h2>Declaring Variables with Same Name as Type</h2>\n<p><b>TypeScript</b>\n</p>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/02301e3fc8ff70a69e2213eb43e0b632/tumblr_inline_ovx1cjTey61qzfx03_540.png\" class=\"\"/></figure><p>TypeScript allows types to have the same name as constants, and it allows Command-clicking on the types to see their declarations.</p>\n<p><b>Flow</b>\n</p>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/678a7949781a05354b7fbf63594f92af/tumblr_inline_ovx1cuQBqo1qzfx03_540.png\" class=\"\"/></figure><p>Flow requires types and constants to have different names. In this case, I needed to rename the type to <code>INCREMENT_ENTHUSIASM_T</code> to appease Flow&rsquo;s type checker.</p>\n<h2>Returning Incorrect Type from Function</h2>\n<p><b>TypeScript</b></p>\n<pre><code>[ts]\n    Type '{ enthusiasmLevel: string; languageName: string; }' is not assignable to type 'StoreState'.\n      Types of property 'enthusiasmLevel' are incompatible.\n        Type 'string' is not assignable to type 'number'.\n</code></pre>\n<p><b>Flow 0.52</b></p>\n<pre><code>[flow] object literal (This type is incompatible with the expected return type of object type Property `enthusiasmLevel` is incompatible:)</code></pre>\n<p><b>Flow 0.53</b></p>\n<pre><code>[flow] property `enthusiasmLevel` of StoreState (Property not found in number) [flow] property `languageName` of StoreState (Property not found in number)</code></pre>\n<h2>Missing Required Props When Instantiating a Component</h2>\n<p><b>TypeScript</b></p>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/d3439ea93490295bfd2fdc84d20376ec/tumblr_inline_ovx1d9BGAH1qzfx03_540.png\" class=\"\"/></figure><p>TypeScript shows the error at the site where the properties are missing with the error:</p>\n<pre><code>[ts] Type '{}' is not assignable to type 'IntrinsicAttributes &amp; Props'. Type '{}' is not assignable to type 'Props'. Property 'name' is missing in type '{}'.\n</code></pre>\n<p><b>Flow</b></p>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/a6931fde85c4e63cd529179f9eccb8f3/tumblr_inline_ovx1dnPILf1qzfx03_540.png\" class=\"\"/></figure><p>Flow shows the error <i>within the component where the property will be used, with no way to discover which call site is missing a property.</i> This can be very confusing in codebases that have lots of reusable components. Flow displays this error:</p>\n<pre><code>[flow] property `name` of Props (Property not found in props of React element `Hello`)\n</code></pre>\n<h2>Code Safety</h2>\n<p><b>TypeScript</b></p>\n<p>TypeScript allows enforcing full type coverage on .ts files with the <code>noImplicitAny</code> flag in the tsconfig.</p>\n<p><b>Flow</b>\n</p>\n<figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/19c65f3c03bf586883f86293dc562d5e/tumblr_inline_ovx1e1ioBc1qzfx03_540.png\" class=\"\"/></figure><p>Flow provides a code coverage plugin so that you can see which lines are implicitly not typed.<br /></p>\n<h2><b>Other Considerations</b></h2>\n<p>Flow has the most React community support and tooling, so there is much more documentation about how to get Flow and React working together. TypeScript is more popular with Angular developers. Choosing TypeScript may be breaking from community standards, so we may have more issues that don&rsquo;t have a simple answer on Google.</p>\n<h2><b>Conclusion</b></h2>\n<p>I concluded that we should use TypeScript because it seems easier to work with. My experience seems to line up with <a href=\"http://jan.varwig.org/2017/02/15/flow-vs-typescript.html\">this blog post</a>. It has better error messages to debug type issues and its integration with VSCode makes coding more pleasant and transparent. If this ends up being the wrong choice later on, our codebase will be portable to Flow with some minor changes.</p>\n<p>Shortly after arriving at this conclusion, Flow 0.53 was released and <a href=\"https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627\">a blog post on Medium</a> published touting it&rsquo;s &ldquo;even better support for React&rdquo;. However, after running through the test cases above, I only found one case where Flow had improved its error messaging. TypeScript still seems like the more reliable, easier to use solution.</p>\n<h2><b>Further Reading</b></h2>\n<p>To continue our journey with TypeScript, I will need to integrate it into our codebase and teach it to the rest of our frontend developers. <a href=\"https://javascriptplayground.com/blog/2017/04/react-typescript/\">Getting started with TypeScript and React</a> and <a href=\"http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/\">Setting up a new Typescript 1.9 and React project</a> look like they will be helpful articles when integrating TypeScript into our codebase. <a href=\"https://basarat.gitbooks.io/typescript/content/\">TypeScript Deep Dive</a> looks like a great book for JavaScript developers that aren&rsquo;t familar with TypeScript.</p>\n<p>&ndash; Paul Rehkugler (<a href=\"https://blog.paulrehkugler.com/\">@pr</a>)</p>","is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":164826109535,"post_url":"https://engineering.tumblr.com/post/164826109535/building-the-tumblr-neue-post-format","slug":"building-the-tumblr-neue-post-format","date":"2017-08-31 15:00:18 GMT","timestamp":1504191618,"state":"published","format":"html","reblog_key":"V57vbnUk","tags":["engineering","neue post format","new post forms","fancy font","finally"],"short_url":"https://tmblr.co/ZI3nWx2PWPjPV","summary":"Building the Tumblr Neue Post Format","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":328,"title":"Building the Tumblr Neue Post Format","body":"<p>We&rsquo;ve been looking at improving the posting and reblogging experience in our mobile apps for a long time. As many of our power users and public API consumers are aware, posts on Tumblr are stored and served in a sanitized HTML format. This choice made the most sense when Tumblr was originally built, when using Tumblr meant visiting via a web browser on your computer on the information superhighway back in 2007.</p><p>Storing post content primarily as HTML has remained our standard for ten years; there are a significant number of assumptions in our codebase about posts being primarily HTML. To compound this, when we want to change something about how posts are made or stored, we have to think in terms of <a href=\"https://www.tumblr.com/about\">the <i>150 billion</i> posts on Tumblr</a> and the billion new posts made every month. We have to spend a lot of time thinking about that scale whenever we consider how to make posting on Tumblr a better experience.</p><p>Over a year ago, Tumblr Engineering came up with a very ambitious idea: ditch HTML entirely and move to a brand new format for how posts are created and stored. HTML is fine, but its scope is limited as it was intended for the browser, long before the concept of mobile apps existed. Conversely, the JSON standard has been heavily favored by APIs and mobile development for years, and feels much cleaner and more flexible than HTML. We can apply an extensible format and schema with JSON easier than we can with HTML.</p><p>With this in mind, we&rsquo;ve chosen to write a brand new JSON-based specification for post content. We&rsquo;re calling it the <b>Tumblr Neue Post Format</b>, or simply NPF. The NPF specification breaks apart post content into discreet <b>content blocks</b>, each defined by a <code>type</code> field. All of our existing post content easily fits into this kind of specification, affording backwards-compatibility with the billions of posts on Tumblr.</p><p>For example, right now when you add text to a post, we store and serve:</p><pre><code>&lt;p&gt;Some text in a post!&lt;p&gt;\n</code></pre><p>With NPF, the same thing is created and served this way:</p><pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Some text in a post!\"\n}\n</code></pre><p>Those two representations are fully interchangeable, but we begin to gain advantages with JSON for things HTML cannot do well, providing flexibility and extensibility for future integrations. The power of NPF really becomes critical when we want to build content blocks for Tumblr that cannot be easily represented with HTML, such as a physical location:</p><pre><code>{\n  \"type\": \"location\",\n  \"latitude\": 40.739485,\n  \"longitude\": -73.988402,\n  \"map_style\": \"quirky\"\n}\n</code></pre><p>This new JSON specification also gives us the benefit of not having to worry as much about potential security risks in malicious HTML payloads in post content. Moving from HTML to JSON allows us to have safer, more injection-proof defaults, and prevents us from having to do heavy DOM parsing at runtime, which means improved performance of our backend and mobile apps. With NPF, posting and viewing posts on Tumblr should be considerably faster and safer.</p><p>Our work so far with the NPF specification has been to reach feature parity with the rich text editor available to Tumblr users on the web, as well as extend those basic options with new ones, such as fun new text styles:</p><pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Oh, worm?\",\n  \"subtype\": \"quirky\"\n}\n</code></pre><figure data-orig-width=\"552\" data-orig-height=\"144\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/1f7ecdef4e798efe38eefb953b58e1c6/tumblr_inline_ovi7jowSSi1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"552\" data-orig-height=\"144\"/></figure><p>Our <a href=\"https://staff.tumblr.com/post/164751021560/announcing-three-new-features-for-posting-from\">initial release</a> includes support for text blocks (with inline formatting), GIF search blocks, and image upload blocks. All of these options are available in our mobile apps via the Text, Quote, and Chat post forms, as well as when you reblog a post. <i>Yes, you can now upload images in a reblog on mobile.</i></p><p>Future releases of the mobile apps will continue to close the gap with our other post options as we build NPF support for link blocks, video upload blocks, third-party video and audio blocks, and more. We also plan on allowing third-party API consumers to view and create posts using the new specification sometime in the future.</p><p>- me (@cyle) and <a class=\"tumblelog\" href=\"https://tmblr.co/mZ7idGsrb6d2Cek1sAojE_Q\">@noisysocks</a> (with love for <a class=\"tumblelog\" href=\"https://tmblr.co/mYNRRD7c5Zo8ohAJjueduRw\">@keithmcknight</a> who started the original NPF spec)</p>","reblog":{"comment":"<p>We’ve been looking at improving the posting and reblogging experience in our mobile apps for a long time. As many of our power users and public API consumers are aware, posts on Tumblr are stored and served in a sanitized HTML format. This choice made the most sense when Tumblr was originally built, when using Tumblr meant visiting via a web browser on your computer on the information superhighway back in 2007.</p><p>Storing post content primarily as HTML has remained our standard for ten years; there are a significant number of assumptions in our codebase about posts being primarily HTML. To compound this, when we want to change something about how posts are made or stored, we have to think in terms of <a href=\"https://www.tumblr.com/about\">the <i>150 billion</i> posts on Tumblr</a> and the billion new posts made every month. We have to spend a lot of time thinking about that scale whenever we consider how to make posting on Tumblr a better experience.</p><p>Over a year ago, Tumblr Engineering came up with a very ambitious idea: ditch HTML entirely and move to a brand new format for how posts are created and stored. HTML is fine, but its scope is limited as it was intended for the browser, long before the concept of mobile apps existed. Conversely, the JSON standard has been heavily favored by APIs and mobile development for years, and feels much cleaner and more flexible than HTML. We can apply an extensible format and schema with JSON easier than we can with HTML.</p><p>With this in mind, we’ve chosen to write a brand new JSON-based specification for post content. We’re calling it the <b>Tumblr Neue Post Format</b>, or simply NPF. The NPF specification breaks apart post content into discreet <b>content blocks</b>, each defined by a <code>type</code> field. All of our existing post content easily fits into this kind of specification, affording backwards-compatibility with the billions of posts on Tumblr.</p><p>For example, right now when you add text to a post, we store and serve:</p><pre><code>&lt;p&gt;Some text in a post!&lt;p&gt;\n</code></pre><p>With NPF, the same thing is created and served this way:</p><pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Some text in a post!\"\n}\n</code></pre><p>Those two representations are fully interchangeable, but we begin to gain advantages with JSON for things HTML cannot do well, providing flexibility and extensibility for future integrations. The power of NPF really becomes critical when we want to build content blocks for Tumblr that cannot be easily represented with HTML, such as a physical location:</p><pre><code>{\n  \"type\": \"location\",\n  \"latitude\": 40.739485,\n  \"longitude\": -73.988402,\n  \"map_style\": \"quirky\"\n}\n</code></pre><p>This new JSON specification also gives us the benefit of not having to worry as much about potential security risks in malicious HTML payloads in post content. Moving from HTML to JSON allows us to have safer, more injection-proof defaults, and prevents us from having to do heavy DOM parsing at runtime, which means improved performance of our backend and mobile apps. With NPF, posting and viewing posts on Tumblr should be considerably faster and safer.</p><p>Our work so far with the NPF specification has been to reach feature parity with the rich text editor available to Tumblr users on the web, as well as extend those basic options with new ones, such as fun new text styles:</p><pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Oh, worm?\",\n  \"subtype\": \"quirky\"\n}\n</code></pre><figure data-orig-width=\"552\" data-orig-height=\"144\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/1f7ecdef4e798efe38eefb953b58e1c6/tumblr_inline_ovi7jowSSi1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"552\" data-orig-height=\"144\"></figure><p>Our <a href=\"https://staff.tumblr.com/post/164751021560/announcing-three-new-features-for-posting-from\">initial release</a> includes support for text blocks (with inline formatting), GIF search blocks, and image upload blocks. All of these options are available in our mobile apps via the Text, Quote, and Chat post forms, as well as when you reblog a post. <i>Yes, you can now upload images in a reblog on mobile.</i></p><p>Future releases of the mobile apps will continue to close the gap with our other post options as we build NPF support for link blocks, video upload blocks, third-party video and audio blocks, and more. We also plan on allowing third-party API consumers to view and create posts using the new specification sometime in the future.</p><p>- me (@cyle) and <a class=\"tumblelog\" href=\"https://tmblr.co/mZ7idGsrb6d2Cek1sAojE_Q\">@noisysocks</a> (with love for <a class=\"tumblelog\" href=\"https://tmblr.co/mYNRRD7c5Zo8ohAJjueduRw\">@keithmcknight</a> who started the original NPF spec)</p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"164826109535"},"content_raw":"<p>We’ve been looking at improving the posting and reblogging experience in our mobile apps for a long time. As many of our power users and public API consumers are aware, posts on Tumblr are stored and served in a sanitized HTML format. This choice made the most sense when Tumblr was originally built, when using Tumblr meant visiting via a web browser on your computer on the information superhighway back in 2007.</p><p>Storing post content primarily as HTML has remained our standard for ten years; there are a significant number of assumptions in our codebase about posts being primarily HTML. To compound this, when we want to change something about how posts are made or stored, we have to think in terms of <a href=\"https://www.tumblr.com/about\">the <i>150 billion</i> posts on Tumblr</a> and the billion new posts made every month. We have to spend a lot of time thinking about that scale whenever we consider how to make posting on Tumblr a better experience.</p><p>Over a year ago, Tumblr Engineering came up with a very ambitious idea: ditch HTML entirely and move to a brand new format for how posts are created and stored. HTML is fine, but its scope is limited as it was intended for the browser, long before the concept of mobile apps existed. Conversely, the JSON standard has been heavily favored by APIs and mobile development for years, and feels much cleaner and more flexible than HTML. We can apply an extensible format and schema with JSON easier than we can with HTML.</p><p>With this in mind, we’ve chosen to write a brand new JSON-based specification for post content. We’re calling it the <b>Tumblr Neue Post Format</b>, or simply NPF. The NPF specification breaks apart post content into discreet <b>content blocks</b>, each defined by a <code>type</code> field. All of our existing post content easily fits into this kind of specification, affording backwards-compatibility with the billions of posts on Tumblr.</p><p>For example, right now when you add text to a post, we store and serve:</p><pre><code>&lt;p&gt;Some text in a post!&lt;p&gt;\n</code></pre><p>With NPF, the same thing is created and served this way:</p><pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Some text in a post!\"\n}\n</code></pre><p>Those two representations are fully interchangeable, but we begin to gain advantages with JSON for things HTML cannot do well, providing flexibility and extensibility for future integrations. The power of NPF really becomes critical when we want to build content blocks for Tumblr that cannot be easily represented with HTML, such as a physical location:</p><pre><code>{\n  \"type\": \"location\",\n  \"latitude\": 40.739485,\n  \"longitude\": -73.988402,\n  \"map_style\": \"quirky\"\n}\n</code></pre><p>This new JSON specification also gives us the benefit of not having to worry as much about potential security risks in malicious HTML payloads in post content. Moving from HTML to JSON allows us to have safer, more injection-proof defaults, and prevents us from having to do heavy DOM parsing at runtime, which means improved performance of our backend and mobile apps. With NPF, posting and viewing posts on Tumblr should be considerably faster and safer.</p><p>Our work so far with the NPF specification has been to reach feature parity with the rich text editor available to Tumblr users on the web, as well as extend those basic options with new ones, such as fun new text styles:</p><pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Oh, worm?\",\n  \"subtype\": \"quirky\"\n}\n</code></pre><figure data-orig-width=\"552\" data-orig-height=\"144\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/1f7ecdef4e798efe38eefb953b58e1c6/tumblr_inline_ovi7jowSSi1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"552\" data-orig-height=\"144\"></figure><p>Our <a href=\"https://staff.tumblr.com/post/164751021560/announcing-three-new-features-for-posting-from\">initial release</a> includes support for text blocks (with inline formatting), GIF search blocks, and image upload blocks. All of these options are available in our mobile apps via the Text, Quote, and Chat post forms, as well as when you reblog a post. <i>Yes, you can now upload images in a reblog on mobile.</i></p><p>Future releases of the mobile apps will continue to close the gap with our other post options as we build NPF support for link blocks, video upload blocks, third-party video and audio blocks, and more. We also plan on allowing third-party API consumers to view and create posts using the new specification sometime in the future.</p><p>- me (@cyle) and <a class=\"tumblelog\" href=\"https://tmblr.co/mZ7idGsrb6d2Cek1sAojE_Q\">@noisysocks</a> (with love for <a class=\"tumblelog\" href=\"https://tmblr.co/mYNRRD7c5Zo8ohAJjueduRw\">@keithmcknight</a> who started the original NPF spec)</p>","content":"<p>We&rsquo;ve been looking at improving the posting and reblogging experience in our mobile apps for a long time. As many of our power users and public API consumers are aware, posts on Tumblr are stored and served in a sanitized HTML format. This choice made the most sense when Tumblr was originally built, when using Tumblr meant visiting via a web browser on your computer on the information superhighway back in 2007.</p><p>Storing post content primarily as HTML has remained our standard for ten years; there are a significant number of assumptions in our codebase about posts being primarily HTML. To compound this, when we want to change something about how posts are made or stored, we have to think in terms of <a href=\"https://www.tumblr.com/about\">the <i>150 billion</i> posts on Tumblr</a> and the billion new posts made every month. We have to spend a lot of time thinking about that scale whenever we consider how to make posting on Tumblr a better experience.</p><p>Over a year ago, Tumblr Engineering came up with a very ambitious idea: ditch HTML entirely and move to a brand new format for how posts are created and stored. HTML is fine, but its scope is limited as it was intended for the browser, long before the concept of mobile apps existed. Conversely, the JSON standard has been heavily favored by APIs and mobile development for years, and feels much cleaner and more flexible than HTML. We can apply an extensible format and schema with JSON easier than we can with HTML.</p><p>With this in mind, we&rsquo;ve chosen to write a brand new JSON-based specification for post content. We&rsquo;re calling it the <b>Tumblr Neue Post Format</b>, or simply NPF. The NPF specification breaks apart post content into discreet <b>content blocks</b>, each defined by a <code>type</code> field. All of our existing post content easily fits into this kind of specification, affording backwards-compatibility with the billions of posts on Tumblr.</p><p>For example, right now when you add text to a post, we store and serve:</p><pre><code>&lt;p&gt;Some text in a post!&lt;p&gt;\n</code></pre><p>With NPF, the same thing is created and served this way:</p><pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Some text in a post!\"\n}\n</code></pre><p>Those two representations are fully interchangeable, but we begin to gain advantages with JSON for things HTML cannot do well, providing flexibility and extensibility for future integrations. The power of NPF really becomes critical when we want to build content blocks for Tumblr that cannot be easily represented with HTML, such as a physical location:</p><pre><code>{\n  \"type\": \"location\",\n  \"latitude\": 40.739485,\n  \"longitude\": -73.988402,\n  \"map_style\": \"quirky\"\n}\n</code></pre><p>This new JSON specification also gives us the benefit of not having to worry as much about potential security risks in malicious HTML payloads in post content. Moving from HTML to JSON allows us to have safer, more injection-proof defaults, and prevents us from having to do heavy DOM parsing at runtime, which means improved performance of our backend and mobile apps. With NPF, posting and viewing posts on Tumblr should be considerably faster and safer.</p><p>Our work so far with the NPF specification has been to reach feature parity with the rich text editor available to Tumblr users on the web, as well as extend those basic options with new ones, such as fun new text styles:</p><pre><code>{\n  \"type\": \"text\",\n  \"text\": \"Oh, worm?\",\n  \"subtype\": \"quirky\"\n}\n</code></pre><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/1f7ecdef4e798efe38eefb953b58e1c6/tumblr_inline_ovi7jowSSi1qzyw0r_540.png\" class=\"\"/></figure><p>Our <a href=\"https://staff.tumblr.com/post/164751021560/announcing-three-new-features-for-posting-from\">initial release</a> includes support for text blocks (with inline formatting), GIF search blocks, and image upload blocks. All of these options are available in our mobile apps via the Text, Quote, and Chat post forms, as well as when you reblog a post. <i>Yes, you can now upload images in a reblog on mobile.</i></p><p>Future releases of the mobile apps will continue to close the gap with our other post options as we build NPF support for link blocks, video upload blocks, third-party video and audio blocks, and more. We also plan on allowing third-party API consumers to view and create posts using the new specification sometime in the future.</p><p>- me (@cyle) and <a href=\"https://tmblr.co/mZ7idGsrb6d2Cek1sAojE_Q\">@noisysocks</a> (with love for <a href=\"https://tmblr.co/mYNRRD7c5Zo8ohAJjueduRw\">@keithmcknight</a>&nbsp;who started the original NPF spec)</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":161854099032,"post_url":"https://engineering.tumblr.com/post/161854099032/jetpants-integration-testing","slug":"jetpants-integration-testing","date":"2017-06-15 15:00:10 GMT","timestamp":1497538810,"state":"published","format":"html","reblog_key":"JSew6isp","tags":["engineering","mysql","database","jetpants"],"short_url":"https://tmblr.co/ZI3nWx2MlGOvO","summary":"Jetpants Integration Testing","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":43,"title":"Jetpants Integration Testing","body":"<p>Tumblr is a big user of MySQL, and MySQL automation at Tumblr is centered around a tool we built called <a href=\"http://github.com/tumblr/jetpants\">Jetpants</a>. Jetpants does an incredible job making risky operations safe and reliable, even fairly complex tasks like replacing failed master servers, or splitting a shard.</p><p>While Jetpants is an incredibly effective and valuable tool for Tumblr&rsquo;s day-to-day operation, it has remained very difficult to implement a meaningful testing framework. Integration testing at this level is very challenging. In this article I&rsquo;ll go through these challenges and how we&rsquo;ve tackled them at Tumblr.</p><h2>Requirements</h2><p>Jetpants operates under the assumption you&rsquo;re managing MySQL daemons on a fully functional host, and that it can:</p><ul><li>ssh to the target system</li>\n<li>manage processes via service or systemctl commands</li>\n<li>copy data around between systems</li>\n<li>allocate spare servers from the asset management system, <a href=\"http://github.com/tumblr/collins\">Collins</a></li>\n</ul><p>Right away this means we have some challenges with respect to infrastructure testing:</p><ul><li>We need a Collins deployment</li>\n<li>We need an environment with spare servers running MySQL</li>\n<li>We need these spare servers to actually be servers, not light-weight Docker containers</li>\n</ul><h2>Problems</h2><p>For most of the life of Jetpants, these requirements were fulfilled using actual hardware in a testing pool in our datacenter. This wasn&rsquo;t ideal, however. Running a test which allocated more replicas, or tested shard splitting means using an extensive amount of real hardware that takes hours to reprovision. Testing changes to the Collins code meant talking to a real Collins deployment. What if we messed up?</p><p>This test strategy has all the hallmarks of manual testing. It doesn&rsquo;t prevent regressions. Test coverage of our featureset is spotty based on what was interesting at the time. Public contributors can&rsquo;t run the tests.</p><p>For a new user to pick up Jetpants and Collins, it can be very difficult to get started. Jetpants requires Collins to be configured it certain ways that aren&rsquo;t publicly documented. When I first built the testing environment, I had to regularly compare what I had to our actual deployment to figure out why Jetpants wasn&rsquo;t working correctly.</p><h2>Solution</h2><p>During a Tumblr hackathon earlier this year, I devoted my time to developing an isolated, automatic testing system. We have since integrated this system directly into Jetpants and are using it in our day-to-day development and testing.</p><p>Our test framework is based on the <a href=\"https://nixos.org\">NixOS</a> <a href=\"https://nixos.org/nixos/manual/index.html#sec-nixos-tests\">test framework</a>, the same framework NixOS uses to verify it is safe to release a new version. These tests use <a href=\"http://www.qemu.org/\">QEMU</a> to start an isolated environment of at least one VM, and NixOS configuration to build the VMs.</p><p>Our testing framework adds lots of tooling on top to let us create robust tests. By default, a test has a running Collins instance, a master database server, and one replica. Simple options allow provisioning additional spares or additional replicas on that initial master.</p><p>Below is an example test we&rsquo;ve written for performing a dead master promotion. This is where the current master database is dead, and we replace it with one of the existing replicas.</p><p>Here you can see what a test looks like, and how easily we can express the components and phases of our tests:</p><pre><code>import ../make-test.nix  ({ helpers, ... }:\n{\n  name = \"shard-dead-master-promotion\";\n  starting-slave-dbs = 2;\n\n  test-phases = with helpers; [\n    (jetpants-phase \"shutdown-master\" ''\n      Jetpants.pool(\"POSTS-1-INFINITY\").master.stop_mysql\n    '')\n    (phase \"jetpants-promotion\" ''\n      (\n        echo \"YES\" # Approve for promotion\n        echo \"YES\" # Approve after summary output. Confirmation.\n      ) | jetpants promotion --demote=10.50.2.10 --promote=10.50.2.11\n    '')\n    (assert-shard-master \"POSTS-1-INFINITY\" \"10.50.2.11\")\n    (assert-shard-slave \"POSTS-1-INFINITY\" \"10.50.2.12\")\n ];\n})\n</code></pre><p>Running this test first provisions the base environment, by</p><ol><li>starting Collins</li>\n<li>starting 3 Linux systems running MySQL</li>\n<li>creating a master-replica relationship between one MySQL server as a master, and two MySQL servers as replicas, then loading in a default schema, and naming it the POSTS-1-INFINITY shard</li>\n</ol><p>Once all this preparation is done, our test phases begin.</p><p>First we shut down the current master, to simulate a dead master situation. We then run the <code>jetpants promotion</code> command which will replace the old master (<code>10.50.2.10</code>) with a new master we have selected, <code>10.50.2.11</code>. <code>jetpants promotion</code> will prompt for confirmations, so we echo approvals to its stdin.</p><p>We continue by validating that the jetpants command did what we expected, and verifying the master and slaves.</p><h2>Initial Results</h2><p>Through this testing, we have already identified and fixed <a href=\"https://github.com/tumblr/jetpants/commit/ce543773e81a2d49c458ea820abd7f01a88fc9fa\">several race conditions</a> and very <a href=\"https://github.com/tumblr/jetpants/commit/903c30970cf3a4bc79af3fec8e2f5b2ddc40975f\">old interface bugs</a>. Nix&rsquo;s functional nature allows us to create and tear down test VMs in minutes, as it isn&rsquo;t a convergence-based configuration management tool. The stability of the test framework, and consistency of its results have allowed us to more aggressively change the underlying code in Jetpants while remaining confident our tools will work correctly during our day-to-day production maintenance.</p><p>Jetpants has been under continuous and vigorous development at Tumblr for many years now, and I&rsquo;m excited about where the future will be taking MySQL automation at Tumblr.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/m0zYv8GKDcevPZ6KD4IWofg\">@beta</a></p>","reblog":{"comment":"<p>Tumblr is a big user of MySQL, and MySQL automation at Tumblr is centered around a tool we built called <a href=\"http://github.com/tumblr/jetpants\">Jetpants</a>. Jetpants does an incredible job making risky operations safe and reliable, even fairly complex tasks like replacing failed master servers, or splitting a shard.</p><p>While Jetpants is an incredibly effective and valuable tool for Tumblr’s day-to-day operation, it has remained very difficult to implement a meaningful testing framework. Integration testing at this level is very challenging. In this article I’ll go through these challenges and how we’ve tackled them at Tumblr.</p><h2>Requirements</h2><p>Jetpants operates under the assumption you’re managing MySQL daemons on a fully functional host, and that it can:</p><ul><li>ssh to the target system</li>\n<li>manage processes via service or systemctl commands</li>\n<li>copy data around between systems</li>\n<li>allocate spare servers from the asset management system, <a href=\"http://github.com/tumblr/collins\">Collins</a></li>\n</ul><p>Right away this means we have some challenges with respect to infrastructure testing:</p><ul><li>We need a Collins deployment</li>\n<li>We need an environment with spare servers running MySQL</li>\n<li>We need these spare servers to actually be servers, not light-weight Docker containers</li>\n</ul><h2>Problems</h2><p>For most of the life of Jetpants, these requirements were fulfilled using actual hardware in a testing pool in our datacenter. This wasn’t ideal, however. Running a test which allocated more replicas, or tested shard splitting means using an extensive amount of real hardware that takes hours to reprovision. Testing changes to the Collins code meant talking to a real Collins deployment. What if we messed up?</p><p>This test strategy has all the hallmarks of manual testing. It doesn’t prevent regressions. Test coverage of our featureset is spotty based on what was interesting at the time. Public contributors can’t run the tests.</p><p>For a new user to pick up Jetpants and Collins, it can be very difficult to get started. Jetpants requires Collins to be configured it certain ways that aren’t publicly documented. When I first built the testing environment, I had to regularly compare what I had to our actual deployment to figure out why Jetpants wasn’t working correctly.</p><h2>Solution</h2><p>During a Tumblr hackathon earlier this year, I devoted my time to developing an isolated, automatic testing system. We have since integrated this system directly into Jetpants and are using it in our day-to-day development and testing.</p><p>Our test framework is based on the <a href=\"https://nixos.org\">NixOS</a> <a href=\"https://nixos.org/nixos/manual/index.html#sec-nixos-tests\">test framework</a>, the same framework NixOS uses to verify it is safe to release a new version. These tests use <a href=\"http://www.qemu.org/\">QEMU</a> to start an isolated environment of at least one VM, and NixOS configuration to build the VMs.</p><p>Our testing framework adds lots of tooling on top to let us create robust tests. By default, a test has a running Collins instance, a master database server, and one replica. Simple options allow provisioning additional spares or additional replicas on that initial master.</p><p>Below is an example test we’ve written for performing a dead master promotion. This is where the current master database is dead, and we replace it with one of the existing replicas.</p><p>Here you can see what a test looks like, and how easily we can express the components and phases of our tests:</p><pre><code>import ../make-test.nix  ({ helpers, ... }:\n{\n  name = \"shard-dead-master-promotion\";\n  starting-slave-dbs = 2;\n\n  test-phases = with helpers; [\n    (jetpants-phase \"shutdown-master\" ''\n      Jetpants.pool(\"POSTS-1-INFINITY\").master.stop_mysql\n    '')\n    (phase \"jetpants-promotion\" ''\n      (\n        echo \"YES\" # Approve for promotion\n        echo \"YES\" # Approve after summary output. Confirmation.\n      ) | jetpants promotion --demote=10.50.2.10 --promote=10.50.2.11\n    '')\n    (assert-shard-master \"POSTS-1-INFINITY\" \"10.50.2.11\")\n    (assert-shard-slave \"POSTS-1-INFINITY\" \"10.50.2.12\")\n ];\n})\n</code></pre><p>Running this test first provisions the base environment, by</p><ol><li>starting Collins</li>\n<li>starting 3 Linux systems running MySQL</li>\n<li>creating a master-replica relationship between one MySQL server as a master, and two MySQL servers as replicas, then loading in a default schema, and naming it the POSTS-1-INFINITY shard</li>\n</ol><p>Once all this preparation is done, our test phases begin.</p><p>First we shut down the current master, to simulate a dead master situation. We then run the <code>jetpants promotion</code> command which will replace the old master (<code>10.50.2.10</code>) with a new master we have selected, <code>10.50.2.11</code>. <code>jetpants promotion</code> will prompt for confirmations, so we echo approvals to its stdin.</p><p>We continue by validating that the jetpants command did what we expected, and verifying the master and slaves.</p><h2>Initial Results</h2><p>Through this testing, we have already identified and fixed <a href=\"https://github.com/tumblr/jetpants/commit/ce543773e81a2d49c458ea820abd7f01a88fc9fa\">several race conditions</a> and very <a href=\"https://github.com/tumblr/jetpants/commit/903c30970cf3a4bc79af3fec8e2f5b2ddc40975f\">old interface bugs</a>. Nix’s functional nature allows us to create and tear down test VMs in minutes, as it isn’t a convergence-based configuration management tool. The stability of the test framework, and consistency of its results have allowed us to more aggressively change the underlying code in Jetpants while remaining confident our tools will work correctly during our day-to-day production maintenance.</p><p>Jetpants has been under continuous and vigorous development at Tumblr for many years now, and I’m excited about where the future will be taking MySQL automation at Tumblr.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/m0zYv8GKDcevPZ6KD4IWofg\">@beta</a></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"161854099032"},"content_raw":"<p>Tumblr is a big user of MySQL, and MySQL automation at Tumblr is centered around a tool we built called <a href=\"http://github.com/tumblr/jetpants\">Jetpants</a>. Jetpants does an incredible job making risky operations safe and reliable, even fairly complex tasks like replacing failed master servers, or splitting a shard.</p><p>While Jetpants is an incredibly effective and valuable tool for Tumblr’s day-to-day operation, it has remained very difficult to implement a meaningful testing framework. Integration testing at this level is very challenging. In this article I’ll go through these challenges and how we’ve tackled them at Tumblr.</p><h2>Requirements</h2><p>Jetpants operates under the assumption you’re managing MySQL daemons on a fully functional host, and that it can:</p><ul><li>ssh to the target system</li>\n<li>manage processes via service or systemctl commands</li>\n<li>copy data around between systems</li>\n<li>allocate spare servers from the asset management system, <a href=\"http://github.com/tumblr/collins\">Collins</a></li>\n</ul><p>Right away this means we have some challenges with respect to infrastructure testing:</p><ul><li>We need a Collins deployment</li>\n<li>We need an environment with spare servers running MySQL</li>\n<li>We need these spare servers to actually be servers, not light-weight Docker containers</li>\n</ul><h2>Problems</h2><p>For most of the life of Jetpants, these requirements were fulfilled using actual hardware in a testing pool in our datacenter. This wasn’t ideal, however. Running a test which allocated more replicas, or tested shard splitting means using an extensive amount of real hardware that takes hours to reprovision. Testing changes to the Collins code meant talking to a real Collins deployment. What if we messed up?</p><p>This test strategy has all the hallmarks of manual testing. It doesn’t prevent regressions. Test coverage of our featureset is spotty based on what was interesting at the time. Public contributors can’t run the tests.</p><p>For a new user to pick up Jetpants and Collins, it can be very difficult to get started. Jetpants requires Collins to be configured it certain ways that aren’t publicly documented. When I first built the testing environment, I had to regularly compare what I had to our actual deployment to figure out why Jetpants wasn’t working correctly.</p><h2>Solution</h2><p>During a Tumblr hackathon earlier this year, I devoted my time to developing an isolated, automatic testing system. We have since integrated this system directly into Jetpants and are using it in our day-to-day development and testing.</p><p>Our test framework is based on the <a href=\"https://nixos.org\">NixOS</a> <a href=\"https://nixos.org/nixos/manual/index.html#sec-nixos-tests\">test framework</a>, the same framework NixOS uses to verify it is safe to release a new version. These tests use <a href=\"http://www.qemu.org/\">QEMU</a> to start an isolated environment of at least one VM, and NixOS configuration to build the VMs.</p><p>Our testing framework adds lots of tooling on top to let us create robust tests. By default, a test has a running Collins instance, a master database server, and one replica. Simple options allow provisioning additional spares or additional replicas on that initial master.</p><p>Below is an example test we’ve written for performing a dead master promotion. This is where the current master database is dead, and we replace it with one of the existing replicas.</p><p>Here you can see what a test looks like, and how easily we can express the components and phases of our tests:</p><pre><code>import ../make-test.nix  ({ helpers, ... }:\n{\n  name = \"shard-dead-master-promotion\";\n  starting-slave-dbs = 2;\n\n  test-phases = with helpers; [\n    (jetpants-phase \"shutdown-master\" ''\n      Jetpants.pool(\"POSTS-1-INFINITY\").master.stop_mysql\n    '')\n    (phase \"jetpants-promotion\" ''\n      (\n        echo \"YES\" # Approve for promotion\n        echo \"YES\" # Approve after summary output. Confirmation.\n      ) | jetpants promotion --demote=10.50.2.10 --promote=10.50.2.11\n    '')\n    (assert-shard-master \"POSTS-1-INFINITY\" \"10.50.2.11\")\n    (assert-shard-slave \"POSTS-1-INFINITY\" \"10.50.2.12\")\n ];\n})\n</code></pre><p>Running this test first provisions the base environment, by</p><ol><li>starting Collins</li>\n<li>starting 3 Linux systems running MySQL</li>\n<li>creating a master-replica relationship between one MySQL server as a master, and two MySQL servers as replicas, then loading in a default schema, and naming it the POSTS-1-INFINITY shard</li>\n</ol><p>Once all this preparation is done, our test phases begin.</p><p>First we shut down the current master, to simulate a dead master situation. We then run the <code>jetpants promotion</code> command which will replace the old master (<code>10.50.2.10</code>) with a new master we have selected, <code>10.50.2.11</code>. <code>jetpants promotion</code> will prompt for confirmations, so we echo approvals to its stdin.</p><p>We continue by validating that the jetpants command did what we expected, and verifying the master and slaves.</p><h2>Initial Results</h2><p>Through this testing, we have already identified and fixed <a href=\"https://github.com/tumblr/jetpants/commit/ce543773e81a2d49c458ea820abd7f01a88fc9fa\">several race conditions</a> and very <a href=\"https://github.com/tumblr/jetpants/commit/903c30970cf3a4bc79af3fec8e2f5b2ddc40975f\">old interface bugs</a>. Nix’s functional nature allows us to create and tear down test VMs in minutes, as it isn’t a convergence-based configuration management tool. The stability of the test framework, and consistency of its results have allowed us to more aggressively change the underlying code in Jetpants while remaining confident our tools will work correctly during our day-to-day production maintenance.</p><p>Jetpants has been under continuous and vigorous development at Tumblr for many years now, and I’m excited about where the future will be taking MySQL automation at Tumblr.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/m0zYv8GKDcevPZ6KD4IWofg\">@beta</a></p>","content":"<p>Tumblr is a big user of MySQL, and MySQL automation at Tumblr is centered around a tool we built called <a href=\"http://github.com/tumblr/jetpants\">Jetpants</a>. Jetpants does an incredible job making risky operations safe and reliable, even fairly complex tasks like replacing failed master servers, or splitting a shard.</p><p>While Jetpants is an incredibly effective and valuable tool for Tumblr&rsquo;s day-to-day operation, it has remained very difficult to implement a meaningful testing framework. Integration testing at this level is very challenging. In this article I&rsquo;ll go through these challenges and how we&rsquo;ve tackled them at Tumblr.</p><h2>Requirements</h2><p>Jetpants operates under the assumption you&rsquo;re managing MySQL daemons on a fully functional host, and that it can:</p><ul><li>ssh to the target system</li>\n<li>manage processes via service or systemctl commands</li>\n<li>copy data around between systems</li>\n<li>allocate spare servers from the asset management system, <a href=\"http://github.com/tumblr/collins\">Collins</a></li>\n</ul><p>Right away this means we have some challenges with respect to infrastructure testing:</p><ul><li>We need a Collins deployment</li>\n<li>We need an environment with spare servers running MySQL</li>\n<li>We need these spare servers to actually be servers, not light-weight Docker containers</li>\n</ul><h2>Problems</h2><p>For most of the life of Jetpants, these requirements were fulfilled using actual hardware in a testing pool in our datacenter. This wasn&rsquo;t ideal, however. Running a test which allocated more replicas, or tested shard splitting means using an extensive amount of real hardware that takes hours to reprovision. Testing changes to the Collins code meant talking to a real Collins deployment. What if we messed up?</p><p>This test strategy has all the hallmarks of manual testing. It doesn&rsquo;t prevent regressions. Test coverage of our featureset is spotty based on what was interesting at the time. Public contributors can&rsquo;t run the tests.</p><p>For a new user to pick up Jetpants and Collins, it can be very difficult to get started. Jetpants requires Collins to be configured it certain ways that aren&rsquo;t publicly documented. When I first built the testing environment, I had to regularly compare what I had to our actual deployment to figure out why Jetpants wasn&rsquo;t working correctly.</p><h2>Solution</h2><p>During a Tumblr hackathon earlier this year, I devoted my time to developing an isolated, automatic testing system. We have since integrated this system directly into Jetpants and are using it in our day-to-day development and testing.</p><p>Our test framework is based on the <a href=\"https://nixos.org\">NixOS</a> <a href=\"https://nixos.org/nixos/manual/index.html#sec-nixos-tests\">test framework</a>, the same framework NixOS uses to verify it is safe to release a new version. These tests use <a href=\"http://www.qemu.org/\">QEMU</a> to start an isolated environment of at least one VM, and NixOS configuration to build the VMs.</p><p>Our testing framework adds lots of tooling on top to let us create robust tests. By default, a test has a running Collins instance, a master database server, and one replica. Simple options allow provisioning additional spares or additional replicas on that initial master.</p><p>Below is an example test we&rsquo;ve written for performing a dead master promotion. This is where the current master database is dead, and we replace it with one of the existing replicas.</p><p>Here you can see what a test looks like, and how easily we can express the components and phases of our tests:</p><pre><code>import ../make-test.nix  ({ helpers, ... }:\n{\n  name = \"shard-dead-master-promotion\";\n  starting-slave-dbs = 2;\n\n  test-phases = with helpers; [\n    (jetpants-phase \"shutdown-master\" ''\n      Jetpants.pool(\"POSTS-1-INFINITY\").master.stop_mysql\n    '')\n    (phase \"jetpants-promotion\" ''\n      (\n        echo \"YES\" # Approve for promotion\n        echo \"YES\" # Approve after summary output. Confirmation.\n      ) | jetpants promotion --demote=10.50.2.10 --promote=10.50.2.11\n    '')\n    (assert-shard-master \"POSTS-1-INFINITY\" \"10.50.2.11\")\n    (assert-shard-slave \"POSTS-1-INFINITY\" \"10.50.2.12\")\n ];\n})\n</code></pre><p>Running this test first provisions the base environment, by</p><ol><li>starting Collins</li>\n<li>starting 3 Linux systems running MySQL</li>\n<li>creating a master-replica relationship between one MySQL server as a master, and two MySQL servers as replicas, then loading in a default schema, and naming it the POSTS-1-INFINITY shard</li>\n</ol><p>Once all this preparation is done, our test phases begin.</p><p>First we shut down the current master, to simulate a dead master situation. We then run the <code>jetpants promotion</code> command which will replace the old master (<code>10.50.2.10</code>) with a new master we have selected, <code>10.50.2.11</code>. <code>jetpants promotion</code> will prompt for confirmations, so we echo approvals to its stdin.</p><p>We continue by validating that the jetpants command did what we expected, and verifying the master and slaves.</p><h2>Initial Results</h2><p>Through this testing, we have already identified and fixed <a href=\"https://github.com/tumblr/jetpants/commit/ce543773e81a2d49c458ea820abd7f01a88fc9fa\">several race conditions</a> and very <a href=\"https://github.com/tumblr/jetpants/commit/903c30970cf3a4bc79af3fec8e2f5b2ddc40975f\">old interface bugs</a>. Nix&rsquo;s functional nature allows us to create and tear down test VMs in minutes, as it isn&rsquo;t a convergence-based configuration management tool. The stability of the test framework, and consistency of its results have allowed us to more aggressively change the underlying code in Jetpants while remaining confident our tools will work correctly during our day-to-day production maintenance.</p><p>Jetpants has been under continuous and vigorous development at Tumblr for many years now, and I&rsquo;m excited about where the future will be taking MySQL automation at Tumblr.</p><p>- <a href=\"https://tmblr.co/m0zYv8GKDcevPZ6KD4IWofg\">@beta</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":161546559631,"post_url":"https://engineering.tumblr.com/post/161546559631/introducing-graywater-for-android","slug":"introducing-graywater-for-android","date":"2017-06-07 15:00:17 GMT","timestamp":1496847617,"state":"published","format":"html","reblog_key":"FWQ5Q3YN","tags":["android","engineering","graywater"],"short_url":"https://tmblr.co/ZI3nWx2MSxE2F","summary":"Introducing Graywater for Android","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":120,"title":"Introducing Graywater for Android","body":"<p>Introducing <a href=\"https://github.com/tumblr/graywater\">Graywater</a>, Tumblr’s framework for decomposing complex items in a RecyclerView list in order to improve scroll performance, reduce memory usage, and lay a foundation for a more composition-oriented approach to building lists. With Graywater, the app now scrolls faster and crashes less often, and it also gives us a solid foundation for building new features faster and better than before.</p><p>On screens that display posts, such as the dashboard, the Tumblr Android app customizes one adapter across multiple screens. This approach results in a complex adapter, and over time, our previous solution became difficult to manage and hard to reason about since there was no consistent place for screen-specific behavior.</p><p>Furthermore, each post type had its own layout and viewholder, which meant that once a user encountered a post type they hadn’t seen on that screen before, the entire post had to go through the inflate, layout, and draw process. Once offscreen, the post would take up large chunk of memory in the RecyclerView pool.</p><figure class=\"tmblr-full\" data-orig-height=\"675\" data-orig-width=\"1200\"><img src=\"https://78.media.tumblr.com/fe156e6b5ff04a6d57bef344c92ad328/tumblr_inline_or561kdtq41qzyw0r_540.png\" data-orig-height=\"675\" data-orig-width=\"1200\"/></figure><p>Graywater solves this by rendering only the parts of a post that are visible and reusing the parts of a post that appear in other posts, such as the header and footer. By breaking up a large post into smaller components, the UI thread has to do less on each scroll. Even though there are more view types, each individual view type is smaller, so memory usage is lower.</p><p>For example, a photoset post may be composed of ten photos, one after another. In the previous architecture, a photoset layout with headers and footers would be inflated and the photo views added in afterwards. If the viewholder is recycled and the next photoset post only has one photo, the extra photo views are discarded. With Graywater, each individual photo view is recycled separately, which allows RecyclerView to reuse the photo views that appeared earlier in the photoset.</p><p>This idea is based off of <a href=\"https://code.facebook.com/posts/879498888759525/fast-rendering-news-feed-on-android/\">Facebook&rsquo;s post on a faster news feed</a> and <a href=\"https://code.facebook.com/posts/531104390396423/components-for-android-a-declarative-framework-for-efficient-uis/\">Components for Android</a>, which have been open-sourced as <a href=\"http://fblitho.com/\">Litho</a>.</p><p>Graywater differs from other RecyclerView libraries by being small (a single file!) and flexible enough to work within your model architecture. For libraries like <a href=\"https://medium.com/airbnb-engineering/epoxy-airbnbs-view-architecture-on-android-c3e1af150394\">Epoxy</a> and <a href=\"https://github.com/lisawray/groupie\">Groupie</a> to accomplish sub-item recycling, complex items like posts need to be decomposed into smaller viewmodels beforehand. For Litho to flatten view hierarchies and perform fine-grained recycling, existing XML layouts need to be converted to layout specs.</p><p>By converting to Graywater, we’ve been able to reduce OutOfMemory errors by 90% and dramatically improve scroll performance. It is now much easier to add new item types that are composed of preexisting post components. We have also migrated screen-specific logic to the screen itself by injecting the customized component into the adapter. By open-sourcing Graywater, we’re hoping the Android community will achieve similar performance and architecture gains, and we’re excited to hear what the community builds next!</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mpi5CEayMITBCB2TtF60N1Q\">@dreamynomad</a></p>","reblog":{"comment":"<p>Introducing <a href=\"https://github.com/tumblr/graywater\">Graywater</a>, Tumblr’s framework for decomposing complex items in a RecyclerView list in order to improve scroll performance, reduce memory usage, and lay a foundation for a more composition-oriented approach to building lists. With Graywater, the app now scrolls faster and crashes less often, and it also gives us a solid foundation for building new features faster and better than before.</p><p>On screens that display posts, such as the dashboard, the Tumblr Android app customizes one adapter across multiple screens. This approach results in a complex adapter, and over time, our previous solution became difficult to manage and hard to reason about since there was no consistent place for screen-specific behavior.</p><p>Furthermore, each post type had its own layout and viewholder, which meant that once a user encountered a post type they hadn’t seen on that screen before, the entire post had to go through the inflate, layout, and draw process. Once offscreen, the post would take up large chunk of memory in the RecyclerView pool.</p><figure class=\"tmblr-full\" data-orig-height=\"675\" data-orig-width=\"1200\"><img src=\"https://78.media.tumblr.com/fe156e6b5ff04a6d57bef344c92ad328/tumblr_inline_or561kdtq41qzyw0r_540.png\" data-orig-height=\"675\" data-orig-width=\"1200\"></figure><p>Graywater solves this by rendering only the parts of a post that are visible and reusing the parts of a post that appear in other posts, such as the header and footer. By breaking up a large post into smaller components, the UI thread has to do less on each scroll. Even though there are more view types, each individual view type is smaller, so memory usage is lower.</p><p>For example, a photoset post may be composed of ten photos, one after another. In the previous architecture, a photoset layout with headers and footers would be inflated and the photo views added in afterwards. If the viewholder is recycled and the next photoset post only has one photo, the extra photo views are discarded. With Graywater, each individual photo view is recycled separately, which allows RecyclerView to reuse the photo views that appeared earlier in the photoset.</p><p>This idea is based off of <a href=\"https://code.facebook.com/posts/879498888759525/fast-rendering-news-feed-on-android/\">Facebook’s post on a faster news feed</a> and <a href=\"https://code.facebook.com/posts/531104390396423/components-for-android-a-declarative-framework-for-efficient-uis/\">Components for Android</a>, which have been open-sourced as <a href=\"http://fblitho.com/\">Litho</a>.</p><p>Graywater differs from other RecyclerView libraries by being small (a single file!) and flexible enough to work within your model architecture. For libraries like <a href=\"https://medium.com/airbnb-engineering/epoxy-airbnbs-view-architecture-on-android-c3e1af150394\">Epoxy</a> and <a href=\"https://github.com/lisawray/groupie\">Groupie</a> to accomplish sub-item recycling, complex items like posts need to be decomposed into smaller viewmodels beforehand. For Litho to flatten view hierarchies and perform fine-grained recycling, existing XML layouts need to be converted to layout specs.</p><p>By converting to Graywater, we’ve been able to reduce OutOfMemory errors by 90% and dramatically improve scroll performance. It is now much easier to add new item types that are composed of preexisting post components. We have also migrated screen-specific logic to the screen itself by injecting the customized component into the adapter. By open-sourcing Graywater, we’re hoping the Android community will achieve similar performance and architecture gains, and we’re excited to hear what the community builds next!</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mpi5CEayMITBCB2TtF60N1Q\">@dreamynomad</a></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"161546559631"},"content_raw":"<p>Introducing <a href=\"https://github.com/tumblr/graywater\">Graywater</a>, Tumblr’s framework for decomposing complex items in a RecyclerView list in order to improve scroll performance, reduce memory usage, and lay a foundation for a more composition-oriented approach to building lists. With Graywater, the app now scrolls faster and crashes less often, and it also gives us a solid foundation for building new features faster and better than before.</p><p>On screens that display posts, such as the dashboard, the Tumblr Android app customizes one adapter across multiple screens. This approach results in a complex adapter, and over time, our previous solution became difficult to manage and hard to reason about since there was no consistent place for screen-specific behavior.</p><p>Furthermore, each post type had its own layout and viewholder, which meant that once a user encountered a post type they hadn’t seen on that screen before, the entire post had to go through the inflate, layout, and draw process. Once offscreen, the post would take up large chunk of memory in the RecyclerView pool.</p><figure class=\"tmblr-full\" data-orig-height=\"675\" data-orig-width=\"1200\"><img src=\"https://78.media.tumblr.com/fe156e6b5ff04a6d57bef344c92ad328/tumblr_inline_or561kdtq41qzyw0r_540.png\" data-orig-height=\"675\" data-orig-width=\"1200\"></figure><p>Graywater solves this by rendering only the parts of a post that are visible and reusing the parts of a post that appear in other posts, such as the header and footer. By breaking up a large post into smaller components, the UI thread has to do less on each scroll. Even though there are more view types, each individual view type is smaller, so memory usage is lower.</p><p>For example, a photoset post may be composed of ten photos, one after another. In the previous architecture, a photoset layout with headers and footers would be inflated and the photo views added in afterwards. If the viewholder is recycled and the next photoset post only has one photo, the extra photo views are discarded. With Graywater, each individual photo view is recycled separately, which allows RecyclerView to reuse the photo views that appeared earlier in the photoset.</p><p>This idea is based off of <a href=\"https://code.facebook.com/posts/879498888759525/fast-rendering-news-feed-on-android/\">Facebook’s post on a faster news feed</a> and <a href=\"https://code.facebook.com/posts/531104390396423/components-for-android-a-declarative-framework-for-efficient-uis/\">Components for Android</a>, which have been open-sourced as <a href=\"http://fblitho.com/\">Litho</a>.</p><p>Graywater differs from other RecyclerView libraries by being small (a single file!) and flexible enough to work within your model architecture. For libraries like <a href=\"https://medium.com/airbnb-engineering/epoxy-airbnbs-view-architecture-on-android-c3e1af150394\">Epoxy</a> and <a href=\"https://github.com/lisawray/groupie\">Groupie</a> to accomplish sub-item recycling, complex items like posts need to be decomposed into smaller viewmodels beforehand. For Litho to flatten view hierarchies and perform fine-grained recycling, existing XML layouts need to be converted to layout specs.</p><p>By converting to Graywater, we’ve been able to reduce OutOfMemory errors by 90% and dramatically improve scroll performance. It is now much easier to add new item types that are composed of preexisting post components. We have also migrated screen-specific logic to the screen itself by injecting the customized component into the adapter. By open-sourcing Graywater, we’re hoping the Android community will achieve similar performance and architecture gains, and we’re excited to hear what the community builds next!</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mpi5CEayMITBCB2TtF60N1Q\">@dreamynomad</a></p>","content":"<p>Introducing <a href=\"https://github.com/tumblr/graywater\">Graywater</a>, Tumblr&rsquo;s framework for decomposing complex items in a RecyclerView list in order to improve scroll performance, reduce memory usage, and lay a foundation for a more composition-oriented approach to building lists. With Graywater, the app now scrolls faster and crashes less often, and it also gives us a solid foundation for building new features faster and better than before.</p><p>On screens that display posts, such as the dashboard, the Tumblr Android app customizes one adapter across multiple screens. This approach results in a complex adapter, and over time, our previous solution became difficult to manage and hard to reason about since there was no consistent place for screen-specific behavior.</p><p>Furthermore, each post type had its own layout and viewholder, which meant that once a user encountered a post type they hadn&rsquo;t seen on that screen before, the entire post had to go through the inflate, layout, and draw process. Once offscreen, the post would take up large chunk of memory in the RecyclerView pool.</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/fe156e6b5ff04a6d57bef344c92ad328/tumblr_inline_or561kdtq41qzyw0r_540.png\" class=\"\"/></figure><p>Graywater solves this by rendering only the parts of a post that are visible and reusing the parts of a post that appear in other posts, such as the header and footer. By breaking up a large post into smaller components, the UI thread has to do less on each scroll. Even though there are more view types, each individual view type is smaller, so memory usage is lower.</p><p>For example, a photoset post may be composed of ten photos, one after another. In the previous architecture, a photoset layout with headers and footers would be inflated and the photo views added in afterwards. If the viewholder is recycled and the next photoset post only has one photo, the extra photo views are discarded. With Graywater, each individual photo view is recycled separately, which allows RecyclerView to reuse the photo views that appeared earlier in the photoset.</p><p>This idea is based off of <a href=\"https://code.facebook.com/posts/879498888759525/fast-rendering-news-feed-on-android/\">Facebook&rsquo;s post on a faster news feed</a> and <a href=\"https://code.facebook.com/posts/531104390396423/components-for-android-a-declarative-framework-for-efficient-uis/\">Components for Android</a>, which have been open-sourced as <a href=\"http://fblitho.com/\">Litho</a>.</p><p>Graywater differs from other RecyclerView libraries by being small (a single file!) and flexible enough to work within your model architecture. For libraries like <a href=\"https://medium.com/airbnb-engineering/epoxy-airbnbs-view-architecture-on-android-c3e1af150394\">Epoxy</a> and <a href=\"https://github.com/lisawray/groupie\">Groupie</a> to accomplish sub-item recycling, complex items like posts need to be decomposed into smaller viewmodels beforehand. For Litho to flatten view hierarchies and perform fine-grained recycling, existing XML layouts need to be converted to layout specs.</p><p>By converting to Graywater, we&rsquo;ve been able to reduce OutOfMemory errors by 90% and dramatically improve scroll performance. It is now much easier to add new item types that are composed of preexisting post components. We have also migrated screen-specific logic to the screen itself by injecting the customized component into the adapter. By open-sourcing Graywater, we&rsquo;re hoping the Android community will achieve similar performance and architecture gains, and we&rsquo;re excited to hear what the community builds next!</p><p>- <a href=\"https://tmblr.co/mpi5CEayMITBCB2TtF60N1Q\">@dreamynomad</a></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":159266372136,"post_url":"https://engineering.tumblr.com/post/159266372136/tumblr-themes-react-and-redux-part-1-setup","slug":"tumblr-themes-react-and-redux-part-1-setup","date":"2017-04-06 15:00:35 GMT","timestamp":1491490835,"state":"published","format":"html","reblog_key":"0ZK8yuf9","tags":["engineering","react","redux","theme engine","javascript","tumblr themes"],"short_url":"https://tmblr.co/ZI3nWx2KL0-ee","summary":"Tumblr Themes & React and Redux: Part 1 - Setup and the Initial State","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":375,"title":"Tumblr Themes & React and Redux: Part 1 - Setup and the Initial State","body":"<figure class=\"tmblr-full\" data-orig-height=\"995\" data-orig-width=\"1982\"><img src=\"https://78.media.tumblr.com/2ef65b5b54bce140e7a90f04388ca7d1/tumblr_inline_onw21j562I1qzyw0r_540.png\" data-orig-height=\"995\" data-orig-width=\"1982\"/></figure><p>As a platform that prides itself on being a home for artists and creatives alike, it only makes sense that we allow our users to fully customize their Tumblrs to fully express themselves. Here at Tumblr, the world is your oyster not only in terms of looks but also in how you create your theme. I wanted to demonstrate how you too can develop a theme using <a href=\"http://redux.js.org/\">Redux</a> and <a href=\"https://facebook.github.io/react/\">React</a>. Since there are plenty of docs and tutorials on how to use those libraries themselves, I will briefly describe how I got the libraries to work with the Tumblr theme engine, and share some handy tips that made developing more efficient and more enjoyable.</p><p>If you follow the ever changing landscape of JavaScript, then you’ve at least heard of these two libraries. Prior to building the <a href=\"https://mentalhealthquilt.tumblr.com/\">Post-It-Forward</a> theme, I only knew of them by name but never got the chance to actually use them. Developers couldn’t get enough of how React made it easy to create and reuse components. Many also praise how elegantly React manages and renders views, especially when paired with Redux for state management. All of this sounded great. I wanted to turn this project into a learning experience. I thought, “why not?” and gave it a shot.</p><h2>An Extremely Brief Introduction to Tumblr Themes</h2><p>The way themes work on Tumblr is that we have a theme engine that provides special types of operators. These operators insert dynamic data, such as your Tumblr’s title or description, or are blocks that serve as conditionals for rendering a block of HTML, like the “Next Page” link.</p><p>My HTML started off a little something like this:</p><pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{Title}&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>As you can see, <code>{Title}</code> is a variable that will return the title of the Tumblr. The point of entry for this theme is the <code>&lt;div&gt;</code> element with the <code>#post-it-forward-root</code>  ID. In your <code>index.js</code>  file you’ll reference this DOM element in your <code>ReactDom.render()</code> method. If you want to learn more about the theme engine, head over to our <a href=\"https://www.tumblr.com/docs/custom_themes\">Theme Docs</a></p><h2>Creating the Initial State</h2><p>To get things started, we need to create an initial state. How do we introduce this initial state if we have to rely on the theme engine to give us all our data? How do we get the data from HTML land to JS land? Well, here’s one way of doing it:</p><pre><code>&lt;script type=\"text/javascript\"&gt;\n    (function(root) {\n        var ensureString = function(str) {\n            return !str ? '' : str;\n        };\n\n        var basicVariables = {\n            title: ensureString({JSTitle}),\n            name: ensureString({JSName}),\n                        description: ensureString({JSDescription}),\n                        metaDescription: ensureString({JSMetaDescription}),\n                        blogUrl: ensureString({JSBlogURL}),\n                        rss: ensureString({JSRSS}),\n            favicon: ensureString({JSFavicon}),\n            customCss: ensureString({JSCustomCSS}),\n            isPermalinkPage: !!ensureString(/*{block:PermalinkPage}*/true/*{/block:PermalinkPage}*/),\n            isIndexPage: !!ensureString(/*{block:IndexPage}*/true/*{/block:IndexPage}*/),\n            /*{block:PostTitle}*/\n            postTitle: ensureString({JSPostTitle}),\n            /*{/block:PostTitle}*/\n            /*{block:PostSummary}*/\n            postSummary: ensureString({JSPostSummary}),\n            /*{/block:PostSummary}*/\n            portraitUrl16: ensureString({JSPortraitURL-16}),\n            portraitUrl24: ensureString({JSPortraitURL-24}),\n            portraitUrl30: ensureString({JSPortraitURL-30}),\n            portraitUrl40: ensureString({JSPortraitURL-40}),\n            portraitUrl48: ensureString({JSPortraitURL-48}),\n            portraitUrl64: ensureString({JSPortraitURL-64}),\n            portraitUrl96: ensureString({JSPortraitURL-96}),\n            portraitUrl128: ensureString({JSPortraitURL-128}),\n            copyrightYears: ensureString({JSCopyrightYears}),\n            isSearchPage: !!ensureString(/*{block:SearchPage}*/true/*{/block:SearchPage}*/),\n            searchQuery: ensureString({JSSearchQuery}),\n            safeSearchQuery: ensureString({JSURLSafeSearchQuery}),\n            searchPlaceHolder: ensureString('{lang:Search Blog}'),\n            noSearchResults: !!ensureString(/*{block:NoSearchResults}*/true/*{/block:NoSearchResults}*/),\n        };\n\n        root.tumblrData = {\n            basicVariables: basicVariables,\n            };\n    })(this);\n&lt;/script&gt;\n</code></pre><p>This creates a <code>tumblrData</code> attribute on the browser’s <code>window</code> object.</p><p>Sometimes the theme engine returns nothing for a particular variable if it’s not available. For example, if I made a post that does not have a title,  the final <code>root.tumblrData</code>  object will not have <code>postTitle</code> as a key. Sometimes the key will be available but the theme engine returned an empty value for it. For those cases, I created a helper method called <code>ensureString()</code> that turns those empty values into empty strings.  Sometimes you might need a boolean value. In those cases, I’ll enter the conditional variables from the theme engine into the helper method to get the boolean value from it.</p><p>Once you’ve set up your initial state make sure that you place this script tag before the script tag that references the rest of your code that should be compiled and minified and uploaded through the asset uploader that the Tumblr text editor provides.  This ensures that the <code>tumblrData</code> is accessible through the <code>window</code> object by the time the React app gets initiated.</p><p><code>tumblrData</code> should look something like this:</p><pre><code>const tumblrData = {\n    basicVariables: {\n        blogUrl: \"https://mentalhealthquilt.tumblr.com/\",\n        copyrightYears: \"2016–2017\",\n        customCss: \"\",\n                description: \"Mental Health Quilt\",\n        favicon: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        isIndexPage: true,\n        isPermalinkPage: false,\n        isSearchPage: false,\n        metaDescription: \"Mental Health Quilt\",\n        name: \"mentalhealthquilt\",\n        noSearchResults: false,\n        portraitUrl16: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_16.png\",\n        portraitUrl24: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_24.png\",\n        portraitUrl30: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_30.png\",\n        portraitUrl40: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_40.png\",\n        portraitUrl48: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_48.png\",\n        portraitUrl64: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_64.png\",\n        portraitUrl96: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_96.png\",\n        portraitUrl128: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        rss: \"https://mentalhealthquilt.tumblr.com/rss\",\n        safeSearchQuery: \"\",\n        searchPlaceHolder: \"Search mentalhealthquilt\",\n        searchQuery: \"\",\n        title: \"Mental Health Quilt\",\n    },\n}\n</code></pre><p>Now we have the data that the theme engine gave us in a format that React and Redux can work with.</p><p>If you are new to these libraries, I highly recommend following the simple <a href=\"http://redux.js.org/docs/basics/index.html\">Todo App Tutorial</a>  that is on the Redux website. They do a wonderful job of explaining the process as you build the app.</p><h2>Helpful Tips</h2><p>Setting up a local server will make developing way faster than the current setup. If you’re using both the &ldquo;webpack&rdquo;  and &ldquo;webpack-dev-server&rdquo; packages, in your <code>package.json</code> file under <code>scripts</code> you can place something like this in it:</p><p><i>In your package.json file</i></p><pre><code>...\n\"scripts\": {\n    \"local-server\": \"NODE_ENV=development webpack-dev-server --config path/to/webpack.config.js --port=3000 --inline --hot\"\n},\n...\n</code></pre><p>To run that script, in the terminal you will type this command:</p><pre><code>&gt; npm run local-server\n</code></pre><p>In the Tumblr editor, be sure to replace your script tags referencing these external files like so:</p><pre><code>&lt;!DOCTYPE html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{Title}&lt;/title&gt;\n                &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:3000/path/to/prod/index.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                        // where the tumblrData gets created\n                &lt;/script&gt;\n                &lt;script src=\"http://localhost:3000/path/to/prod/index.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Once you run that script, it’ll enable live reload so that every time you save a .js_.css_.scss/etc. file, it’ll rebuild the assets and refresh your Tumblr blog for you. This is way faster than having to re-upload your assets every time you make a change, no matter how small. Just remember to return your script and style references to the uploaded assets when you&rsquo;re done working. Localhost is only for development.</p><p>You could also add the Redux logger middleware to your project during development so that you can view how the state changes as you fire off different actions. For more information on how to set this up, the <a href=\"https://github.com/evgenyrodionov/redux-logger\">Redux Logger Github</a> is a great resource.</p><h2>Summary</h2><p>Building a Tumblr theme using Redux and React is possible! Not only is there a workflow that makes development much faster, but it’s also a great way to flex your web development muscles. You can add more to the user experience of your Tumblr now that you have the world of JavaScript at your fingertips. Go forth and make some awesome themes!</p><p>Stay tuned for part 2 that will cover paginating.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mxssASjQiaTgBDxA9aSSHDA\">@0xmichelle</a></p>","reblog":{"comment":"<p><figure class=\"tmblr-full\" data-orig-height=\"995\" data-orig-width=\"1982\"><img src=\"https://78.media.tumblr.com/2ef65b5b54bce140e7a90f04388ca7d1/tumblr_inline_onw21j562I1qzyw0r_540.png\" data-orig-height=\"995\" data-orig-width=\"1982\"></figure><p>As a platform that prides itself on being a home for artists and creatives alike, it only makes sense that we allow our users to fully customize their Tumblrs to fully express themselves. Here at Tumblr, the world is your oyster not only in terms of looks but also in how you create your theme. I wanted to demonstrate how you too can develop a theme using <a href=\"http://redux.js.org/\">Redux</a> and <a href=\"https://facebook.github.io/react/\">React</a>. Since there are plenty of docs and tutorials on how to use those libraries themselves, I will briefly describe how I got the libraries to work with the Tumblr theme engine, and share some handy tips that made developing more efficient and more enjoyable.</p><p>If you follow the ever changing landscape of JavaScript, then you’ve at least heard of these two libraries. Prior to building the <a href=\"https://mentalhealthquilt.tumblr.com/\">Post-It-Forward</a> theme, I only knew of them by name but never got the chance to actually use them. Developers couldn’t get enough of how React made it easy to create and reuse components. Many also praise how elegantly React manages and renders views, especially when paired with Redux for state management. All of this sounded great. I wanted to turn this project into a learning experience. I thought, “why not?” and gave it a shot.</p><h2>An Extremely Brief Introduction to Tumblr Themes</h2><p>The way themes work on Tumblr is that we have a theme engine that provides special types of operators. These operators insert dynamic data, such as your Tumblr’s title or description, or are blocks that serve as conditionals for rendering a block of HTML, like the “Next Page” link.</p><p>My HTML started off a little something like this:</p><pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{Title}&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>As you can see, <code>{Title}</code> is a variable that will return the title of the Tumblr. The point of entry for this theme is the <code>&lt;div&gt;</code> element with the <code>#post-it-forward-root</code>  ID. In your <code>index.js</code>  file you’ll reference this DOM element in your <code>ReactDom.render()</code> method. If you want to learn more about the theme engine, head over to our <a href=\"https://www.tumblr.com/docs/custom_themes\">Theme Docs</a></p><h2>Creating the Initial State</h2><p>To get things started, we need to create an initial state. How do we introduce this initial state if we have to rely on the theme engine to give us all our data? How do we get the data from HTML land to JS land? Well, here’s one way of doing it:</p><pre><code>&lt;script type=\"text/javascript\"&gt;\n    (function(root) {\n        var ensureString = function(str) {\n            return !str ? '' : str;\n        };\n\n        var basicVariables = {\n            title: ensureString({JSTitle}),\n            name: ensureString({JSName}),\n                        description: ensureString({JSDescription}),\n                        metaDescription: ensureString({JSMetaDescription}),\n                        blogUrl: ensureString({JSBlogURL}),\n                        rss: ensureString({JSRSS}),\n            favicon: ensureString({JSFavicon}),\n            customCss: ensureString({JSCustomCSS}),\n            isPermalinkPage: !!ensureString(/*{block:PermalinkPage}*/true/*{/block:PermalinkPage}*/),\n            isIndexPage: !!ensureString(/*{block:IndexPage}*/true/*{/block:IndexPage}*/),\n            /*{block:PostTitle}*/\n            postTitle: ensureString({JSPostTitle}),\n            /*{/block:PostTitle}*/\n            /*{block:PostSummary}*/\n            postSummary: ensureString({JSPostSummary}),\n            /*{/block:PostSummary}*/\n            portraitUrl16: ensureString({JSPortraitURL-16}),\n            portraitUrl24: ensureString({JSPortraitURL-24}),\n            portraitUrl30: ensureString({JSPortraitURL-30}),\n            portraitUrl40: ensureString({JSPortraitURL-40}),\n            portraitUrl48: ensureString({JSPortraitURL-48}),\n            portraitUrl64: ensureString({JSPortraitURL-64}),\n            portraitUrl96: ensureString({JSPortraitURL-96}),\n            portraitUrl128: ensureString({JSPortraitURL-128}),\n            copyrightYears: ensureString({JSCopyrightYears}),\n            isSearchPage: !!ensureString(/*{block:SearchPage}*/true/*{/block:SearchPage}*/),\n            searchQuery: ensureString({JSSearchQuery}),\n            safeSearchQuery: ensureString({JSURLSafeSearchQuery}),\n            searchPlaceHolder: ensureString('{lang:Search Blog}'),\n            noSearchResults: !!ensureString(/*{block:NoSearchResults}*/true/*{/block:NoSearchResults}*/),\n        };\n\n        root.tumblrData = {\n            basicVariables: basicVariables,\n            };\n    })(this);\n&lt;/script&gt;\n</code></pre><p>This creates a <code>tumblrData</code> attribute on the browser’s <code>window</code> object.</p><p>Sometimes the theme engine returns nothing for a particular variable if it’s not available. For example, if I made a post that does not have a title,  the final <code>root.tumblrData</code>  object will not have <code>postTitle</code> as a key. Sometimes the key will be available but the theme engine returned an empty value for it. For those cases, I created a helper method called <code>ensureString()</code> that turns those empty values into empty strings.  Sometimes you might need a boolean value. In those cases, I’ll enter the conditional variables from the theme engine into the helper method to get the boolean value from it.</p><p>Once you’ve set up your initial state make sure that you place this script tag before the script tag that references the rest of your code that should be compiled and minified and uploaded through the asset uploader that the Tumblr text editor provides.  This ensures that the <code>tumblrData</code> is accessible through the <code>window</code> object by the time the React app gets initiated.</p><p><code>tumblrData</code> should look something like this:</p><pre><code>const tumblrData = {\n    basicVariables: {\n        blogUrl: \"https://mentalhealthquilt.tumblr.com/\",\n        copyrightYears: \"2016–2017\",\n        customCss: \"\",\n                description: \"Mental Health Quilt\",\n        favicon: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        isIndexPage: true,\n        isPermalinkPage: false,\n        isSearchPage: false,\n        metaDescription: \"Mental Health Quilt\",\n        name: \"mentalhealthquilt\",\n        noSearchResults: false,\n        portraitUrl16: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_16.png\",\n        portraitUrl24: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_24.png\",\n        portraitUrl30: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_30.png\",\n        portraitUrl40: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_40.png\",\n        portraitUrl48: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_48.png\",\n        portraitUrl64: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_64.png\",\n        portraitUrl96: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_96.png\",\n        portraitUrl128: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        rss: \"https://mentalhealthquilt.tumblr.com/rss\",\n        safeSearchQuery: \"\",\n        searchPlaceHolder: \"Search mentalhealthquilt\",\n        searchQuery: \"\",\n        title: \"Mental Health Quilt\",\n    },\n}\n</code></pre><p>Now we have the data that the theme engine gave us in a format that React and Redux can work with.</p><p>If you are new to these libraries, I highly recommend following the simple <a href=\"http://redux.js.org/docs/basics/index.html\">Todo App Tutorial</a>  that is on the Redux website. They do a wonderful job of explaining the process as you build the app.</p><h2>Helpful Tips</h2><p>Setting up a local server will make developing way faster than the current setup. If you’re using both the “webpack”  and “webpack-dev-server” packages, in your <code>package.json</code> file under <code>scripts</code> you can place something like this in it:</p><p><i>In your package.json file</i></p><pre><code>...\n\"scripts\": {\n    \"local-server\": \"NODE_ENV=development webpack-dev-server --config path/to/webpack.config.js --port=3000 --inline --hot\"\n},\n...\n</code></pre><p>To run that script, in the terminal you will type this command:</p><pre><code>&gt; npm run local-server\n</code></pre><p>In the Tumblr editor, be sure to replace your script tags referencing these external files like so:</p><pre><code>&lt;!DOCTYPE html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{Title}&lt;/title&gt;\n                &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:3000/path/to/prod/index.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                        // where the tumblrData gets created\n                &lt;/script&gt;\n                &lt;script src=\"http://localhost:3000/path/to/prod/index.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Once you run that script, it’ll enable live reload so that every time you save a .js_.css_.scss/etc. file, it’ll rebuild the assets and refresh your Tumblr blog for you. This is way faster than having to re-upload your assets every time you make a change, no matter how small. Just remember to return your script and style references to the uploaded assets when you’re done working. Localhost is only for development.</p><p>You could also add the Redux logger middleware to your project during development so that you can view how the state changes as you fire off different actions. For more information on how to set this up, the <a href=\"https://github.com/evgenyrodionov/redux-logger\">Redux Logger Github</a> is a great resource.</p><h2>Summary</h2><p>Building a Tumblr theme using Redux and React is possible! Not only is there a workflow that makes development much faster, but it’s also a great way to flex your web development muscles. You can add more to the user experience of your Tumblr now that you have the world of JavaScript at your fingertips. Go forth and make some awesome themes!</p><p>Stay tuned for part 2 that will cover paginating.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mxssASjQiaTgBDxA9aSSHDA\">@0xmichelle</a></p></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"159266372136"},"content_raw":"<p><figure class=\"tmblr-full\" data-orig-height=\"995\" data-orig-width=\"1982\"><img src=\"https://78.media.tumblr.com/2ef65b5b54bce140e7a90f04388ca7d1/tumblr_inline_onw21j562I1qzyw0r_540.png\" data-orig-height=\"995\" data-orig-width=\"1982\"></figure><p>As a platform that prides itself on being a home for artists and creatives alike, it only makes sense that we allow our users to fully customize their Tumblrs to fully express themselves. Here at Tumblr, the world is your oyster not only in terms of looks but also in how you create your theme. I wanted to demonstrate how you too can develop a theme using <a href=\"http://redux.js.org/\">Redux</a> and <a href=\"https://facebook.github.io/react/\">React</a>. Since there are plenty of docs and tutorials on how to use those libraries themselves, I will briefly describe how I got the libraries to work with the Tumblr theme engine, and share some handy tips that made developing more efficient and more enjoyable.</p><p>If you follow the ever changing landscape of JavaScript, then you’ve at least heard of these two libraries. Prior to building the <a href=\"https://mentalhealthquilt.tumblr.com/\">Post-It-Forward</a> theme, I only knew of them by name but never got the chance to actually use them. Developers couldn’t get enough of how React made it easy to create and reuse components. Many also praise how elegantly React manages and renders views, especially when paired with Redux for state management. All of this sounded great. I wanted to turn this project into a learning experience. I thought, “why not?” and gave it a shot.</p><h2>An Extremely Brief Introduction to Tumblr Themes</h2><p>The way themes work on Tumblr is that we have a theme engine that provides special types of operators. These operators insert dynamic data, such as your Tumblr’s title or description, or are blocks that serve as conditionals for rendering a block of HTML, like the “Next Page” link.</p><p>My HTML started off a little something like this:</p><pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{Title}&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>As you can see, <code>{Title}</code> is a variable that will return the title of the Tumblr. The point of entry for this theme is the <code>&lt;div&gt;</code> element with the <code>#post-it-forward-root</code>  ID. In your <code>index.js</code>  file you’ll reference this DOM element in your <code>ReactDom.render()</code> method. If you want to learn more about the theme engine, head over to our <a href=\"https://www.tumblr.com/docs/custom_themes\">Theme Docs</a></p><h2>Creating the Initial State</h2><p>To get things started, we need to create an initial state. How do we introduce this initial state if we have to rely on the theme engine to give us all our data? How do we get the data from HTML land to JS land? Well, here’s one way of doing it:</p><pre><code>&lt;script type=\"text/javascript\"&gt;\n    (function(root) {\n        var ensureString = function(str) {\n            return !str ? '' : str;\n        };\n\n        var basicVariables = {\n            title: ensureString({JSTitle}),\n            name: ensureString({JSName}),\n                        description: ensureString({JSDescription}),\n                        metaDescription: ensureString({JSMetaDescription}),\n                        blogUrl: ensureString({JSBlogURL}),\n                        rss: ensureString({JSRSS}),\n            favicon: ensureString({JSFavicon}),\n            customCss: ensureString({JSCustomCSS}),\n            isPermalinkPage: !!ensureString(/*{block:PermalinkPage}*/true/*{/block:PermalinkPage}*/),\n            isIndexPage: !!ensureString(/*{block:IndexPage}*/true/*{/block:IndexPage}*/),\n            /*{block:PostTitle}*/\n            postTitle: ensureString({JSPostTitle}),\n            /*{/block:PostTitle}*/\n            /*{block:PostSummary}*/\n            postSummary: ensureString({JSPostSummary}),\n            /*{/block:PostSummary}*/\n            portraitUrl16: ensureString({JSPortraitURL-16}),\n            portraitUrl24: ensureString({JSPortraitURL-24}),\n            portraitUrl30: ensureString({JSPortraitURL-30}),\n            portraitUrl40: ensureString({JSPortraitURL-40}),\n            portraitUrl48: ensureString({JSPortraitURL-48}),\n            portraitUrl64: ensureString({JSPortraitURL-64}),\n            portraitUrl96: ensureString({JSPortraitURL-96}),\n            portraitUrl128: ensureString({JSPortraitURL-128}),\n            copyrightYears: ensureString({JSCopyrightYears}),\n            isSearchPage: !!ensureString(/*{block:SearchPage}*/true/*{/block:SearchPage}*/),\n            searchQuery: ensureString({JSSearchQuery}),\n            safeSearchQuery: ensureString({JSURLSafeSearchQuery}),\n            searchPlaceHolder: ensureString('{lang:Search Blog}'),\n            noSearchResults: !!ensureString(/*{block:NoSearchResults}*/true/*{/block:NoSearchResults}*/),\n        };\n\n        root.tumblrData = {\n            basicVariables: basicVariables,\n            };\n    })(this);\n&lt;/script&gt;\n</code></pre><p>This creates a <code>tumblrData</code> attribute on the browser’s <code>window</code> object.</p><p>Sometimes the theme engine returns nothing for a particular variable if it’s not available. For example, if I made a post that does not have a title,  the final <code>root.tumblrData</code>  object will not have <code>postTitle</code> as a key. Sometimes the key will be available but the theme engine returned an empty value for it. For those cases, I created a helper method called <code>ensureString()</code> that turns those empty values into empty strings.  Sometimes you might need a boolean value. In those cases, I’ll enter the conditional variables from the theme engine into the helper method to get the boolean value from it.</p><p>Once you’ve set up your initial state make sure that you place this script tag before the script tag that references the rest of your code that should be compiled and minified and uploaded through the asset uploader that the Tumblr text editor provides.  This ensures that the <code>tumblrData</code> is accessible through the <code>window</code> object by the time the React app gets initiated.</p><p><code>tumblrData</code> should look something like this:</p><pre><code>const tumblrData = {\n    basicVariables: {\n        blogUrl: \"https://mentalhealthquilt.tumblr.com/\",\n        copyrightYears: \"2016–2017\",\n        customCss: \"\",\n                description: \"Mental Health Quilt\",\n        favicon: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        isIndexPage: true,\n        isPermalinkPage: false,\n        isSearchPage: false,\n        metaDescription: \"Mental Health Quilt\",\n        name: \"mentalhealthquilt\",\n        noSearchResults: false,\n        portraitUrl16: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_16.png\",\n        portraitUrl24: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_24.png\",\n        portraitUrl30: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_30.png\",\n        portraitUrl40: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_40.png\",\n        portraitUrl48: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_48.png\",\n        portraitUrl64: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_64.png\",\n        portraitUrl96: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_96.png\",\n        portraitUrl128: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        rss: \"https://mentalhealthquilt.tumblr.com/rss\",\n        safeSearchQuery: \"\",\n        searchPlaceHolder: \"Search mentalhealthquilt\",\n        searchQuery: \"\",\n        title: \"Mental Health Quilt\",\n    },\n}\n</code></pre><p>Now we have the data that the theme engine gave us in a format that React and Redux can work with.</p><p>If you are new to these libraries, I highly recommend following the simple <a href=\"http://redux.js.org/docs/basics/index.html\">Todo App Tutorial</a>  that is on the Redux website. They do a wonderful job of explaining the process as you build the app.</p><h2>Helpful Tips</h2><p>Setting up a local server will make developing way faster than the current setup. If you’re using both the “webpack”  and “webpack-dev-server” packages, in your <code>package.json</code> file under <code>scripts</code> you can place something like this in it:</p><p><i>In your package.json file</i></p><pre><code>...\n\"scripts\": {\n    \"local-server\": \"NODE_ENV=development webpack-dev-server --config path/to/webpack.config.js --port=3000 --inline --hot\"\n},\n...\n</code></pre><p>To run that script, in the terminal you will type this command:</p><pre><code>&gt; npm run local-server\n</code></pre><p>In the Tumblr editor, be sure to replace your script tags referencing these external files like so:</p><pre><code>&lt;!DOCTYPE html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{Title}&lt;/title&gt;\n                &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:3000/path/to/prod/index.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                        // where the tumblrData gets created\n                &lt;/script&gt;\n                &lt;script src=\"http://localhost:3000/path/to/prod/index.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Once you run that script, it’ll enable live reload so that every time you save a .js_.css_.scss/etc. file, it’ll rebuild the assets and refresh your Tumblr blog for you. This is way faster than having to re-upload your assets every time you make a change, no matter how small. Just remember to return your script and style references to the uploaded assets when you’re done working. Localhost is only for development.</p><p>You could also add the Redux logger middleware to your project during development so that you can view how the state changes as you fire off different actions. For more information on how to set this up, the <a href=\"https://github.com/evgenyrodionov/redux-logger\">Redux Logger Github</a> is a great resource.</p><h2>Summary</h2><p>Building a Tumblr theme using Redux and React is possible! Not only is there a workflow that makes development much faster, but it’s also a great way to flex your web development muscles. You can add more to the user experience of your Tumblr now that you have the world of JavaScript at your fingertips. Go forth and make some awesome themes!</p><p>Stay tuned for part 2 that will cover paginating.</p><p>- <a class=\"tumblelog\" href=\"https://tmblr.co/mxssASjQiaTgBDxA9aSSHDA\">@0xmichelle</a></p></p>","content":"<p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/2ef65b5b54bce140e7a90f04388ca7d1/tumblr_inline_onw21j562I1qzyw0r_540.png\" class=\"\"/></figure><p>As a platform that prides itself on being a home for artists and creatives alike, it only makes sense that we allow our users to fully customize their Tumblrs to fully express themselves. Here at Tumblr, the world is your oyster not only in terms of looks but also in how you create your theme. I wanted to demonstrate how you too can develop a theme using <a href=\"http://redux.js.org/\">Redux</a> and <a href=\"https://facebook.github.io/react/\">React</a>. Since there are plenty of docs and tutorials on how to use those libraries themselves, I will briefly describe how I got the libraries to work with the Tumblr theme engine, and share some handy tips that made developing more efficient and more enjoyable.</p><p>If you follow the ever changing landscape of JavaScript, then you&rsquo;ve at least heard of these two libraries. Prior to building the <a href=\"https://mentalhealthquilt.tumblr.com/\">Post-It-Forward</a> theme, I only knew of them by name but never got the chance to actually use them. Developers couldn&rsquo;t get enough of how React made it easy to create and reuse components. Many also praise how elegantly React manages and renders views, especially when paired with Redux for state management. All of this sounded great. I wanted to turn this project into a learning experience. I thought, &ldquo;why not?&rdquo; and gave it a shot.</p><h2>An Extremely Brief Introduction to Tumblr Themes</h2><p>The way themes work on Tumblr is that we have a theme engine that provides special types of operators. These operators insert dynamic data, such as your Tumblr&rsquo;s title or description, or are blocks that serve as conditionals for rendering a block of HTML, like the &ldquo;Next Page&rdquo; link.</p><p>My HTML started off a little something like this:</p><pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n    &lt;title&gt;{Title}&lt;/title&gt;\n        &lt;style&gt;&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>As you can see, <code>{Title}</code> is a variable that will return the title of the Tumblr. The point of entry for this theme is the <code>&lt;div&gt;</code> element with the <code>#post-it-forward-root</code>  ID. In your <code>index.js</code>  file you&rsquo;ll reference this DOM element in your <code>ReactDom.render()</code> method. If you want to learn more about the theme engine, head over to our <a href=\"https://www.tumblr.com/docs/custom_themes\">Theme Docs</a></p><h2>Creating the Initial State</h2><p>To get things started, we need to create an initial state. How do we introduce this initial state if we have to rely on the theme engine to give us all our data? How do we get the data from HTML land to JS land? Well, here&rsquo;s one way of doing it:</p><pre><code>&lt;script type=\"text/javascript\"&gt;\n    (function(root) {\n        var ensureString = function(str) {\n            return !str ? '' : str;\n        };\n\n        var basicVariables = {\n            title: ensureString({JSTitle}),\n            name: ensureString({JSName}),\n                        description: ensureString({JSDescription}),\n                        metaDescription: ensureString({JSMetaDescription}),\n                        blogUrl: ensureString({JSBlogURL}),\n                        rss: ensureString({JSRSS}),\n            favicon: ensureString({JSFavicon}),\n            customCss: ensureString({JSCustomCSS}),\n            isPermalinkPage: !!ensureString(/*{block:PermalinkPage}*/true/*{/block:PermalinkPage}*/),\n            isIndexPage: !!ensureString(/*{block:IndexPage}*/true/*{/block:IndexPage}*/),\n            /*{block:PostTitle}*/\n            postTitle: ensureString({JSPostTitle}),\n            /*{/block:PostTitle}*/\n            /*{block:PostSummary}*/\n            postSummary: ensureString({JSPostSummary}),\n            /*{/block:PostSummary}*/\n            portraitUrl16: ensureString({JSPortraitURL-16}),\n            portraitUrl24: ensureString({JSPortraitURL-24}),\n            portraitUrl30: ensureString({JSPortraitURL-30}),\n            portraitUrl40: ensureString({JSPortraitURL-40}),\n            portraitUrl48: ensureString({JSPortraitURL-48}),\n            portraitUrl64: ensureString({JSPortraitURL-64}),\n            portraitUrl96: ensureString({JSPortraitURL-96}),\n            portraitUrl128: ensureString({JSPortraitURL-128}),\n            copyrightYears: ensureString({JSCopyrightYears}),\n            isSearchPage: !!ensureString(/*{block:SearchPage}*/true/*{/block:SearchPage}*/),\n            searchQuery: ensureString({JSSearchQuery}),\n            safeSearchQuery: ensureString({JSURLSafeSearchQuery}),\n            searchPlaceHolder: ensureString('{lang:Search Blog}'),\n            noSearchResults: !!ensureString(/*{block:NoSearchResults}*/true/*{/block:NoSearchResults}*/),\n        };\n\n        root.tumblrData = {\n            basicVariables: basicVariables,\n            };\n    })(this);\n&lt;/script&gt;\n</code></pre><p>This creates a <code>tumblrData</code> attribute on the browser&rsquo;s <code>window</code> object.</p><p>Sometimes the theme engine returns nothing for a particular variable if it&rsquo;s not available. For example, if I made a post that does not have a title,  the final <code>root.tumblrData</code>  object will not have <code>postTitle</code> as a key. Sometimes the key will be available but the theme engine returned an empty value for it. For those cases, I created a helper method called <code>ensureString()</code> that turns those empty values into empty strings.  Sometimes you might need a boolean value. In those cases, I&rsquo;ll enter the conditional variables from the theme engine into the helper method to get the boolean value from it.</p><p>Once you&rsquo;ve set up your initial state make sure that you place this script tag before the script tag that references the rest of your code that should be compiled and minified and uploaded through the asset uploader that the Tumblr text editor provides.  This ensures that the <code>tumblrData</code> is accessible through the <code>window</code> object by the time the React app gets initiated.</p><p><code>tumblrData</code> should look something like this:</p><pre><code>const tumblrData = {\n    basicVariables: {\n        blogUrl: \"https://mentalhealthquilt.tumblr.com/\",\n        copyrightYears: \"2016&ndash;2017\",\n        customCss: \"\",\n                description: \"Mental Health Quilt\",\n        favicon: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        isIndexPage: true,\n        isPermalinkPage: false,\n        isSearchPage: false,\n        metaDescription: \"Mental Health Quilt\",\n        name: \"mentalhealthquilt\",\n        noSearchResults: false,\n        portraitUrl16: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_16.png\",\n        portraitUrl24: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_24.png\",\n        portraitUrl30: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_30.png\",\n        portraitUrl40: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_40.png\",\n        portraitUrl48: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_48.png\",\n        portraitUrl64: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_64.png\",\n        portraitUrl96: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_96.png\",\n        portraitUrl128: \"https://68.media.tumblr.com/avatar_c402eedfb9d5_128.png\",\n        rss: \"https://mentalhealthquilt.tumblr.com/rss\",\n        safeSearchQuery: \"\",\n        searchPlaceHolder: \"Search mentalhealthquilt\",\n        searchQuery: \"\",\n        title: \"Mental Health Quilt\",\n    },\n}\n</code></pre><p>Now we have the data that the theme engine gave us in a format that React and Redux can work with.</p><p>If you are new to these libraries, I highly recommend following the simple <a href=\"http://redux.js.org/docs/basics/index.html\">Todo App Tutorial</a>  that is on the Redux website. They do a wonderful job of explaining the process as you build the app.</p><h2>Helpful Tips</h2><p>Setting up a local server will make developing way faster than the current setup. If you&rsquo;re using both the &ldquo;webpack&rdquo;  and &ldquo;webpack-dev-server&rdquo; packages, in your <code>package.json</code> file under <code>scripts</code> you can place something like this in it:</p><p><i>In your package.json file</i></p><pre><code>...\n\"scripts\": {\n    \"local-server\": \"NODE_ENV=development webpack-dev-server --config path/to/webpack.config.js --port=3000 --inline --hot\"\n},\n...\n</code></pre><p>To run that script, in the terminal you will type this command:</p><pre><code>&gt; npm run local-server\n</code></pre><p>In the Tumblr editor, be sure to replace your script tags referencing these external files like so:</p><pre><code>&lt;!DOCTYPE html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{Title}&lt;/title&gt;\n                &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:3000/path/to/prod/index.css\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;div id=\"post-it-forward-root\"&gt;&lt;/div&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                        // where the tumblrData gets created\n                &lt;/script&gt;\n                &lt;script src=\"http://localhost:3000/path/to/prod/index.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Once you run that script, it&rsquo;ll enable live reload so that every time you save a .js_.css_.scss/etc. file, it&rsquo;ll rebuild the assets and refresh your Tumblr blog for you. This is way faster than having to re-upload your assets every time you make a change, no matter how small. Just remember to return your script and style references to the uploaded assets when you&rsquo;re done working. Localhost is only for development.</p><p>You could also add the Redux logger middleware to your project during development so that you can view how the state changes as you fire off different actions. For more information on how to set this up, the <a href=\"https://github.com/evgenyrodionov/redux-logger\">Redux Logger Github</a> is a great resource.</p><h2>Summary</h2><p>Building a Tumblr theme using Redux and React is possible! Not only is there a workflow that makes development much faster, but it&rsquo;s also a great way to flex your web development muscles. You can add more to the user experience of your Tumblr now that you have the world of JavaScript at your fingertips. Go forth and make some awesome themes!</p><p>Stay tuned for part 2 that will cover paginating.</p><p>- <a href=\"https://tmblr.co/mxssASjQiaTgBDxA9aSSHDA\">@0xmichelle</a></p></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"video","blog_name":"engineering","id":158740378403,"post_url":"https://engineering.tumblr.com/post/158740378403/rapid-view-prototyping-using-fbsnapshottestcase","slug":"rapid-view-prototyping-using-fbsnapshottestcase","date":"2017-03-23 14:00:19 GMT","timestamp":1490277619,"state":"published","format":"markdown","reblog_key":"uiS2jVHC","tags":["swift","prototyping"],"short_url":"https://tmblr.co/ZI3nWx2JrgVCZ","summary":"# Rapid View Prototyping Using FBSnapshotTestCase \n\nPaul Rehkugler gave this talk at the [Brooklyn Swift...","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":35,"caption":"<h1>Rapid View Prototyping Using FBSnapshotTestCase</h1>\n\n<p>Paul Rehkugler gave this talk at the <a href=\"https://www.meetup.com/Brooklyn-Swift-Developers/events/230099813/\">Brooklyn Swift Meetup</a> on Apr 12, 2016.</p>\n\n<p><a href=\"https://github.com/facebook/ios-snapshot-test-case\"><code>FBSnapshotTestCase</code></a> is a powerful tool that was built to unit test the visual appearance of <code>UIView</code>s, but that’s not all it can do. This talk will explore how you can leverage <code>FBSnapshotTestCase</code> to simulate the visual feedback of Interface Builder when programmatically laying out views.</p>\n\n<p>You can find the code used for this exercise on <a href=\"https://github.com/paulrehkugler/Snapshot-Test-Case-Talk\">Paul&rsquo;s GitHub</a>.</p>\n\n<p><a href=\"https://twitter.com/paulrehkugler\">Paul Rehkugler</a> <a href=\"http://blog.paulrehkugler.com/\">(pr)</a> is a Staff Engineer at Tumblr. If he’s not writing software, he’s probably hiking or playing guitar.</p>","reblog":{"comment":"<p><h1>Rapid View Prototyping Using FBSnapshotTestCase</h1>\n\n<p>Paul Rehkugler gave this talk at the <a href=\"https://www.meetup.com/Brooklyn-Swift-Developers/events/230099813/\">Brooklyn Swift Meetup</a> on Apr 12, 2016.</p>\n\n<p><a href=\"https://github.com/facebook/ios-snapshot-test-case\"><code>FBSnapshotTestCase</code></a> is a powerful tool that was built to unit test the visual appearance of <code>UIView</code>s, but that’s not all it can do. This talk will explore how you can leverage <code>FBSnapshotTestCase</code> to simulate the visual feedback of Interface Builder when programmatically laying out views.</p>\n\n<p>You can find the code used for this exercise on <a href=\"https://github.com/paulrehkugler/Snapshot-Test-Case-Talk\">Paul’s GitHub</a>.</p>\n\n<p><a href=\"https://twitter.com/paulrehkugler\">Paul Rehkugler</a> <a href=\"http://blog.paulrehkugler.com/\">(pr)</a> is a Staff Engineer at Tumblr. If he’s not writing software, he’s probably hiking or playing guitar.</p></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"158740378403"},"content_raw":"<p><h1>Rapid View Prototyping Using FBSnapshotTestCase</h1>\n\n<p>Paul Rehkugler gave this talk at the <a href=\"https://www.meetup.com/Brooklyn-Swift-Developers/events/230099813/\">Brooklyn Swift Meetup</a> on Apr 12, 2016.</p>\n\n<p><a href=\"https://github.com/facebook/ios-snapshot-test-case\"><code>FBSnapshotTestCase</code></a> is a powerful tool that was built to unit test the visual appearance of <code>UIView</code>s, but that’s not all it can do. This talk will explore how you can leverage <code>FBSnapshotTestCase</code> to simulate the visual feedback of Interface Builder when programmatically laying out views.</p>\n\n<p>You can find the code used for this exercise on <a href=\"https://github.com/paulrehkugler/Snapshot-Test-Case-Talk\">Paul’s GitHub</a>.</p>\n\n<p><a href=\"https://twitter.com/paulrehkugler\">Paul Rehkugler</a> <a href=\"http://blog.paulrehkugler.com/\">(pr)</a> is a Staff Engineer at Tumblr. If he’s not writing software, he’s probably hiking or playing guitar.</p></p>","content":"<p><h1>Rapid View Prototyping Using FBSnapshotTestCase</h1>\n\n<p>Paul Rehkugler gave this talk at the <a href=\"https://www.meetup.com/Brooklyn-Swift-Developers/events/230099813/\">Brooklyn Swift Meetup</a> on Apr 12, 2016.</p>\n\n<p><a href=\"https://github.com/facebook/ios-snapshot-test-case\"><code>FBSnapshotTestCase</code></a> is a powerful tool that was built to unit test the visual appearance of <code>UIView</code>s, but that&rsquo;s not all it can do. This talk will explore how you can leverage <code>FBSnapshotTestCase</code> to simulate the visual feedback of Interface Builder when programmatically laying out views.</p>\n\n<p>You can find the code used for this exercise on <a href=\"https://github.com/paulrehkugler/Snapshot-Test-Case-Talk\">Paul&rsquo;s GitHub</a>.</p>\n\n<p><a href=\"https://twitter.com/paulrehkugler\">Paul Rehkugler</a> <a href=\"http://blog.paulrehkugler.com/\">(pr)</a> is a Staff Engineer at Tumblr. If he&rsquo;s not writing software, he&rsquo;s probably hiking or playing guitar.</p></p>","is_current_item":true,"is_root_item":true}],"html5_capable":false,"player":[{"width":250,"embed_code":false},{"width":400,"embed_code":false},{"width":500,"embed_code":false}],"video_type":"youtube","can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"video","blog_name":"engineering","id":157614049236,"post_url":"https://engineering.tumblr.com/post/157614049236/deep-dive-into-networking-in-swift-swift-has-a","slug":"deep-dive-into-networking-in-swift-swift-has-a","date":"2017-02-23 16:00:21 GMT","timestamp":1487865621,"state":"published","format":"html","reblog_key":"tVJGCpJL","tags":["swift","networking"],"short_url":"https://tmblr.co/ZI3nWx2IoXuVK","summary":"Deep Dive Into Networking in Swift Swift has a bunch of cool features that can make networking a lot easier, more expressive,...","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":114,"caption":"<h2>Deep Dive Into Networking in Swift</h2><p>Swift has a bunch of cool features that can make networking a lot easier, more expressive, and safer than in Objective-C. Learn about how Tumblr embraced Swift in our networking code and about the architecture of our new networking library.</p><p><a href=\"https://twitter.com/pearapps\">Kenny Ackerson</a> <a href=\"https://pearapps.tumblr.com\">(pearapps)</a> is a Senior Engineer at Tumblr.</p>","reblog":{"comment":"<p><h2>Deep Dive Into Networking in Swift</h2><p>Swift has a bunch of cool features that can make networking a lot easier, more expressive, and safer than in Objective-C. Learn about how Tumblr embraced Swift in our networking code and about the architecture of our new networking library.</p><p><a href=\"https://twitter.com/pearapps\">Kenny Ackerson</a> <a href=\"https://pearapps.tumblr.com\">(pearapps)</a> is a Senior Engineer at Tumblr.</p></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"157614049236"},"content_raw":"<p><h2>Deep Dive Into Networking in Swift</h2><p>Swift has a bunch of cool features that can make networking a lot easier, more expressive, and safer than in Objective-C. Learn about how Tumblr embraced Swift in our networking code and about the architecture of our new networking library.</p><p><a href=\"https://twitter.com/pearapps\">Kenny Ackerson</a> <a href=\"https://pearapps.tumblr.com\">(pearapps)</a> is a Senior Engineer at Tumblr.</p></p>","content":"<p><h2>Deep Dive Into Networking in Swift</h2><p>Swift has a bunch of cool features that can make networking a lot easier, more expressive, and safer than in Objective-C. Learn about how Tumblr embraced Swift in our networking code and about the architecture of our new networking library.</p><p><a href=\"https://twitter.com/pearapps\">Kenny Ackerson</a> <a href=\"https://pearapps.tumblr.com\">(pearapps)</a> is a Senior Engineer at Tumblr.</p></p>","is_current_item":true,"is_root_item":true}],"html5_capable":false,"player":[{"width":250,"embed_code":false},{"width":400,"embed_code":false},{"width":500,"embed_code":false}],"video_type":"youtube","can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":156934724082,"post_url":"https://engineering.tumblr.com/post/156934724082/how-i-code-now","slug":"how-i-code-now","date":"2017-02-07 15:00:24 GMT","timestamp":1486479624,"state":"published","format":"html","reblog_key":"qfvsma2H","tags":["programming","engineering"],"short_url":"https://tmblr.co/ZI3nWx2IA2Tdo","summary":"How I Code Now","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":233,"title":"How I Code Now","body":"<p><a href=\"https://cyle.tumblr.com/post/156678669280/how-i-code-now\" class=\"tumblr_blog\">cyle</a>:</p><blockquote>\n<p>I’ve learned a lot about how to be a better engineer after almost two years of writing code at Tumblr. The majority of Tumblr is built on a few massive shared codebases, so I’ve learned that the strength of the product is only as good as our collective ability to write code for each other. And we ship a lot of code all the time—we have engineers writing code, getting it reviewed, and deploying it to production within the first few days of being on the job.</p>\n<p>I’ve found that <b>coding at scale is more social than technical, and this is a very good thing.</b> When writing code in a large scale environment with a codebase shared by more than a handful of people, I’m not writing code just for the computer to read anymore: I’m writing code for the dozens of other engineers who share the codebase with me. At some companies, and for some open source projects, a codebase can be shared by hundreds or thousands of people; your experience with another person may be solely through their code or code review. With this in mind, it’s extremely important to have good, humanist coding practices.</p>\n<p>A humanist coding practice means my code is <b>easy to read by anyone who shares the codebase</b> with me. My code is explained not only by the way it’s written (the literal syntax, structure, and variable naming) and the unit tests I’ve written for it, but also by documenting it inline with comments. In my world, there can never be too many comments explaining how something works. Documenting the internals of my code is just as important as documenting its interface. Too often engineers focus their documentation effort into making clear the way to use their code without spending any time documenting how their code actually works.</p>\n<p>It’s similar to the idea of <a href=\"https://medium.com/@bartobri/applying-the-linus-tarvolds-good-taste-coding-requirement-99749f37684a#.n2w1x1j8i\">“good taste” when coding</a>. While it’s important to keep complexity low and efficiency high, it’s even more important to keep readability (by humans) high. If I write code in a shared codebase that’s highly performant, but nobody else can understand it, is it really all that useful at the end of the day? Almost never. While it’s true that I’m writing code to be performant on a machine, my first priority should be to make sure my code is maintainable by other people. Every engineer needs to be able to take a vacation and feel confident that <i>someone else</i> can fix a bug in their code.</p> <p><a href=\"https://cyle.tumblr.com/post/156678669280/how-i-code-now\" class=\"tmblr-truncated-link read_more\">Keep reading</a></p>\n</blockquote>","reblog":{"comment":"","tree_html":"<p><a href=\"https://cyle.tumblr.com/post/156678669280/how-i-code-now\" class=\"tumblr_blog\">cyle</a>:</p>\n<blockquote>\n<p>I’ve learned a lot about how to be a better engineer after almost two years of writing code at Tumblr. The majority of Tumblr is built on a few massive shared codebases, so I’ve learned that the strength of the product is only as good as our collective ability to write code for each other. And we ship a lot of code all the time—we have engineers writing code, getting it reviewed, and deploying it to production within the first few days of being on the job.</p>\n<p>I’ve found that <b>coding at scale is more social than technical, and this is a very good thing.</b> When writing code in a large scale environment with a codebase shared by more than a handful of people, I’m not writing code just for the computer to read anymore: I’m writing code for the dozens of other engineers who share the codebase with me. At some companies, and for some open source projects, a codebase can be shared by hundreds or thousands of people; your experience with another person may be solely through their code or code review. With this in mind, it’s extremely important to have good, humanist coding practices.</p>\n<p>A humanist coding practice means my code is <b>easy to read by anyone who shares the codebase</b> with me. My code is explained not only by the way it’s written (the literal syntax, structure, and variable naming) and the unit tests I’ve written for it, but also by documenting it inline with comments. In my world, there can never be too many comments explaining how something works. Documenting the internals of my code is just as important as documenting its interface. Too often engineers focus their documentation effort into making clear the way to use their code without spending any time documenting how their code actually works.</p>\n<p>It’s similar to the idea of <a href=\"https://medium.com/@bartobri/applying-the-linus-tarvolds-good-taste-coding-requirement-99749f37684a#.n2w1x1j8i\">“good taste” when coding</a>. While it’s important to keep complexity low and efficiency high, it’s even more important to keep readability (by humans) high. If I write code in a shared codebase that’s highly performant, but nobody else can understand it, is it really all that useful at the end of the day? Almost never. While it’s true that I’m writing code to be performant on a machine, my first priority should be to make sure my code is maintainable by other people. Every engineer needs to be able to take a vacation and feel confident that <i>someone else</i> can fix a bug in their code.</p> <p><a href=\"https://cyle.tumblr.com/post/156678669280/how-i-code-now\" class=\"tmblr-truncated-link read_more\">Keep reading</a></p>\n</blockquote>"},"trail":[{"blog":{"name":"cyle","active":true,"theme":{"avatar_shape":"circle","background_color":"#FFFFFF","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os.png","header_image_focused":"https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os_2048_v2.png","header_image_scaled":"https://static.tumblr.com/c7c41638489846fe4522d6fe132a6b50/58yw7w9/ne6ooqkx4/tumblr_static_33l5bxoon0isw4kgwk04k04os_2048_v2.png","header_stretch":true,"link_color":"#d469cd","show_avatar":false,"show_description":false,"show_header_image":true,"show_title":false,"title_color":"#d71b2e","title_font":"Sofia Pro","title_font_weight":"regular"},"share_likes":false,"share_following":true,"can_be_followed":true},"post":{"id":"156678669280"},"content_raw":"<p>I’ve learned a lot about how to be a better engineer after almost two years of writing code at Tumblr. The majority of Tumblr is built on a few massive shared codebases, so I’ve learned that the strength of the product is only as good as our collective ability to write code for each other. And we ship a lot of code all the time—we have engineers writing code, getting it reviewed, and deploying it to production within the first few days of being on the job.</p>\n<p>I’ve found that <b>coding at scale is more social than technical, and this is a very good thing.</b> When writing code in a large scale environment with a codebase shared by more than a handful of people, I’m not writing code just for the computer to read anymore: I’m writing code for the dozens of other engineers who share the codebase with me. At some companies, and for some open source projects, a codebase can be shared by hundreds or thousands of people; your experience with another person may be solely through their code or code review. With this in mind, it’s extremely important to have good, humanist coding practices.</p>\n<p>A humanist coding practice means my code is <b>easy to read by anyone who shares the codebase</b> with me. My code is explained not only by the way it’s written (the literal syntax, structure, and variable naming) and the unit tests I’ve written for it, but also by documenting it inline with comments. In my world, there can never be too many comments explaining how something works. Documenting the internals of my code is just as important as documenting its interface. Too often engineers focus their documentation effort into making clear the way to use their code without spending any time documenting how their code actually works.</p>\n<p>It’s similar to the idea of <a href=\"https://medium.com/@bartobri/applying-the-linus-tarvolds-good-taste-coding-requirement-99749f37684a#.n2w1x1j8i\">“good taste” when coding</a>. While it’s important to keep complexity low and efficiency high, it’s even more important to keep readability (by humans) high. If I write code in a shared codebase that’s highly performant, but nobody else can understand it, is it really all that useful at the end of the day? Almost never. While it’s true that I’m writing code to be performant on a machine, my first priority should be to make sure my code is maintainable by other people. Every engineer needs to be able to take a vacation and feel confident that <i>someone else</i> can fix a bug in their code.</p> <p><a href=\"https://cyle.tumblr.com/post/156678669280/how-i-code-now\" class=\"tmblr-truncated-link read_more\">Keep reading</a></p>","content_abstract":"<p>I&rsquo;ve learned a lot about how to be a better engineer after almost two years of writing code at Tumblr. The majority of Tumblr is built on a few massive shared codebases, so I&rsquo;ve learned that the strength of the product is only as good as our collective ability to write code for each other. And we ship a lot of code all the time&mdash;we have engineers writing code, getting it reviewed, and deploying it to production within the first few days of being on the job.</p>\n<p>I&rsquo;ve found that <b>coding at scale is more social than technical, and this is a very good thing.</b> When writing code in a large scale environment with a codebase shared by more than a handful of people, I&rsquo;m not writing code just for the computer to read anymore: I&rsquo;m writing code for the dozens of other engineers who share the codebase with me. At some companies, and for some open source projects, a codebase can be shared by hundreds or thousands of people; your experience with another person may be solely through their code or code review. With this in mind, it&rsquo;s extremely important to have good, humanist coding practices.</p>\n<p>A humanist coding practice means my code is <b>easy to read by anyone who shares the codebase</b> with me. My code is explained not only by the way it&rsquo;s written (the literal syntax, structure, and variable naming) and the unit tests I&rsquo;ve written for it, but also by documenting it inline with comments. In my world, there can never be too many comments explaining how something works. Documenting the internals of my code is just as important as documenting its interface. Too often engineers focus their documentation effort into making clear the way to use their code without spending any time documenting how their code actually works.</p>\n<p>It&rsquo;s similar to the idea of <a href=\"https://medium.com/@bartobri/applying-the-linus-tarvolds-good-taste-coding-requirement-99749f37684a#.n2w1x1j8i\">&ldquo;good taste&rdquo; when coding</a>. While it&rsquo;s important to keep complexity low and efficiency high, it&rsquo;s even more important to keep readability (by humans) high. If I write code in a shared codebase that&rsquo;s highly performant, but nobody else can understand it, is it really all that useful at the end of the day? Almost never. While it&rsquo;s true that I&rsquo;m writing code to be performant on a machine, my first priority should be to make sure my code is maintainable by other people. Every engineer needs to be able to take a vacation and feel confident that <i>someone else</i> can fix a bug in their code.</p>","is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":154723895033,"post_url":"https://engineering.tumblr.com/post/154723895033/golang-and-the-tumblr-api","slug":"golang-and-the-tumblr-api","date":"2016-12-20 16:00:11 GMT","timestamp":1482249611,"state":"published","format":"html","reblog_key":"Txa4CX48","tags":["golang","api"],"short_url":"https://tmblr.co/ZI3nWx2G6GqRv","summary":"Golang and The Tumblr API","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":113,"title":"Golang and The Tumblr API","body":"<p>You&rsquo;ve been asking for an official <a href=\"https://golang.org/\">Golang</a> wrapper for the Tumblr API. The wait is over! We are thrilled to unveil two new repositories on our <a href=\"https://github.com/tumblr\">GitHub page</a> which can be the gateway to the Tumblr API in your Go project.</p>\n<ul><li><a href=\"https://github.com/tumblr/tumblr.go\">API Endpoints Wrapper</a></li>\n<li><a href=\"https://github.com/tumblr/tumblrclient.go\">API Client</a></li>\n</ul><h2>Why Two Repos</h2>\n<p>We&rsquo;ve tried to structure the wrapper in a way that is as flexible as possible so we&rsquo;ve put the meat of the library in one repo that contains the code for creating requests and parsing the responses, and interacts with an interface that implements methods for making basic REST requests.</p>\n<p>The second repo is an implementation of that interface with external dependencies used to sign requests using OAuth. If you do not wish to include these dependencies, you may write your own implementation of the ClientInterface and have the wrapper library use that client instead.</p>\n<h2>Handling Dynamic Response Types</h2>\n<p>Go is a strictly typed language including the data structures you marshal JSON responses into. This means that the library could have surfaced response data as a map of <code>string</code> =&gt; <code>interface{}</code> generics which would require the engineer to further cast into an int, string, another map of <code>string</code> =&gt; <code>interface{}</code>, etc. The API Team decided to make it more convenient for you by providing typed response values from various endpoints.</p>\n<p>If you have used the Tumblr API, you&rsquo;ll know that our Post object is highly variant in what properties and types are returned based on the post type. This proved to be a challenge in codifying the response data. In Go, you&rsquo;d hope to simply be able to define a dashboard response as an array of posts</p>\n<pre><code>type Dashboard struct {\n  // ... other properties\n  Posts []Post `json:\"posts\"`\n}\n</code></pre>\n<p>However this would mean we&rsquo;d need a general <code>Post</code> struct type with the union of all possible properties on a Post across all post types. Further complicating this approach, we found that some properties with the same name have different types across post types. The highest profile example: an Audio post&rsquo;s <code>player</code> property is a string of HTML while a Video post&rsquo;s <code>player</code> property is an array of embed strings. Of course we could type any property with such conflicts as <code>interface{}</code> but then we&rsquo;re back to the same problem as before where the engineer then has to cast values to effectively use them.</p>\n<h2>Doing Work So You Don&rsquo;t Have To</h2>\n<p>Instead, we decided any array of posts could in fact be represented as an array of PostInterfaces. When decoding a response, we scan through each post in the response and create a correspondingly typed instance in an array, and return the array of instances as an array of PostInterfaces. Then, when marshalling the JSON into the array, the data fills in to the proper places with the proper types. The end user can then interact with the array of PostInterface instances by accessing universal properties (those that exist on any post type) with ease. If they wish to use a type-specific property, they can cast an instance to a specific post type once, and use all the typed properties afterward.</p>\n<p>This can be especially convenient when paired with Go&rsquo;s HTML templating system:</p>\n<h4>snippet.go</h4>\n<pre><code>// previously, we have some `var response http.ResponseWriter`\nclient := tumblrclient.NewClientWithToken(\n    // ... auth data\n)\n\nif t,err := template.New(\"posts\").ParseFiles(\"post.tmpl\"); err == nil {\n    if dash,err := client.GetDashboard(); err == nil {\n        for _,p := range dash.Posts {\n            t.ExecuteTemplate(response, p.GetSelf().Type, p.GetSelf())\n        }\n    }\n}\n</code></pre>\n<h4>post.tmpl</h4>\n<pre><code>{{define \"text\"}}\n&lt;div&gt;\n    {{.Body | html}}\n&lt;/div&gt;\n{{end}}\n{{define \"photo\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"video\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"audio\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"quote\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"chat\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"answer\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"link\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n</code></pre>\n<p>This is a rudimentary example, but the convenience and utility is fairly evident. You can define blocks to be rendered, named by the post&rsquo;s type value. Those blocks can then assume the object in its named scope is a specific post struct and access the typed values directly.</p>\n<h2>Wrapping Up</h2>\n<p>This is a <code>v1.0</code> release and our goal was to release a limited scope, but flexible utility for developers to use. We plan on implementing plenty of new features and improvements in the future, and to make sure that improvements to the API are brought into the wrapper. Hope you enjoy using it!</p>","reblog":{"comment":"<p>You’ve been asking for an official <a href=\"https://golang.org/\">Golang</a> wrapper for the Tumblr API. The wait is over! We are thrilled to unveil two new repositories on our <a href=\"https://github.com/tumblr\">GitHub page</a> which can be the gateway to the Tumblr API in your Go project.</p>\n<ul><li><a href=\"https://github.com/tumblr/tumblr.go\">API Endpoints Wrapper</a></li>\n<li><a href=\"https://github.com/tumblr/tumblrclient.go\">API Client</a></li>\n</ul><h2>Why Two Repos</h2>\n<p>We’ve tried to structure the wrapper in a way that is as flexible as possible so we’ve put the meat of the library in one repo that contains the code for creating requests and parsing the responses, and interacts with an interface that implements methods for making basic REST requests.</p>\n<p>The second repo is an implementation of that interface with external dependencies used to sign requests using OAuth. If you do not wish to include these dependencies, you may write your own implementation of the ClientInterface and have the wrapper library use that client instead.</p>\n<h2>Handling Dynamic Response Types</h2>\n<p>Go is a strictly typed language including the data structures you marshal JSON responses into. This means that the library could have surfaced response data as a map of <code>string</code> =&gt; <code>interface{}</code> generics which would require the engineer to further cast into an int, string, another map of <code>string</code> =&gt; <code>interface{}</code>, etc. The API Team decided to make it more convenient for you by providing typed response values from various endpoints.</p>\n<p>If you have used the Tumblr API, you’ll know that our Post object is highly variant in what properties and types are returned based on the post type. This proved to be a challenge in codifying the response data. In Go, you’d hope to simply be able to define a dashboard response as an array of posts</p>\n<pre><code>type Dashboard struct {\n  // ... other properties\n  Posts []Post `json:\"posts\"`\n}\n</code></pre>\n<p>However this would mean we’d need a general <code>Post</code> struct type with the union of all possible properties on a Post across all post types. Further complicating this approach, we found that some properties with the same name have different types across post types. The highest profile example: an Audio post’s <code>player</code> property is a string of HTML while a Video post’s <code>player</code> property is an array of embed strings. Of course we could type any property with such conflicts as <code>interface{}</code> but then we’re back to the same problem as before where the engineer then has to cast values to effectively use them.</p>\n<h2>Doing Work So You Don’t Have To</h2>\n<p>Instead, we decided any array of posts could in fact be represented as an array of PostInterfaces. When decoding a response, we scan through each post in the response and create a correspondingly typed instance in an array, and return the array of instances as an array of PostInterfaces. Then, when marshalling the JSON into the array, the data fills in to the proper places with the proper types. The end user can then interact with the array of PostInterface instances by accessing universal properties (those that exist on any post type) with ease. If they wish to use a type-specific property, they can cast an instance to a specific post type once, and use all the typed properties afterward.</p>\n<p>This can be especially convenient when paired with Go’s HTML templating system:</p>\n<h4>snippet.go</h4>\n<pre><code>// previously, we have some `var response http.ResponseWriter`\nclient := tumblrclient.NewClientWithToken(\n    // ... auth data\n)\n\nif t,err := template.New(\"posts\").ParseFiles(\"post.tmpl\"); err == nil {\n    if dash,err := client.GetDashboard(); err == nil {\n        for _,p := range dash.Posts {\n            t.ExecuteTemplate(response, p.GetSelf().Type, p.GetSelf())\n        }\n    }\n}\n</code></pre>\n<h4>post.tmpl</h4>\n<pre><code>{{define \"text\"}}\n&lt;div&gt;\n    {{.Body | html}}\n&lt;/div&gt;\n{{end}}\n{{define \"photo\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"video\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"audio\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"quote\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"chat\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"answer\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"link\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n</code></pre>\n<p>This is a rudimentary example, but the convenience and utility is fairly evident. You can define blocks to be rendered, named by the post’s type value. Those blocks can then assume the object in its named scope is a specific post struct and access the typed values directly.</p>\n<h2>Wrapping Up</h2>\n<p>This is a <code>v1.0</code> release and our goal was to release a limited scope, but flexible utility for developers to use. We plan on implementing plenty of new features and improvements in the future, and to make sure that improvements to the API are brought into the wrapper. Hope you enjoy using it!</p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"154723895033"},"content_raw":"<p>You’ve been asking for an official <a href=\"https://golang.org/\">Golang</a> wrapper for the Tumblr API. The wait is over! We are thrilled to unveil two new repositories on our <a href=\"https://github.com/tumblr\">GitHub page</a> which can be the gateway to the Tumblr API in your Go project.</p>\n<ul><li><a href=\"https://github.com/tumblr/tumblr.go\">API Endpoints Wrapper</a></li>\n<li><a href=\"https://github.com/tumblr/tumblrclient.go\">API Client</a></li>\n</ul><h2>Why Two Repos</h2>\n<p>We’ve tried to structure the wrapper in a way that is as flexible as possible so we’ve put the meat of the library in one repo that contains the code for creating requests and parsing the responses, and interacts with an interface that implements methods for making basic REST requests.</p>\n<p>The second repo is an implementation of that interface with external dependencies used to sign requests using OAuth. If you do not wish to include these dependencies, you may write your own implementation of the ClientInterface and have the wrapper library use that client instead.</p>\n<h2>Handling Dynamic Response Types</h2>\n<p>Go is a strictly typed language including the data structures you marshal JSON responses into. This means that the library could have surfaced response data as a map of <code>string</code> =&gt; <code>interface{}</code> generics which would require the engineer to further cast into an int, string, another map of <code>string</code> =&gt; <code>interface{}</code>, etc. The API Team decided to make it more convenient for you by providing typed response values from various endpoints.</p>\n<p>If you have used the Tumblr API, you’ll know that our Post object is highly variant in what properties and types are returned based on the post type. This proved to be a challenge in codifying the response data. In Go, you’d hope to simply be able to define a dashboard response as an array of posts</p>\n<pre><code>type Dashboard struct {\n  // ... other properties\n  Posts []Post `json:\"posts\"`\n}\n</code></pre>\n<p>However this would mean we’d need a general <code>Post</code> struct type with the union of all possible properties on a Post across all post types. Further complicating this approach, we found that some properties with the same name have different types across post types. The highest profile example: an Audio post’s <code>player</code> property is a string of HTML while a Video post’s <code>player</code> property is an array of embed strings. Of course we could type any property with such conflicts as <code>interface{}</code> but then we’re back to the same problem as before where the engineer then has to cast values to effectively use them.</p>\n<h2>Doing Work So You Don’t Have To</h2>\n<p>Instead, we decided any array of posts could in fact be represented as an array of PostInterfaces. When decoding a response, we scan through each post in the response and create a correspondingly typed instance in an array, and return the array of instances as an array of PostInterfaces. Then, when marshalling the JSON into the array, the data fills in to the proper places with the proper types. The end user can then interact with the array of PostInterface instances by accessing universal properties (those that exist on any post type) with ease. If they wish to use a type-specific property, they can cast an instance to a specific post type once, and use all the typed properties afterward.</p>\n<p>This can be especially convenient when paired with Go’s HTML templating system:</p>\n<h4>snippet.go</h4>\n<pre><code>// previously, we have some `var response http.ResponseWriter`\nclient := tumblrclient.NewClientWithToken(\n    // ... auth data\n)\n\nif t,err := template.New(\"posts\").ParseFiles(\"post.tmpl\"); err == nil {\n    if dash,err := client.GetDashboard(); err == nil {\n        for _,p := range dash.Posts {\n            t.ExecuteTemplate(response, p.GetSelf().Type, p.GetSelf())\n        }\n    }\n}\n</code></pre>\n<h4>post.tmpl</h4>\n<pre><code>{{define \"text\"}}\n&lt;div&gt;\n    {{.Body | html}}\n&lt;/div&gt;\n{{end}}\n{{define \"photo\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"video\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"audio\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"quote\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"chat\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"answer\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"link\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n</code></pre>\n<p>This is a rudimentary example, but the convenience and utility is fairly evident. You can define blocks to be rendered, named by the post’s type value. Those blocks can then assume the object in its named scope is a specific post struct and access the typed values directly.</p>\n<h2>Wrapping Up</h2>\n<p>This is a <code>v1.0</code> release and our goal was to release a limited scope, but flexible utility for developers to use. We plan on implementing plenty of new features and improvements in the future, and to make sure that improvements to the API are brought into the wrapper. Hope you enjoy using it!</p>","content":"<p>You&rsquo;ve been asking for an official <a href=\"https://golang.org/\">Golang</a> wrapper for the Tumblr API. The wait is over! We are thrilled to unveil two new repositories on our <a href=\"https://github.com/tumblr\">GitHub page</a> which can be the gateway to the Tumblr API in your Go project.</p>\n<ul><li><a href=\"https://github.com/tumblr/tumblr.go\">API Endpoints Wrapper</a></li>\n<li><a href=\"https://github.com/tumblr/tumblrclient.go\">API Client</a></li>\n</ul><h2>Why Two Repos</h2>\n<p>We&rsquo;ve tried to structure the wrapper in a way that is as flexible as possible so we&rsquo;ve put the meat of the library in one repo that contains the code for creating requests and parsing the responses, and interacts with an interface that implements methods for making basic REST requests.</p>\n<p>The second repo is an implementation of that interface with external dependencies used to sign requests using OAuth. If you do not wish to include these dependencies, you may write your own implementation of the ClientInterface and have the wrapper library use that client instead.</p>\n<h2>Handling Dynamic Response Types</h2>\n<p>Go is a strictly typed language including the data structures you marshal JSON responses into. This means that the library could have surfaced response data as a map of <code>string</code> =&gt; <code>interface{}</code> generics which would require the engineer to further cast into an int, string, another map of <code>string</code> =&gt; <code>interface{}</code>, etc. The API Team decided to make it more convenient for you by providing typed response values from various endpoints.</p>\n<p>If you have used the Tumblr API, you&rsquo;ll know that our Post object is highly variant in what properties and types are returned based on the post type. This proved to be a challenge in codifying the response data. In Go, you&rsquo;d hope to simply be able to define a dashboard response as an array of posts</p>\n<pre><code>type Dashboard struct {\n  // ... other properties\n  Posts []Post `json:\"posts\"`\n}\n</code></pre>\n<p>However this would mean we&rsquo;d need a general <code>Post</code> struct type with the union of all possible properties on a Post across all post types. Further complicating this approach, we found that some properties with the same name have different types across post types. The highest profile example: an Audio post&rsquo;s <code>player</code> property is a string of HTML while a Video post&rsquo;s <code>player</code> property is an array of embed strings. Of course we could type any property with such conflicts as <code>interface{}</code> but then we&rsquo;re back to the same problem as before where the engineer then has to cast values to effectively use them.</p>\n<h2>Doing Work So You Don&rsquo;t Have To</h2>\n<p>Instead, we decided any array of posts could in fact be represented as an array of PostInterfaces. When decoding a response, we scan through each post in the response and create a correspondingly typed instance in an array, and return the array of instances as an array of PostInterfaces. Then, when marshalling the JSON into the array, the data fills in to the proper places with the proper types. The end user can then interact with the array of PostInterface instances by accessing universal properties (those that exist on any post type) with ease. If they wish to use a type-specific property, they can cast an instance to a specific post type once, and use all the typed properties afterward.</p>\n<p>This can be especially convenient when paired with Go&rsquo;s HTML templating system:</p>\n<h4>snippet.go</h4>\n<pre><code>// previously, we have some `var response http.ResponseWriter`\nclient := tumblrclient.NewClientWithToken(\n    // ... auth data\n)\n\nif t,err := template.New(\"posts\").ParseFiles(\"post.tmpl\"); err == nil {\n    if dash,err := client.GetDashboard(); err == nil {\n        for _,p := range dash.Posts {\n            t.ExecuteTemplate(response, p.GetSelf().Type, p.GetSelf())\n        }\n    }\n}\n</code></pre>\n<h4>post.tmpl</h4>\n<pre><code>{{define \"text\"}}\n&lt;div&gt;\n    {{.Body | html}}\n&lt;/div&gt;\n{{end}}\n{{define \"photo\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"video\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"audio\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"quote\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"chat\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"answer\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n{{define \"link\"}}\n&lt;div&gt;\n    Post: {{.Type}}\n&lt;/div&gt;\n{{end}}\n</code></pre>\n<p>This is a rudimentary example, but the convenience and utility is fairly evident. You can define blocks to be rendered, named by the post&rsquo;s type value. Those blocks can then assume the object in its named scope is a specific post struct and access the typed values directly.</p>\n<h2>Wrapping Up</h2>\n<p>This is a <code>v1.0</code> release and our goal was to release a limited scope, but flexible utility for developers to use. We plan on implementing plenty of new features and improvements in the future, and to make sure that improvements to the API are brought into the wrapper. Hope you enjoy using it!</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":153302947850,"post_url":"https://engineering.tumblr.com/post/153302947850/command-line-tumblr","slug":"command-line-tumblr","date":"2016-11-17 15:00:12 GMT","timestamp":1479394812,"state":"published","format":"html","reblog_key":"6iFi4LVB","tags":["command line"],"short_url":"https://tmblr.co/ZI3nWx2EnaLWA","summary":"Command Line Tumblr","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":272,"title":"Command Line Tumblr","body":"<h2><b>A Totally New Interface for Tumblr?</b></h2><p>Today, Tumblr is accessible via mobile, web or api—but what if you&rsquo;re a linux enthusiast? Nerds like you can now access Tumblr completely via command line.</p><p>“What about images?” you ask. Displaying an image in command line is not something new. There are already a bunch of existing libs doing this, namely <a href=\"http://aa-project.sourceforge.net/aalib/\">aalib</a>, <a href=\"http://caca.zoy.org/wiki/libcaca\">libcaca</a> and super low level <a href=\"https://www.gnu.org/software/ncurses/\">ncurses</a>. And the most interesting project built based on those—<a href=\"https://github.com/mofarrell/p2pvc\">p2p video chat</a>—comes from a hackathon.</p><p>I picked up a much higher level library called <a href=\"https://github.com/chjj/blessed\">blessed</a>, for least efforts to achieve a best looking interface. As you may seen, blessed is javascript-based and very fancy. It provides you with almost every <a href=\"https://github.com/chjj/blessed#widgets\">widget</a> you might need to build an awesome dashboard.</p><figure data-orig-width=\"728\" data-orig-height=\"330\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/b31c2fd3ff72ff2aaffa9ea893008548/tumblr_inline_ogpf0znTkO1qzyw0r_540.gif\" data-orig-width=\"728\" data-orig-height=\"330\"/></figure><p>Most of the work has already been done after figuring out the right library, to show tumblr in command line, we just need to</p><ul><li>Connect the api to fetch image urls.</li><li>Do some front-end design to show a Tumblrish dashboard.</li></ul><p>What? Still need codes?&hellip;</p><pre>var post = blessed.box({\n    parent: dashboard,\n    top: '15%',\n    left: 'center',\n    width: '40%',\n    height: '80%',\n    draggable: true,\n    border: {\n        type: 'line'\n    },\n    style: {\n        fg: 'white',\n        bg: 'white',\n        border: {\n            fg: '#f0f0f0'\n        }\n    },\n});\n\nvar load_post = function() {\n    if (index &lt; 0 || index &gt;= posts.length)\n        return;\n\n    post.free();\n    var post_data = posts[index];\n    /** avator */\n    blessed.ANSIImage({\n        parent: post,\n        top: 0,\n        left: '-30%',\n        width: '20%',\n        height: '20%',\n        file: post_data.avator,\n    });\n\n    /** posts */\n    var count = post_data.count;\n    // TODO: switch all sizes\n    for (var i = 0; i &lt; count; i++) {\n        var offset = 100/count * i;\n        var width = 100/count;\n        blessed.ANSIImage({\n            parent: post,\n            left: offset + '%',\n            width: width + '%',\n            height: '98%',\n            file: post_data.data[i]\n        });\n    }\n\n    screen.render();\n}\n</pre><p>Blessed already provided lots of high level apis. As an example, to display a post as an image, all your input is just an image url, and call<br/></p><pre>blessed.ASNImage({\n    ...\n    file: image_url/local_file\n})\n</pre><p>It supports png and gif, and even, if you&rsquo;d like to show a video, blessed also provides <a href=\"https://github.com/chjj/blessed#video-from-box\">video</a>. Hypothetically speaking, we can use this library to build almost all components in the dashboard of Tumblr today. Note, it&rsquo;s not connecting the real api, but I suppose that would be pretty easy. Also there&rsquo;s a memory optimization issue might need to be addressed if we really want to use this library for something.<br/></p><figure data-orig-width=\"493\" data-orig-height=\"370\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/336329f41cf3ec861bbd898f13c0cce4/tumblr_inline_ogpexlXYmj1qzyw0r_500.gif\" data-orig-width=\"493\" data-orig-height=\"370\"/></figure>","reblog":{"comment":"<p><h2><b>A Totally New Interface for Tumblr?</b></h2><p>Today, Tumblr is accessible via mobile, web or api—but what if you’re a linux enthusiast? Nerds like you can now access Tumblr completely via command line.</p><p>“What about images?” you ask. Displaying an image in command line is not something new. There are already a bunch of existing libs doing this, namely <a href=\"http://aa-project.sourceforge.net/aalib/\">aalib</a>, <a href=\"http://caca.zoy.org/wiki/libcaca\">libcaca</a> and super low level <a href=\"https://www.gnu.org/software/ncurses/\">ncurses</a>. And the most interesting project built based on those—<a href=\"https://github.com/mofarrell/p2pvc\">p2p video chat</a>—comes from a hackathon.</p><p>I picked up a much higher level library called <a href=\"https://github.com/chjj/blessed\">blessed</a>, for least efforts to achieve a best looking interface. As you may seen, blessed is javascript-based and very fancy. It provides you with almost every <a href=\"https://github.com/chjj/blessed#widgets\">widget</a> you might need to build an awesome dashboard.</p><figure data-orig-width=\"728\" data-orig-height=\"330\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/b31c2fd3ff72ff2aaffa9ea893008548/tumblr_inline_ogpf0znTkO1qzyw0r_540.gif\" data-orig-width=\"728\" data-orig-height=\"330\"></figure><p>Most of the work has already been done after figuring out the right library, to show tumblr in command line, we just need to</p><ul><li>Connect the api to fetch image urls.</li><li>Do some front-end design to show a Tumblrish dashboard.</li></ul><p>What? Still need codes?…</p><pre>var post = blessed.box({\n    parent: dashboard,\n    top: '15%',\n    left: 'center',\n    width: '40%',\n    height: '80%',\n    draggable: true,\n    border: {\n        type: 'line'\n    },\n    style: {\n        fg: 'white',\n        bg: 'white',\n        border: {\n            fg: '#f0f0f0'\n        }\n    },\n});\n\nvar load_post = function() {\n    if (index &lt; 0 || index &gt;= posts.length)\n        return;\n\n    post.free();\n    var post_data = posts[index];\n    /** avator */\n    blessed.ANSIImage({\n        parent: post,\n        top: 0,\n        left: '-30%',\n        width: '20%',\n        height: '20%',\n        file: post_data.avator,\n    });\n\n    /** posts */\n    var count = post_data.count;\n    // TODO: switch all sizes\n    for (var i = 0; i &lt; count; i++) {\n        var offset = 100/count * i;\n        var width = 100/count;\n        blessed.ANSIImage({\n            parent: post,\n            left: offset + '%',\n            width: width + '%',\n            height: '98%',\n            file: post_data.data[i]\n        });\n    }\n\n    screen.render();\n}\n</pre><p>Blessed already provided lots of high level apis. As an example, to display a post as an image, all your input is just an image url, and call<br></p><pre>blessed.ASNImage({\n    ...\n    file: image_url/local_file\n})\n</pre><p>It supports png and gif, and even, if you’d like to show a video, blessed also provides <a href=\"https://github.com/chjj/blessed#video-from-box\">video</a>. Hypothetically speaking, we can use this library to build almost all components in the dashboard of Tumblr today. Note, it’s not connecting the real api, but I suppose that would be pretty easy. Also there’s a memory optimization issue might need to be addressed if we really want to use this library for something.<br></p><figure data-orig-width=\"493\" data-orig-height=\"370\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/336329f41cf3ec861bbd898f13c0cce4/tumblr_inline_ogpexlXYmj1qzyw0r_500.gif\" data-orig-width=\"493\" data-orig-height=\"370\"></figure></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"153302947850"},"content_raw":"<p><h2><b>A Totally New Interface for Tumblr?</b></h2><p>Today, Tumblr is accessible via mobile, web or api—but what if you’re a linux enthusiast? Nerds like you can now access Tumblr completely via command line.</p><p>“What about images?” you ask. Displaying an image in command line is not something new. There are already a bunch of existing libs doing this, namely <a href=\"http://aa-project.sourceforge.net/aalib/\">aalib</a>, <a href=\"http://caca.zoy.org/wiki/libcaca\">libcaca</a> and super low level <a href=\"https://www.gnu.org/software/ncurses/\">ncurses</a>. And the most interesting project built based on those—<a href=\"https://github.com/mofarrell/p2pvc\">p2p video chat</a>—comes from a hackathon.</p><p>I picked up a much higher level library called <a href=\"https://github.com/chjj/blessed\">blessed</a>, for least efforts to achieve a best looking interface. As you may seen, blessed is javascript-based and very fancy. It provides you with almost every <a href=\"https://github.com/chjj/blessed#widgets\">widget</a> you might need to build an awesome dashboard.</p><figure data-orig-width=\"728\" data-orig-height=\"330\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/b31c2fd3ff72ff2aaffa9ea893008548/tumblr_inline_ogpf0znTkO1qzyw0r_540.gif\" data-orig-width=\"728\" data-orig-height=\"330\"></figure><p>Most of the work has already been done after figuring out the right library, to show tumblr in command line, we just need to</p><ul><li>Connect the api to fetch image urls.</li><li>Do some front-end design to show a Tumblrish dashboard.</li></ul><p>What? Still need codes?…</p><pre>var post = blessed.box({\n    parent: dashboard,\n    top: '15%',\n    left: 'center',\n    width: '40%',\n    height: '80%',\n    draggable: true,\n    border: {\n        type: 'line'\n    },\n    style: {\n        fg: 'white',\n        bg: 'white',\n        border: {\n            fg: '#f0f0f0'\n        }\n    },\n});\n\nvar load_post = function() {\n    if (index &lt; 0 || index &gt;= posts.length)\n        return;\n\n    post.free();\n    var post_data = posts[index];\n    /** avator */\n    blessed.ANSIImage({\n        parent: post,\n        top: 0,\n        left: '-30%',\n        width: '20%',\n        height: '20%',\n        file: post_data.avator,\n    });\n\n    /** posts */\n    var count = post_data.count;\n    // TODO: switch all sizes\n    for (var i = 0; i &lt; count; i++) {\n        var offset = 100/count * i;\n        var width = 100/count;\n        blessed.ANSIImage({\n            parent: post,\n            left: offset + '%',\n            width: width + '%',\n            height: '98%',\n            file: post_data.data[i]\n        });\n    }\n\n    screen.render();\n}\n</pre><p>Blessed already provided lots of high level apis. As an example, to display a post as an image, all your input is just an image url, and call<br></p><pre>blessed.ASNImage({\n    ...\n    file: image_url/local_file\n})\n</pre><p>It supports png and gif, and even, if you’d like to show a video, blessed also provides <a href=\"https://github.com/chjj/blessed#video-from-box\">video</a>. Hypothetically speaking, we can use this library to build almost all components in the dashboard of Tumblr today. Note, it’s not connecting the real api, but I suppose that would be pretty easy. Also there’s a memory optimization issue might need to be addressed if we really want to use this library for something.<br></p><figure data-orig-width=\"493\" data-orig-height=\"370\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/336329f41cf3ec861bbd898f13c0cce4/tumblr_inline_ogpexlXYmj1qzyw0r_500.gif\" data-orig-width=\"493\" data-orig-height=\"370\"></figure></p>","content":"<p><h2><b>A Totally New Interface for Tumblr?</b></h2><p>Today, Tumblr is accessible via mobile, web or api&mdash;but what if you&rsquo;re a linux enthusiast? Nerds like you can now access Tumblr completely via command line.</p><p>&ldquo;What about images?&rdquo; you ask. Displaying an image in command line is not something new. There are already a bunch of existing libs doing this, namely <a href=\"http://aa-project.sourceforge.net/aalib/\">aalib</a>, <a href=\"http://caca.zoy.org/wiki/libcaca\">libcaca</a> and super low level <a href=\"https://www.gnu.org/software/ncurses/\">ncurses</a>. And the most interesting project built based on those&mdash;<a href=\"https://github.com/mofarrell/p2pvc\">p2p video chat</a>&mdash;comes from a hackathon.</p><p>I picked up a much higher level library called <a href=\"https://github.com/chjj/blessed\">blessed</a>, for least efforts to achieve a best looking interface. As you may seen, blessed is javascript-based and very fancy. It provides you with almost every <a href=\"https://github.com/chjj/blessed#widgets\">widget</a> you might need to build an awesome dashboard.</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/b31c2fd3ff72ff2aaffa9ea893008548/tumblr_inline_ogpf0znTkO1qzyw0r_540.gif\" class=\"\"/></figure><p>Most of the work has already been done after figuring out the right library, to show tumblr in command line, we just need to</p><ul><li>Connect the api to fetch image urls.</li><li>Do some front-end design to show a Tumblrish dashboard.</li></ul><p>What? Still need codes?&hellip;</p><pre>var post = blessed.box({\n    parent: dashboard,\n    top: '15%',\n    left: 'center',\n    width: '40%',\n    height: '80%',\n    draggable: true,\n    border: {\n        type: 'line'\n    },\n    style: {\n        fg: 'white',\n        bg: 'white',\n        border: {\n            fg: '#f0f0f0'\n        }\n    },\n});\n\nvar load_post = function() {\n    if (index &lt; 0 || index &gt;= posts.length)\n        return;\n\n    post.free();\n    var post_data = posts[index];\n    /** avator */\n    blessed.ANSIImage({\n        parent: post,\n        top: 0,\n        left: '-30%',\n        width: '20%',\n        height: '20%',\n        file: post_data.avator,\n    });\n\n    /** posts */\n    var count = post_data.count;\n    // TODO: switch all sizes\n    for (var i = 0; i &lt; count; i++) {\n        var offset = 100/count * i;\n        var width = 100/count;\n        blessed.ANSIImage({\n            parent: post,\n            left: offset + '%',\n            width: width + '%',\n            height: '98%',\n            file: post_data.data[i]\n        });\n    }\n\n    screen.render();\n}\n</pre><p>Blessed already provided lots of high level apis. As an example, to display a post as an image, all your input is just an image url, and call<br /></p><pre>blessed.ASNImage({\n    ...\n    file: image_url/local_file\n})\n</pre><p>It supports png and gif, and even, if you&rsquo;d like to show a video, blessed also provides <a href=\"https://github.com/chjj/blessed#video-from-box\">video</a>. Hypothetically speaking, we can use this library to build almost all components in the dashboard of Tumblr today. Note, it&rsquo;s not connecting the real api, but I suppose that would be pretty easy. Also there&rsquo;s a memory optimization issue might need to be addressed if we really want to use this library for something.<br /></p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/336329f41cf3ec861bbd898f13c0cce4/tumblr_inline_ogpexlXYmj1qzyw0r_500.gif\" class=\"\"/></figure></p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":152998126990,"post_url":"https://engineering.tumblr.com/post/152998126990/php-7-at-tumblr","slug":"php-7-at-tumblr","date":"2016-11-10 16:00:10 GMT","timestamp":1478793610,"state":"published","format":"html","reblog_key":"GMg4LLO5","tags":["tumblr engineering","php","php7"],"short_url":"https://tmblr.co/ZI3nWx2EVPYME","summary":"PHP 7 at Tumblr","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":496,"title":"PHP 7 at Tumblr","body":"<p>At Tumblr, we&rsquo;re always looking for new ways to improve the performance of the site. This means things like adding caching to heavily used codepaths, testing out new CDN configurations, or upgrading underlying software.<br/></p><p>Recently, in a cross-team effort, we upgraded our full web server fleet from PHP 5 to PHP 7. The whole upgrade was a fun project with some very cool results, so we wanted to share it with you.</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#timeline\"></a>Timeline</h2><p>It all started as a hackday project in the fall of 2015. <a href=\"https://tmblr.co/mBWgO3jg4lxBdIkQDX2pSSg\">@oli</a> and <a href=\"https://tmblr.co/m2kWeuYiN6mUDTT9_3vCoFg\">@trav</a> got Tumblr running on one of the PHP 7 release candidates. At this point in time, quite a few PHP extensions did not have support for version 7 yet, but there were unofficial forks floating around with (very) experimental support. Nevertheless, it actually ran!</p><p>This spring, things were starting to get more stable and we decided it was time to start looking in to upgrading more closely. One of the first things we did was package the new version up so that installation would be easy and consistent. In parallel, we ported our in-house PHP extensions to the new version so everything would be ready and available from the get-go.</p><p>A small script was written that would upgrade (or downgrade) a developer&rsquo;s server. Then, during the late spring and the summer, tests were run (more on this below), PHP package builds iterated on and performance measured and evaluated. As things stabilized we started roping in more developers to do their day-to-day work on PHP 7-enabled machines.</p><p>Finally, in the end of August we felt confident in our testing and rolled PHP 7 out to a small percentage of our production servers. Two weeks later, after incrementally ramping up, every server responding to user requests was updated!</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#testing\"></a>Testing</h2><p>When doing upgrades like this it&rsquo;s of course very important to test everything to make sure that the code behaves in the same way, and we had a couple of approaches to this.</p><p><a href=\"https://github.com/etsy/phan\">Phan</a>. In this project, we used it to find code in our codebase that would be incompatible with PHP 7. It made it very easy to find the low-hanging fruit and fix those issues.</p><p>We also have a suite of unit and integration tests that helped a lot in identifying what wasn&rsquo;t working the way it used to. And since normal development continued alongside this project, we needed to make sure no new code was added that wasn&rsquo;t PHP 7-proof, so we set up our CI tasks to run all tests on both PHP 5 and PHP 7.</p><h2><b>Results</b></h2><p>So at the end of this rollout, what were the final results? Well, two things stand out as big improvements for us; performance and language features.</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#performance\"></a>Performance</h2><p>When we rolled PHP 7 out to the first batch of servers we obviously kept a very close eye at the various graphs we have to make sure things are running smoothly. As we mentioned above, we were looking for performance improvements, but the real-world result was striking. Almost immediately saw the latency drop by half, and the CPU load on the servers decrease at least 50%, often more. Not only were our servers serving pages twice as fast, they were doing it using half the amount of CPU resources.</p><figure data-orig-width=\"780\" data-orig-height=\"736\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/f22a1f1583d60d8ffca7d6682a0b2132/tumblr_inline_og2suygoIo1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"780\" data-orig-height=\"736\"/></figure><figure data-orig-width=\"756\" data-orig-height=\"741\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/92f12c9adf869b7ce109701d7b8d8327/tumblr_inline_og2sv6UnmF1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"756\" data-orig-height=\"741\"/></figure><p>These are graphs from one of the servers that handle our API. As you can see, the latency dropped to less than half, and the load average at peak is now lower than it&rsquo;s previous lowest point!</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#language-features\"></a>Language features</h2><p>PHP 7 also brings a lot of fun new features that can make the life of the developers at Tumblr a bit easier. Some highlights are:</p><ul><li>Scalar type hints: PHP has historically been fairly poor for type safety, PHP 7 introduces scalar type hints which ensures values passed around conform to specific types (string, bool, int, float, etc).</li><li>Return type declarations: Now, with PHP 7, functions can have explicit return types that the language will enforce. This reduces the need for some boilerplate code and manually checking the return values from functions.</li><li>Anonymous classes: Much like anonymous functions (closures), anonymous classes are constructed at runtime and can simulate a class, conforming to interfaces and even extending other classes. These are great for utility objects like logging classes and useful in unit tests.</li><li>Various security &amp; performance enhancements across the board.</li></ul><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#summary\"></a>Summary</h2><p>PHP 7 is pretty rad!</p>","reblog":{"comment":"<p>At Tumblr, we’re always looking for new ways to improve the performance of the site. This means things like adding caching to heavily used codepaths, testing out new CDN configurations, or upgrading underlying software.<br></p><p>Recently, in a cross-team effort, we upgraded our full web server fleet from PHP 5 to PHP 7. The whole upgrade was a fun project with some very cool results, so we wanted to share it with you.</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#timeline\"></a>Timeline</h2><p>It all started as a hackday project in the fall of 2015. <a href=\"https://tmblr.co/mBWgO3jg4lxBdIkQDX2pSSg\">@oli</a> and <a href=\"https://tmblr.co/m2kWeuYiN6mUDTT9_3vCoFg\">@trav</a> got Tumblr running on one of the PHP 7 release candidates. At this point in time, quite a few PHP extensions did not have support for version 7 yet, but there were unofficial forks floating around with (very) experimental support. Nevertheless, it actually ran!</p><p>This spring, things were starting to get more stable and we decided it was time to start looking in to upgrading more closely. One of the first things we did was package the new version up so that installation would be easy and consistent. In parallel, we ported our in-house PHP extensions to the new version so everything would be ready and available from the get-go.</p><p>A small script was written that would upgrade (or downgrade) a developer’s server. Then, during the late spring and the summer, tests were run (more on this below), PHP package builds iterated on and performance measured and evaluated. As things stabilized we started roping in more developers to do their day-to-day work on PHP 7-enabled machines.</p><p>Finally, in the end of August we felt confident in our testing and rolled PHP 7 out to a small percentage of our production servers. Two weeks later, after incrementally ramping up, every server responding to user requests was updated!</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#testing\"></a>Testing</h2><p>When doing upgrades like this it’s of course very important to test everything to make sure that the code behaves in the same way, and we had a couple of approaches to this.</p><p><a href=\"https://github.com/etsy/phan\">Phan</a>. In this project, we used it to find code in our codebase that would be incompatible with PHP 7. It made it very easy to find the low-hanging fruit and fix those issues.</p><p>We also have a suite of unit and integration tests that helped a lot in identifying what wasn’t working the way it used to. And since normal development continued alongside this project, we needed to make sure no new code was added that wasn’t PHP 7-proof, so we set up our CI tasks to run all tests on both PHP 5 and PHP 7.</p><h2><b>Results</b></h2><p>So at the end of this rollout, what were the final results? Well, two things stand out as big improvements for us; performance and language features.</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#performance\"></a>Performance</h2><p>When we rolled PHP 7 out to the first batch of servers we obviously kept a very close eye at the various graphs we have to make sure things are running smoothly. As we mentioned above, we were looking for performance improvements, but the real-world result was striking. Almost immediately saw the latency drop by half, and the CPU load on the servers decrease at least 50%, often more. Not only were our servers serving pages twice as fast, they were doing it using half the amount of CPU resources.</p><figure data-orig-width=\"780\" data-orig-height=\"736\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/f22a1f1583d60d8ffca7d6682a0b2132/tumblr_inline_og2suygoIo1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"780\" data-orig-height=\"736\"></figure><figure data-orig-width=\"756\" data-orig-height=\"741\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/92f12c9adf869b7ce109701d7b8d8327/tumblr_inline_og2sv6UnmF1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"756\" data-orig-height=\"741\"></figure><p>These are graphs from one of the servers that handle our API. As you can see, the latency dropped to less than half, and the load average at peak is now lower than it’s previous lowest point!</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#language-features\"></a>Language features</h2><p>PHP 7 also brings a lot of fun new features that can make the life of the developers at Tumblr a bit easier. Some highlights are:</p><ul><li>Scalar type hints: PHP has historically been fairly poor for type safety, PHP 7 introduces scalar type hints which ensures values passed around conform to specific types (string, bool, int, float, etc).</li><li>Return type declarations: Now, with PHP 7, functions can have explicit return types that the language will enforce. This reduces the need for some boilerplate code and manually checking the return values from functions.</li><li>Anonymous classes: Much like anonymous functions (closures), anonymous classes are constructed at runtime and can simulate a class, conforming to interfaces and even extending other classes. These are great for utility objects like logging classes and useful in unit tests.</li><li>Various security &amp; performance enhancements across the board.</li></ul><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#summary\"></a>Summary</h2><p>PHP 7 is pretty rad!</p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"152998126990"},"content_raw":"<p>At Tumblr, we’re always looking for new ways to improve the performance of the site. This means things like adding caching to heavily used codepaths, testing out new CDN configurations, or upgrading underlying software.<br></p><p>Recently, in a cross-team effort, we upgraded our full web server fleet from PHP 5 to PHP 7. The whole upgrade was a fun project with some very cool results, so we wanted to share it with you.</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#timeline\"></a>Timeline</h2><p>It all started as a hackday project in the fall of 2015. <a href=\"https://tmblr.co/mBWgO3jg4lxBdIkQDX2pSSg\">@oli</a> and <a href=\"https://tmblr.co/m2kWeuYiN6mUDTT9_3vCoFg\">@trav</a> got Tumblr running on one of the PHP 7 release candidates. At this point in time, quite a few PHP extensions did not have support for version 7 yet, but there were unofficial forks floating around with (very) experimental support. Nevertheless, it actually ran!</p><p>This spring, things were starting to get more stable and we decided it was time to start looking in to upgrading more closely. One of the first things we did was package the new version up so that installation would be easy and consistent. In parallel, we ported our in-house PHP extensions to the new version so everything would be ready and available from the get-go.</p><p>A small script was written that would upgrade (or downgrade) a developer’s server. Then, during the late spring and the summer, tests were run (more on this below), PHP package builds iterated on and performance measured and evaluated. As things stabilized we started roping in more developers to do their day-to-day work on PHP 7-enabled machines.</p><p>Finally, in the end of August we felt confident in our testing and rolled PHP 7 out to a small percentage of our production servers. Two weeks later, after incrementally ramping up, every server responding to user requests was updated!</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#testing\"></a>Testing</h2><p>When doing upgrades like this it’s of course very important to test everything to make sure that the code behaves in the same way, and we had a couple of approaches to this.</p><p><a href=\"https://github.com/etsy/phan\">Phan</a>. In this project, we used it to find code in our codebase that would be incompatible with PHP 7. It made it very easy to find the low-hanging fruit and fix those issues.</p><p>We also have a suite of unit and integration tests that helped a lot in identifying what wasn’t working the way it used to. And since normal development continued alongside this project, we needed to make sure no new code was added that wasn’t PHP 7-proof, so we set up our CI tasks to run all tests on both PHP 5 and PHP 7.</p><h2><b>Results</b></h2><p>So at the end of this rollout, what were the final results? Well, two things stand out as big improvements for us; performance and language features.</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#performance\"></a>Performance</h2><p>When we rolled PHP 7 out to the first batch of servers we obviously kept a very close eye at the various graphs we have to make sure things are running smoothly. As we mentioned above, we were looking for performance improvements, but the real-world result was striking. Almost immediately saw the latency drop by half, and the CPU load on the servers decrease at least 50%, often more. Not only were our servers serving pages twice as fast, they were doing it using half the amount of CPU resources.</p><figure data-orig-width=\"780\" data-orig-height=\"736\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/f22a1f1583d60d8ffca7d6682a0b2132/tumblr_inline_og2suygoIo1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"780\" data-orig-height=\"736\"></figure><figure data-orig-width=\"756\" data-orig-height=\"741\" class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/92f12c9adf869b7ce109701d7b8d8327/tumblr_inline_og2sv6UnmF1qzyw0r_540.png\" alt=\"image\" data-orig-width=\"756\" data-orig-height=\"741\"></figure><p>These are graphs from one of the servers that handle our API. As you can see, the latency dropped to less than half, and the load average at peak is now lower than it’s previous lowest point!</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#language-features\"></a>Language features</h2><p>PHP 7 also brings a lot of fun new features that can make the life of the developers at Tumblr a bit easier. Some highlights are:</p><ul><li>Scalar type hints: PHP has historically been fairly poor for type safety, PHP 7 introduces scalar type hints which ensures values passed around conform to specific types (string, bool, int, float, etc).</li><li>Return type declarations: Now, with PHP 7, functions can have explicit return types that the language will enforce. This reduces the need for some boilerplate code and manually checking the return values from functions.</li><li>Anonymous classes: Much like anonymous functions (closures), anonymous classes are constructed at runtime and can simulate a class, conforming to interfaces and even extending other classes. These are great for utility objects like logging classes and useful in unit tests.</li><li>Various security &amp; performance enhancements across the board.</li></ul><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#summary\"></a>Summary</h2><p>PHP 7 is pretty rad!</p>","content":"<p>At Tumblr, we&rsquo;re always looking for new ways to improve the performance of the site. This means things like adding caching to heavily used codepaths, testing out new CDN configurations, or upgrading underlying software.<br /></p><p>Recently, in a cross-team effort, we upgraded our full web server fleet from PHP 5 to PHP 7. The whole upgrade was a fun project with some very cool results, so we wanted to share it with you.</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#timeline\"></a>Timeline</h2><p>It all started as a hackday project in the fall of 2015. <a href=\"https://tmblr.co/mBWgO3jg4lxBdIkQDX2pSSg\">@oli</a> and <a href=\"https://tmblr.co/m2kWeuYiN6mUDTT9_3vCoFg\">@trav</a> got Tumblr running on one of the PHP 7 release candidates. At this point in time, quite a few PHP extensions did not have support for version 7 yet, but there were unofficial forks floating around with (very) experimental support. Nevertheless, it actually ran!</p><p>This spring, things were starting to get more stable and we decided it was time to start looking in to upgrading more closely. One of the first things we did was package the new version up so that installation would be easy and consistent. In parallel, we ported our in-house PHP extensions to the new version so everything would be ready and available from the get-go.</p><p>A small script was written that would upgrade (or downgrade) a developer&rsquo;s server. Then, during the late spring and the summer, tests were run (more on this below), PHP package builds iterated on and performance measured and evaluated. As things stabilized we started roping in more developers to do their day-to-day work on PHP 7-enabled machines.</p><p>Finally, in the end of August we felt confident in our testing and rolled PHP 7 out to a small percentage of our production servers. Two weeks later, after incrementally ramping up, every server responding to user requests was updated!</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#testing\"></a>Testing</h2><p>When doing upgrades like this it&rsquo;s of course very important to test everything to make sure that the code behaves in the same way, and we had a couple of approaches to this.</p><p><a href=\"https://github.com/etsy/phan\">Phan</a>. In this project, we used it to find code in our codebase that would be incompatible with PHP 7. It made it very easy to find the low-hanging fruit and fix those issues.</p><p>We also have a suite of unit and integration tests that helped a lot in identifying what wasn&rsquo;t working the way it used to. And since normal development continued alongside this project, we needed to make sure no new code was added that wasn&rsquo;t PHP 7-proof, so we set up our CI tasks to run all tests on both PHP 5 and PHP 7.</p><h2><b>Results</b></h2><p>So at the end of this rollout, what were the final results? Well, two things stand out as big improvements for us; performance and language features.</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#performance\"></a>Performance</h2><p>When we rolled PHP 7 out to the first batch of servers we obviously kept a very close eye at the various graphs we have to make sure things are running smoothly. As we mentioned above, we were looking for performance improvements, but the real-world result was striking. Almost immediately saw the latency drop by half, and the CPU load on the servers decrease at least 50%, often more. Not only were our servers serving pages twice as fast, they were doing it using half the amount of CPU resources.</p><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/f22a1f1583d60d8ffca7d6682a0b2132/tumblr_inline_og2suygoIo1qzyw0r_540.png\" class=\"\"/></figure><figure class=\"tmblr-full\"><img src=\"https://78.media.tumblr.com/92f12c9adf869b7ce109701d7b8d8327/tumblr_inline_og2sv6UnmF1qzyw0r_540.png\" class=\"\"/></figure><p>These are graphs from one of the servers that handle our API. As you can see, the latency dropped to less than half, and the load average at peak is now lower than it&rsquo;s previous lowest point!</p><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#language-features\"></a>Language features</h2><p>PHP 7 also brings a lot of fun new features that can make the life of the developers at Tumblr a bit easier. Some highlights are:</p><ul><li>Scalar type hints: PHP has historically been fairly poor for type safety, PHP 7 introduces scalar type hints which ensures values passed around conform to specific types (string, bool, int, float, etc).</li><li>Return type declarations: Now, with PHP 7, functions can have explicit return types that the language will enforce. This reduces the need for some boilerplate code and manually checking the return values from functions.</li><li>Anonymous classes: Much like anonymous functions (closures), anonymous classes are constructed at runtime and can simulate a class, conforming to interfaces and even extending other classes. These are great for utility objects like logging classes and useful in unit tests.</li><li>Various security &amp; performance enhancements across the board.</li></ul><h2><a href=\"https://github.tumblr.net/Tumblr/engineering-blog-articles/blob/d691d6e38b600ed8680893b1fa5afa3ef7a4e104/articles/73%20-%20PHP%207.md#summary\"></a>Summary</h2><p>PHP 7 is pretty rad!</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"link","blog_name":"engineering","id":152294842005,"post_url":"https://engineering.tumblr.com/post/152294842005/the-art-of-open-sourcing","slug":"the-art-of-open-sourcing","date":"2016-10-25 15:00:29 GMT","timestamp":1477407629,"state":"published","format":"html","reblog_key":"j8lrXUne","tags":["android","open source","permissme"],"short_url":"https://tmblr.co/ZI3nWx2DrUjwL","summary":"The Art of Open-Sourcing","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":31,"title":"The Art of Open-Sourcing","url":"https://medium.com/@sumbulalvi/the-art-of-open-sourcing-c9b87e5905ee#.lmv7f95dv","link_author":"Sumbul Alvi","excerpt":"Open-sourcing is a great way to collaboratively build and improve software for everyone to use. There is an art to creating good open…","publisher":"medium.com","description":"<p><a href=\"http://effectiveandroid.tumblr.com/post/152040183147/the-art-of-open-sourcing\" class=\"tumblr_blog\">effectiveandroid</a>:</p><blockquote><p>An article by <a class=\"tumblelog\" href=\"https://tmblr.co/m9JTVScK3BxNX0sA7oUKiYQ\">@vanillaburritos</a> as a reflection of her experience open-sourcing <a href=\"https://github.com/tumblr/PermissMe\">PermissMe</a> at Tumblr. Give it a read!</p></blockquote>","reblog":{"comment":"","tree_html":"<p><a href=\"http://effectiveandroid.tumblr.com/post/152040183147/the-art-of-open-sourcing\" class=\"tumblr_blog\">effectiveandroid</a>:</p>\n<blockquote><p>An article by <a class=\"tumblelog\" href=\"https://tmblr.co/m9JTVScK3BxNX0sA7oUKiYQ\">@vanillaburritos</a> as a reflection of her experience open-sourcing <a href=\"https://github.com/tumblr/PermissMe\">PermissMe</a> at Tumblr. Give it a read!</p></blockquote>"},"trail":[{"blog":{"name":"effectiveandroid","active":true,"theme":{"avatar_shape":"circle","background_color":"#e6f7ff","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/b11af6189ce1bb2697f200a3dc0f1c2a/p66q8cz/6scn672tn/tumblr_static_bni40glgjzwcokkcggc8cs0wc.png","header_image_focused":"https://static.tumblr.com/b11af6189ce1bb2697f200a3dc0f1c2a/p66q8cz/6scn672tn/tumblr_static_bni40glgjzwcokkcggc8cs0wc_2048_v2.png","header_image_scaled":"https://static.tumblr.com/b11af6189ce1bb2697f200a3dc0f1c2a/p66q8cz/6scn672tn/tumblr_static_bni40glgjzwcokkcggc8cs0wc_2048_v2.png","header_stretch":false,"link_color":"#57879e","show_avatar":true,"show_description":true,"show_header_image":false,"show_title":true,"title_color":"#57879e","title_font":"Quadrat","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"152040183147"},"content_raw":"<p>An article by <a class=\"tumblelog\" href=\"https://tmblr.co/m9JTVScK3BxNX0sA7oUKiYQ\">@vanillaburritos</a> as a reflection of her experience open-sourcing <a href=\"https://github.com/tumblr/PermissMe\">PermissMe</a> at Tumblr. Give it a read!</p>","content":"<p>An article by <a href=\"https://tmblr.co/m9JTVScK3BxNX0sA7oUKiYQ\">@vanillaburritos</a> as a reflection of her experience open-sourcing <a href=\"https://github.com/tumblr/PermissMe\">PermissMe</a>&nbsp;at Tumblr.&nbsp;Give it a read!</p>","is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"text","blog_name":"engineering","id":151350779044,"post_url":"https://engineering.tumblr.com/post/151350779044/juggling-databases-between-datacenters","slug":"juggling-databases-between-datacenters","date":"2016-10-04 21:03:50 GMT","timestamp":1475615030,"state":"published","format":"html","reblog_key":"97WV0rYt","tags":["databases","mysql","proxysql","jetpants","datacenters"],"short_url":"https://tmblr.co/ZI3nWx2CzDPoa","summary":"Juggling Databases Between Datacenters","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":39,"title":"Juggling Databases Between Datacenters","body":"<p>    Recently we went through an exercise where we moved all of our database masters between data centers.  We planned on doing this online with minimal user impact.  Obviously when performing this sort of action there are a variety of considerations such as cache consistency and other pieces of shared state in stores like HBase, but the focus of this post will be primarily on MySQL.</p><p>    During this move we had a number of constraints.  As mentioned above this was to be online when serving production traffic with minimal user impact.  In aggregate we service hundreds of thousands of database queries per second.  Additionally we needed to encrypt all data transferring between data centers.  MySQL replication supports encryption, but connections to the servers themselves present several challenges.  Specifically, from a performance standpoint the handshake to establish a connection across a WAN can impact latency if there is significant connection churn.  Additionally, servicing read queries across a backhaul link adds latency, which is never desirable.</p><p>    We decided to tackle these issues in several ways. We were able to leverage a number of existing features of our applications and infrastructure, as well as developing new automation to fill gaps in functionality.  Our configuration and applications in various runtimes, were able to support a read/write split (which may seem obvious to some, but isn’t always easy to accomplish in every scenario).  We used the read/write split, along with encrypted replication, to provide a local read replica.  Some runtimes can set up a persistent encrypted connection to a remote master, which serviced read requests in those cases, as the per-connection latency was amortized over a large number of queries.  For runtimes which have a high churn rate, such as PHP, we used a MySQL proxy, <a href=\"http://www.proxysql.com/\">ProxySQL</a>, which provided persistent, encrypted connections, as well as meeting our performance requirements.  We built automation to deploy proxies for numerous database pools, servicing thousands of requests per second, per pool.</p><p>    When performing the cutover, our workflow was as follows.  In each data center, there was a config which pointed to a local read slave, a remote master, and a local proxy with the master (remote or local) as a backend.  When moving masters between datacenters, our database automation, <a href=\"https://github.com/tumblr/jetpants\">Jetpants</a> (new release coming soon!), reparented all replicas, and our automation updated the proxy backend to point to the new master.  This resulted in seconds of read-only state per database pool and minimal user impact.</p><p>More coming soon!</p>","reblog":{"comment":"<p>    Recently we went through an exercise where we moved all of our database masters between data centers.  We planned on doing this online with minimal user impact.  Obviously when performing this sort of action there are a variety of considerations such as cache consistency and other pieces of shared state in stores like HBase, but the focus of this post will be primarily on MySQL.</p><p>    During this move we had a number of constraints.  As mentioned above this was to be online when serving production traffic with minimal user impact.  In aggregate we service hundreds of thousands of database queries per second.  Additionally we needed to encrypt all data transferring between data centers.  MySQL replication supports encryption, but connections to the servers themselves present several challenges.  Specifically, from a performance standpoint the handshake to establish a connection across a WAN can impact latency if there is significant connection churn.  Additionally, servicing read queries across a backhaul link adds latency, which is never desirable.</p><p>    We decided to tackle these issues in several ways. We were able to leverage a number of existing features of our applications and infrastructure, as well as developing new automation to fill gaps in functionality.  Our configuration and applications in various runtimes, were able to support a read/write split (which may seem obvious to some, but isn’t always easy to accomplish in every scenario).  We used the read/write split, along with encrypted replication, to provide a local read replica.  Some runtimes can set up a persistent encrypted connection to a remote master, which serviced read requests in those cases, as the per-connection latency was amortized over a large number of queries.  For runtimes which have a high churn rate, such as PHP, we used a MySQL proxy, <a href=\"http://www.proxysql.com/\">ProxySQL</a>, which provided persistent, encrypted connections, as well as meeting our performance requirements.  We built automation to deploy proxies for numerous database pools, servicing thousands of requests per second, per pool.</p><p>    When performing the cutover, our workflow was as follows.  In each data center, there was a config which pointed to a local read slave, a remote master, and a local proxy with the master (remote or local) as a backend.  When moving masters between datacenters, our database automation, <a href=\"https://github.com/tumblr/jetpants\">Jetpants</a> (new release coming soon!), reparented all replicas, and our automation updated the proxy backend to point to the new master.  This resulted in seconds of read-only state per database pool and minimal user impact.</p><p>More coming soon!</p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"151350779044"},"content_raw":"<p>    Recently we went through an exercise where we moved all of our database masters between data centers.  We planned on doing this online with minimal user impact.  Obviously when performing this sort of action there are a variety of considerations such as cache consistency and other pieces of shared state in stores like HBase, but the focus of this post will be primarily on MySQL.</p><p>    During this move we had a number of constraints.  As mentioned above this was to be online when serving production traffic with minimal user impact.  In aggregate we service hundreds of thousands of database queries per second.  Additionally we needed to encrypt all data transferring between data centers.  MySQL replication supports encryption, but connections to the servers themselves present several challenges.  Specifically, from a performance standpoint the handshake to establish a connection across a WAN can impact latency if there is significant connection churn.  Additionally, servicing read queries across a backhaul link adds latency, which is never desirable.</p><p>    We decided to tackle these issues in several ways. We were able to leverage a number of existing features of our applications and infrastructure, as well as developing new automation to fill gaps in functionality.  Our configuration and applications in various runtimes, were able to support a read/write split (which may seem obvious to some, but isn’t always easy to accomplish in every scenario).  We used the read/write split, along with encrypted replication, to provide a local read replica.  Some runtimes can set up a persistent encrypted connection to a remote master, which serviced read requests in those cases, as the per-connection latency was amortized over a large number of queries.  For runtimes which have a high churn rate, such as PHP, we used a MySQL proxy, <a href=\"http://www.proxysql.com/\">ProxySQL</a>, which provided persistent, encrypted connections, as well as meeting our performance requirements.  We built automation to deploy proxies for numerous database pools, servicing thousands of requests per second, per pool.</p><p>    When performing the cutover, our workflow was as follows.  In each data center, there was a config which pointed to a local read slave, a remote master, and a local proxy with the master (remote or local) as a backend.  When moving masters between datacenters, our database automation, <a href=\"https://github.com/tumblr/jetpants\">Jetpants</a> (new release coming soon!), reparented all replicas, and our automation updated the proxy backend to point to the new master.  This resulted in seconds of read-only state per database pool and minimal user impact.</p><p>More coming soon!</p>","content":"<p>&nbsp;&nbsp;&nbsp; Recently we went through an exercise where we moved all of our database masters between data centers.  We planned on doing this online with minimal user impact.  Obviously when performing this sort of action there are a variety of considerations such as cache consistency and other pieces of shared state in stores like HBase, but the focus of this post will be primarily on MySQL.</p><p>&nbsp;&nbsp;&nbsp; During this move we had a number of constraints.  As mentioned above this was to be online when serving production traffic with minimal user impact.  In aggregate we service hundreds of thousands of database queries per second.  Additionally we needed to encrypt all data transferring between data centers.  MySQL replication supports encryption, but connections to the servers themselves present several challenges.  Specifically, from a performance standpoint the handshake to establish a connection across a WAN can impact latency if there is significant connection churn.  Additionally, servicing read queries across a backhaul link adds latency, which is never desirable.</p><p>&nbsp;&nbsp;&nbsp; We decided to tackle these issues in several ways. We were able to leverage a number of existing features of our applications and infrastructure, as well as developing new automation to fill gaps in functionality.  Our configuration and applications in various runtimes, were able to support a read/write split (which may seem obvious to some, but isn&rsquo;t always easy to accomplish in every scenario).  We used the read/write split, along with encrypted replication, to provide a local read replica.  Some runtimes can set up a persistent encrypted connection to a remote master, which serviced read requests in those cases, as the per-connection latency was amortized over a large number of queries.  For runtimes which have a high churn rate, such as PHP, we used a MySQL proxy, <a href=\"http://www.proxysql.com/\">ProxySQL</a>, which provided persistent, encrypted connections, as well as meeting our performance requirements.  We built automation to deploy proxies for numerous database pools, servicing thousands of requests per second, per pool.</p><p>&nbsp;&nbsp;&nbsp; When performing the cutover, our workflow was as follows.  In each data center, there was a config which pointed to a local read slave, a remote master, and a local proxy with the master (remote or local) as a backend.  When moving masters between datacenters, our database automation, <a href=\"https://github.com/tumblr/jetpants\">Jetpants</a> (new release coming soon!), reparented all replicas, and our automation updated the proxy backend to point to the new master.  This resulted in seconds of read-only state per database pool and minimal user impact.</p><p>More coming soon!</p>","is_current_item":true,"is_root_item":true}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true},{"type":"photo","blog_name":"engineering","id":151346894949,"post_url":"https://engineering.tumblr.com/post/151346894949/alpha-or-beta-the-choice-is-yours-android-users","slug":"alpha-or-beta-the-choice-is-yours-android-users","date":"2016-10-04 19:27:17 GMT","timestamp":1475609237,"state":"published","format":"html","reblog_key":"IXD0Q8sM","tags":["android"],"short_url":"https://tmblr.co/ZI3nWx2Cy_bXb","summary":"Alpha or Beta? The Choice is Yours, Android Users. Earlier this year, we asked our Android users to join an exciting new open...","is_blocks_post_format":false,"recommended_source":null,"recommended_color":null,"note_count":1594,"caption":"<h2>Alpha or Beta? The Choice is Yours, Android Users.</h2><p>Earlier this year, we <a href=\"http://hellofromtumblr.com/post/144514620027/join-the-great-tumblr-android-bug-hunt-beta-help\">asked our Android users</a> to join an exciting new open beta program to help us squash bugs. We’ve since developed something stronger. Something that opens your mind in ways you’ve never thought possible. A way to opt into the mystery, the wonder, the beauty that is the latest Tumblr app: alpha.</p><p><b>What’s different?</b> While the open beta app is updated twice a month, the closed alpha app updates with the latest build every night. It will also set your mind free. Both are great things to help you find bugs, which help us make Tumblr even better. </p><p><b>Who can join?</b> A very limited number of Android users will be accepted for membership on a first-come, first-serve basis. Testers should use Tumblr daily and be diligent in alerting us when they find a bug. That’s what this whole thing is for, after all.</p><p><b>How does that work?</b> When you see a bug, shake your phone with gleeful rage. Rage-shaking opens an email. Describe the bug and hit send.</p><p><b>What else?</b> Well, heck. That’s what the <a href=\"https://www.tumblr.com/docs/en/android_open_beta#alpha\">FAQ</a> is for.</p><p>Now that we have that settled, go on and <a href=\"https://groups.google.com/forum/#!forum/tumblr-android-alpha\">apply for membership</a>.</p>","reblog":{"comment":"<p><h2>Alpha or Beta? The Choice is Yours, Android Users.</h2><p>Earlier this year, we <a href=\"http://hellofromtumblr.com/post/144514620027/join-the-great-tumblr-android-bug-hunt-beta-help\">asked our Android users</a> to join an exciting new open beta program to help us squash bugs. We’ve since developed something stronger. Something that opens your mind in ways you’ve never thought possible. A way to opt into the mystery, the wonder, the beauty that is the latest Tumblr app: alpha.</p><p><b>What’s different?</b> While the open beta app is updated twice a month, the closed alpha app updates with the latest build every night. It will also set your mind free. Both are great things to help you find bugs, which help us make Tumblr even better. </p><p><b>Who can join?</b> A very limited number of Android users will be accepted for membership on a first-come, first-serve basis. Testers should use Tumblr daily and be diligent in alerting us when they find a bug. That’s what this whole thing is for, after all.</p><p><b>How does that work?</b> When you see a bug, shake your phone with gleeful rage. Rage-shaking opens an email. Describe the bug and hit send.</p><p><b>What else?</b> Well, heck. That’s what the <a href=\"https://www.tumblr.com/docs/en/android_open_beta#alpha\">FAQ</a> is for.</p><p>Now that we have that settled, go on and <a href=\"https://groups.google.com/forum/#!forum/tumblr-android-alpha\">apply for membership</a>.</p></p>","tree_html":""},"trail":[{"blog":{"name":"engineering","active":true,"theme":{"avatar_shape":"circle","background_color":"#529ECC","body_font":"Helvetica Neue","header_bounds":0,"header_image":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s.png","header_image_focused":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_image_scaled":"https://static.tumblr.com/d78a5bdf0d88a1faa030a65e968b31cb/ehm1tdz/NN6o5a2ft/tumblr_static_4guy50qh7e048880gk4sw0w0s_2048_v2.png","header_stretch":false,"link_color":"#ffffff","show_avatar":false,"show_description":true,"show_header_image":true,"show_title":false,"title_color":"#FFFFFF","title_font":"Gibson","title_font_weight":"bold"},"share_likes":false,"share_following":false,"can_be_followed":true},"post":{"id":"151346894949"},"content_raw":"<p><h2>Alpha or Beta? The Choice is Yours, Android Users.</h2><p>Earlier this year, we <a href=\"http://hellofromtumblr.com/post/144514620027/join-the-great-tumblr-android-bug-hunt-beta-help\">asked our Android users</a> to join an exciting new open beta program to help us squash bugs. We’ve since developed something stronger. Something that opens your mind in ways you’ve never thought possible. A way to opt into the mystery, the wonder, the beauty that is the latest Tumblr app: alpha.</p><p><b>What’s different?</b> While the open beta app is updated twice a month, the closed alpha app updates with the latest build every night. It will also set your mind free. Both are great things to help you find bugs, which help us make Tumblr even better. </p><p><b>Who can join?</b> A very limited number of Android users will be accepted for membership on a first-come, first-serve basis. Testers should use Tumblr daily and be diligent in alerting us when they find a bug. That’s what this whole thing is for, after all.</p><p><b>How does that work?</b> When you see a bug, shake your phone with gleeful rage. Rage-shaking opens an email. Describe the bug and hit send.</p><p><b>What else?</b> Well, heck. That’s what the <a href=\"https://www.tumblr.com/docs/en/android_open_beta#alpha\">FAQ</a> is for.</p><p>Now that we have that settled, go on and <a href=\"https://groups.google.com/forum/#!forum/tumblr-android-alpha\">apply for membership</a>.</p></p>","content":"<p><h2>Alpha or Beta? The Choice is Yours, Android Users.</h2><p>Earlier this year, we <a href=\"http://hellofromtumblr.com/post/144514620027/join-the-great-tumblr-android-bug-hunt-beta-help\">asked our Android users</a> to join an exciting new open beta program to help us squash bugs. We&rsquo;ve since developed something stronger. Something that opens your mind in ways you&rsquo;ve never thought possible. A way to opt into the mystery, the wonder, the beauty that is the latest Tumblr app: alpha.</p><p><b>What&rsquo;s different?</b> While the open beta app is updated twice a month, the closed alpha app updates with the latest build every night. It will also set your mind free. Both are great things to help you find bugs, which help us make Tumblr even better. </p><p><b>Who can join?</b> A very limited number of Android users will be accepted for membership&nbsp;on a first-come, first-serve basis. Testers should use Tumblr daily and be diligent in alerting us when they find a bug. That&rsquo;s what this whole thing is for, after all.</p><p><b>How does that work?</b> When you see a bug, shake your phone with gleeful rage. Rage-shaking opens an email. Describe the bug and hit send.</p><p><b>What else?</b> Well, heck. That&rsquo;s what the <a href=\"https://www.tumblr.com/docs/en/android_open_beta#alpha\">FAQ</a> is for.</p><p>Now that we have that settled, go on and <a href=\"https://groups.google.com/forum/#!forum/tumblr-android-alpha\">apply for membership</a>.</p></p>","is_current_item":true,"is_root_item":true}],"image_permalink":"https://engineering.tumblr.com/image/151346894949","photos":[{"caption":"","original_size":{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_1280.png","width":1000,"height":616},"alt_sizes":[{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_1280.png","width":1000,"height":616},{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_640.png","width":640,"height":394},{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_540.png","width":540,"height":333},{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_500.png","width":500,"height":308},{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_400.png","width":400,"height":246},{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_250.png","width":250,"height":154},{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_100.png","width":100,"height":62},{"url":"https://78.media.tumblr.com/669a0631e3b8a7e129299964128621fc/tumblr_oe9wky3uoc1qjk2rvo1_75sq.png","width":75,"height":75}]}],"can_like":false,"can_reblog":false,"can_send_in_message":true,"can_reply":false,"display_avatar":true}],"total_posts":167}}